{"id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.08404581993435281, "feedback": "The algorithm QuantumFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "d7821586-e08b-4772-a9bc-48121a1f3561", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "8aacf8cb-01d4-4d3d-b641-c8dd253778f2", "solution": "import numpy as np\n\nclass HybridQuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "HybridQuantumFireflyAlgorithm", "description": "Utilizing a Hybrid Quantum-Inspired Firefly Algorithm with Adaptive Individual Line Refinement for Black Box Optimization", "configspace": "", "generation": 2, "fitness": 0.08404581993435281, "feedback": "The algorithm HybridQuantumFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "5566f480-fdc9-415b-9826-fed518fe04cb", "solution": "import numpy as np\n\nclass EnhancedQuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    attraction_factor = 1 / (1 + np.abs(func(population[i]) - func(population[j])))\n                    population[i] += attraction_factor * np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedQuantumFireflyAlgorithm", "description": "Enhancing Quantum-inspired Firefly Algorithm by incorporating a dynamic attraction factor based on function evaluation values.", "configspace": "", "generation": 3, "fitness": 0.08390345626132412, "feedback": "The algorithm EnhancedQuantumFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16921580903747713, 0.17399840771597974, 0.16276780655929401, 0.1566656950097267, 0.1761299046679078, 0.16643150300252818, 0.17006557563247426, 0.1500629814652995, 0.162609359099802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03501739180809105, 0.044184588913461775, 0.03143084058773715, 0.034664452175811156, 0.03572359375454892, 0.03608608933135349, 0.047579258287269166, 0.0606344885526543, 0.05144345550603324, 0.021634431038480728, 0.02255946346201343, 0.037721376525038264, 0.02104833529304284, 0.040972216496704794, 0.0506247772851357, 0.035184274898803825, 0.032793820109372596, 0.027954657095606628, 0.07318094125856844, 0.06763489372917608, 0.08345679342499512, 0.07938188729360751, 0.079854325311295, 0.08070133302734994, 0.08015914220123499, 0.07616513834397587, 0.07824517113473861, 0.063813104590968, 0.07104361783786839, 0.10014972358905128, 0.04992410086417398, 0.06162210880095331, 0.03698454924875838, 0.091054867352789, 0.036334495165254665, 0.08937797682888882, 0.11700505251913929, 0.18913129031683584, 0.14261748767730276, 0.09623408429732572, 0.08530230780346904, 0.11852274426299614, 0.0989249057575955, 0.1172313483432581, 0.10784908371782254, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007354853124612593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01674047748917984, 9.999999999998899e-05, 0.05838297492450384, 9.999999999998899e-05, 0.002154822601508899, 0.03401651191940269, 0.00942599810533351, 0.017663509488094697, 0.004314097244714876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03179643611859284, 0.06590998266928982, 0.04317831001851846, 0.05940843965970943, 0.023563065696603047, 0.0457674252400313, 0.0312705386494303, 0.03200732414657559, 0.04471183199501361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002426606796525399, 9.999999999998899e-05, 0.21331167135373574, 0.19056348003284918, 0.17678791116232273, 0.20270894326920286, 0.18311307019857126, 0.19502648003783862, 0.195405431274022, 0.16336901367601908, 0.18563260867670495, 0.02942309565746204, 0.03553745701769617, 0.034315491894243655, 0.036128997881329505, 0.035271954549686235, 0.04264477567730651, 0.05339831320569577, 0.03755873261150866, 0.0450578026783256, 0.13609190703613216, 0.11804534504110376, 0.12090090439033396, 0.1398350869356917, 0.13910062364388487, 0.11639951383380454, 0.14756365457755016, 0.14455771045244414, 0.1217665155320643, 0.16317683090318735, 0.15432863858095658, 0.16743300513616666, 0.1632022056896525, 0.16684130518981166, 0.16747117604716677, 0.15684370635379763, 0.17364340948589474, 0.1447224619430052, 0.10298389148986664, 0.09625271251867817, 0.10903603297447917, 0.10092911604766708, 0.12472226299398115, 0.10658969110537686, 0.10140894734710748, 0.12307429582869123, 0.11641095639255417, 0.13260893772600735, 0.15425253780151393, 0.14214057096292732, 0.15279486162087708, 0.1361114379198618, 0.153260619473776, 0.145608707472772, 0.15182240232469335, 0.17634003165547074, 0.13086909261786916, 0.14057287033502575, 0.1335175340398853, 0.1318471287427867, 0.13669337133261328, 0.14633780121935014, 0.1251086814371778, 0.13296870848724374, 0.1604102786712911, 0.136738755219869, 0.1634083101988616, 0.1616253108349014, 0.15419218539905288, 0.14281125620011081, 0.12859664300490636, 0.15330869612527132, 0.1538743786865362, 0.15480845199852278, 0.14807178959501655, 0.14601311550938412, 0.1463994152332352, 0.1330725420576664, 0.13374129154517012, 0.14804173278549937, 0.1616691909382667, 0.16372782458035906, 0.14322795226705598, 0.16462434648250723, 0.18351607851069396, 0.17299352585882954, 0.18417481430047666, 0.20752918313894875, 0.17599556155355944, 0.17371812081947446, 0.17853232264350405, 0.20276498699734524, 0.05168667249606662, 0.0489581421584937, 0.0639695117944562, 0.050070383967529386, 0.05856787270454111, 0.049017548225249286, 0.07201397052980518, 0.05262902853988982, 0.042122061291707924]}, "mutation_prompt": null}
{"id": "2851357b-e7c9-44d9-a062-3282412d2d7e", "solution": "import numpy as np\n\nclass EnhancedQuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        def differential_evolution(i):\n            r1, r2, r3 = np.random.choice(range(len(population)), 3, replace=False)\n            mutant = population[r1] + 0.5 * (population[r2] - population[r3])\n            trial = population[i] + np.random.uniform(0, 1, self.dim) * (mutant - population[i])\n            if func(trial) < func(population[i]):\n                population[i] = trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n                if np.random.rand() < 0.35:\n                    differential_evolution(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedQuantumFireflyAlgorithm", "description": "Enhancing Quantum-inspired Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization", "configspace": "", "generation": 4, "fitness": 0.08404581993435281, "feedback": "The algorithm EnhancedQuantumFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "8ba8b4e5-32cb-483b-82ad-da78ae0d96ad", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "68346b61-eee1-43d6-baf5-85c90573df9a", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "1e789239-6f1b-4c47-af32-ded903f381f5", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "71611d48-0ebc-4338-be50-d3b9918247ff", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "db1095e8-f995-4efd-9319-2d8b416c16ae", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "b2e84e67-d528-4568-9c10-0bea2c47f3c1", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "b8240586-4605-4f77-926d-223a83bc91d1", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "5f3c610d-2cf1-44f6-b7ce-e65c209ce5cb", "solution": "import numpy as np\n\nclass CuckooSearchAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25  # Probability of a cuckoo egg being discovered\n\n    def levy_flight(self):\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        nest_fitness = [func(ind) for ind in population]\n\n        for _ in range(self.budget):\n            new_population = population.copy()\n            for i in range(len(population)):\n                step = self.levy_flight()\n                new_position = np.clip(population[i] + step, -5.0, 5.0)\n                if func(new_position) < nest_fitness[i]:\n                    nest_fitness[i] = func(new_position)\n                    new_population[i] = new_position\n\n            replace_indices = np.argsort(nest_fitness)[:int(self.pa * len(population))]\n            for i in replace_indices:\n                new_population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                nest_fitness[i] = func(new_population[i])\n\n            population = new_population\n\n        best_solution = population[np.argmin(nest_fitness)]\n        return best_solution", "name": "CuckooSearchAlgorithm", "description": "A Metaheuristic Algorithm based on Cuckoo Search for Black Box Optimization", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {}, "mutation_prompt": null}
{"id": "3d458f9c-9f60-4c87-8c46-dbd5eb0eae92", "solution": "import numpy as np\n\nclass QuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "QuantumFireflyAlgorithm", "description": "Quantum-inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16324239401870544, 0.16732519450230976, 0.1678579292194058, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10107569637739722, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.1743595511468259, 0.17879670670971137, 0.2028408901080646, 0.05172990528328958, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "55fe00e8-31eb-42ff-bca1-40f132b9d339", "solution": "import numpy as np\n\nclass EnhancedQuantumFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5  # Quantum probability factor\n\n    def __call__(self, func):\n        def attractiveness(i, j):\n            return np.exp(-self.alpha * np.linalg.norm(population[i] - population[j]))\n\n        def move_with_fireflies(i):\n            for j in range(len(population)):\n                if func(population[i]) > func(population[j]) and attractiveness(i, j) > np.random.rand():\n                    population[i] += np.random.uniform(-1, 1, self.dim) * np.exp(-self.alpha * np.linalg.norm(population[j] - population[i]))\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        for _ in range(self.budget):\n            for i in range(len(population)):\n                if np.random.rand() < 0.35:  # Probability for strategy refinement\n                    self.alpha += np.random.uniform(-0.1, 0.1)\n                move_with_fireflies(i)\n\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        return best_solution", "name": "EnhancedQuantumFireflyAlgorithm", "description": "Enhanced Quantum-inspired Firefly Algorithm for Black Box Optimization with adaptive strategy refinement based on probability.", "configspace": "", "generation": 14, "fitness": 0.08404711719378065, "feedback": "The algorithm EnhancedQuantumFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "30ac9ae2-1030-4416-bbe8-07c96c300d96", "metadata": {"aucs": [0.16922354805390227, 0.17405532521825262, 0.16287668652659426, 0.15712724414569335, 0.17649640392473176, 0.16663224305576008, 0.17026019871989773, 0.1502452625949683, 0.1632018418843525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03514042939566009, 0.04428675240948199, 0.03153524127331753, 0.03474864332870309, 0.03577247694108321, 0.03610436849566234, 0.04773306108594422, 0.060732194359488845, 0.05167726418543539, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05071721376435401, 0.0352462949077853, 0.032996903968840474, 0.02797730971513268, 0.07372559886440344, 0.0676783596684325, 0.08371896141627588, 0.07951550774325788, 0.07985980919193336, 0.08081747962345431, 0.0802675228163704, 0.07626313776614646, 0.07829210905586859, 0.06384417797859765, 0.07115529207264681, 0.10019098225768097, 0.05009526422053712, 0.06162210880095331, 0.037157716034879607, 0.09115391308882481, 0.03707158598997118, 0.0894403634800155, 0.11705550646505725, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08539854054483931, 0.11874968154349264, 0.09918347917331827, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295233796211361, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.045999554680021926, 0.031484297717062515, 0.032021600354247504, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21368328386103042, 0.19064354651143434, 0.176806362362948, 0.20274431787614766, 0.18329860184692526, 0.19563030720860775, 0.19543741300399198, 0.16394125271806193, 0.18573516310366578, 0.02975268864362257, 0.03556965700026937, 0.03465800159083976, 0.03624249063079643, 0.03538018083011307, 0.042699362075576563, 0.053691998991280854, 0.03768692197303858, 0.04528571105900847, 0.13613724716902575, 0.11806201688428863, 0.12091586556939315, 0.13987543366300104, 0.13916780410775698, 0.11645596572514372, 0.14763481983925486, 0.14462493908250673, 0.12208002936272111, 0.16320143036243684, 0.15439440067120414, 0.1674620074240789, 0.16415570138585645, 0.16732519450230976, 0.16783143712200144, 0.15685781374305863, 0.17364340948589474, 0.14494895359181303, 0.10304545595491688, 0.09645030347233097, 0.10911721304895583, 0.10103156262677115, 0.1252016238635446, 0.10666041983622798, 0.10142617178647251, 0.12308409916342788, 0.11668194685029176, 0.13263129361623027, 0.15451534811139422, 0.14216762865953625, 0.15281689509703278, 0.13626591634165452, 0.15357718381893193, 0.14561526047517015, 0.15241383280912646, 0.1764453879413861, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.13793624449734254, 0.16362696297138812, 0.161853032849961, 0.1542350133403605, 0.1431567636436215, 0.129019189589603, 0.15343508367181535, 0.15391397843201426, 0.15492076561818646, 0.14839819725353842, 0.14605002597417838, 0.1469808249548954, 0.13402108048380756, 0.13430573606273466, 0.14832764160029732, 0.162019298172546, 0.16397233144724288, 0.14409045054873382, 0.1647577894553628, 0.1835301851688902, 0.1715521531298131, 0.18425690028476183, 0.2077621331717494, 0.176388394987671, 0.17378641104812154, 0.17879670670971137, 0.2028408901080646, 0.05174057189928849, 0.049039147045157216, 0.06398342394504342, 0.05011327415224809, 0.0586070684490142, 0.04906964415901416, 0.0720541092099205, 0.05270037810245409, 0.04220048499455775]}, "mutation_prompt": null}
{"id": "fa18df6b-9b2b-447d-978a-0541bd5d33e8", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "FireworkAlgorithm", "description": "Firework Algorithm for Black Box Optimization with dynamic creation and interaction of different types of fireworks.", "configspace": "", "generation": 15, "fitness": 0.09004277027856081, "feedback": "The algorithm FireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "55fe00e8-31eb-42ff-bca1-40f132b9d339", "metadata": {"aucs": [0.17182788416755412, 0.19446341638824927, 0.183413767321987, 0.1718515936043603, 0.17654234018443626, 0.17549980820836064, 0.17102871874775005, 0.1510589753680731, 0.16323930127383068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04470072728065866, 0.04609333798422144, 0.0363369896204736, 0.03921571451195982, 0.03596424447318969, 0.04026308265450629, 0.0523009693625065, 0.06202548619139492, 0.05353504441112422, 0.04477746768218471, 0.03234419348862716, 0.03821006066961685, 0.026020027375133425, 0.042394822395393605, 0.05289782549389477, 0.035634086184689995, 0.04786941032765968, 0.03170398013813669, 0.0765357796826287, 0.08538161817888412, 0.1087099315458685, 0.08384956500527618, 0.08327984050860726, 0.09897778938154733, 0.08220971086216866, 0.08094455224249308, 0.082743172081022, 0.08619367158612568, 0.07198966216738367, 0.10019098225768097, 0.05692724926314008, 0.0827029952116427, 0.06162699299332941, 0.09115391308882481, 0.03866203674148094, 0.09010418216574767, 0.11706049663928064, 0.18929740399810613, 0.14283493484061893, 0.11981688944522284, 0.09550351797906897, 0.12178124491363174, 0.10950761346881333, 0.12428958775013565, 0.10860510898758202, 9.999999999998899e-05, 9.999999999998899e-05, 0.001059487794729419, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030399351883632075, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.004395543106264221, 0.03406038839019088, 0.011533292896788616, 0.017667153369731237, 0.005989706264652006, 0.01932425451543862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03752327535410749, 0.06600492231431232, 0.04325570707499371, 0.06454077602087693, 0.024573073063142714, 0.051172596786843494, 0.03459645980018722, 0.06932148503623103, 0.058268865786988644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21626592696002112, 0.19093666165483913, 0.19435346639338802, 0.20350712671540117, 0.18658786706490915, 0.19997216152592212, 0.19620733222038467, 0.17050816425664284, 0.18744653583874304, 0.033308620373880715, 0.049857743412066724, 0.05260284819154526, 0.0379551127558041, 0.038547951836508165, 0.04339091786674232, 0.05541927833009008, 0.03842159376172427, 0.05277590232843832, 0.1368420349574253, 0.14449146979756766, 0.13093254305993574, 0.15858203017610506, 0.13917869545901373, 0.16009307088915248, 0.1484716798938681, 0.14579811169887003, 0.13045277770724717, 0.16346886561334473, 0.17041271842793904, 0.18097488247000815, 0.1674079142182442, 0.1741565949494801, 0.16867565576132726, 0.15934020383347103, 0.18816570488163475, 0.16172866540841968, 0.10808464453968814, 0.11717990582070392, 0.1287088631199662, 0.10783309010792419, 0.12591288740020046, 0.10783715384703496, 0.10182070218147077, 0.12719099767170516, 0.11790795319613045, 0.14391658719276545, 0.16183636053774986, 0.15538974740343925, 0.17293051664147896, 0.15555407463745063, 0.157444726251314, 0.16357993311148233, 0.15989158315398722, 0.17699601921215413, 0.13588567613690938, 0.14768117393233315, 0.15086954081619575, 0.13904646567639667, 0.14689660293297935, 0.14989931017825564, 0.1344747619087311, 0.13833838981927638, 0.16049026799844923, 0.1380251991465664, 0.16378379318293101, 0.16234688108001427, 0.16208134948167463, 0.16580236040976537, 0.16026108299940645, 0.19698009747163847, 0.16334548742690735, 0.17253209393826185, 0.1508257428477764, 0.16003847616804812, 0.17111322665620288, 0.17089877513891383, 0.13710905262456108, 0.14960130143276906, 0.16226382079510326, 0.16885148415913642, 0.15423620285335182, 0.18656288703582735, 0.18383829083725245, 0.17448926431871936, 0.18553698167958088, 0.20935889441742683, 0.18780939371022998, 0.19148243370780893, 0.17922561090839262, 0.20881492209175667, 0.05444334337371637, 0.04998993329637558, 0.0639824361372785, 0.05106271687360642, 0.05867004779048779, 0.05049040471931587, 0.07236436749512942, 0.0702328933395926, 0.04906929554481154]}, "mutation_prompt": null}
{"id": "2ff6a029-4bba-4b39-858e-1c8f19314108", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "FireworkAlgorithm", "description": "Firework Algorithm for Black Box Optimization with dynamic creation and interaction of different types of fireworks.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa18df6b-9b2b-447d-978a-0541bd5d33e8", "metadata": {"aucs": [0.17182788416755412, 0.19446341638824927, 0.183413767321987, 0.1718515936043603, 0.17654234018443626, 0.17549980820836064, 0.17102871874775005, 0.1510589753680731, 0.16323930127383068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04470072728065866, 0.04609333798422144, 0.0363369896204736, 0.03921571451195982, 0.03596424447318969, 0.04026308265450629, 0.0523009693625065, 0.06202548619139492, 0.05353504441112422, 0.04477746768218471, 0.03234419348862716, 0.03821006066961685, 0.026020027375133425, 0.042394822395393605, 0.05289782549389477, 0.035634086184689995, 0.04786941032765968, 0.03170398013813669, 0.0765357796826287, 0.08538161817888412, 0.1087099315458685, 0.08384956500527618, 0.08327984050860726, 0.09897778938154733, 0.08220971086216866, 0.08094455224249308, 0.082743172081022, 0.08619367158612568, 0.07198966216738367, 0.10019098225768097, 0.05692724926314008, 0.0827029952116427, 0.06162699299332941, 0.09115391308882481, 0.03866203674148094, 0.09010418216574767, 0.11706049663928064, 0.18929740399810613, 0.14283493484061893, 0.11981688944522284, 0.09550351797906897, 0.12178124491363174, 0.10950761346881333, 0.12428958775013565, 0.10860510898758202, 9.999999999998899e-05, 9.999999999998899e-05, 0.001059487794729419, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030399351883632075, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.004395543106264221, 0.03406038839019088, 0.011533292896788616, 0.017667153369731237, 0.005989706264652006, 0.01932425451543862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03752327535410749, 0.06600492231431232, 0.04325570707499371, 0.06454077602087693, 0.024573073063142714, 0.051172596786843494, 0.03459645980018722, 0.06932148503623103, 0.058268865786988644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21626592696002112, 0.19093666165483913, 0.19435346639338802, 0.20350712671540117, 0.18658786706490915, 0.19997216152592212, 0.19620733222038467, 0.17050816425664284, 0.18744653583874304, 0.033308620373880715, 0.049857743412066724, 0.05260284819154526, 0.0379551127558041, 0.038547951836508165, 0.04339091786674232, 0.05541927833009008, 0.03842159376172427, 0.05277590232843832, 0.1368420349574253, 0.14449146979756766, 0.13093254305993574, 0.15858203017610506, 0.13917869545901373, 0.16009307088915248, 0.1484716798938681, 0.14579811169887003, 0.13045277770724717, 0.16346886561334473, 0.17041271842793904, 0.18097488247000815, 0.1674079142182442, 0.1741565949494801, 0.16867565576132726, 0.15934020383347103, 0.18816570488163475, 0.16172866540841968, 0.10808464453968814, 0.11717990582070392, 0.1287088631199662, 0.10783309010792419, 0.12591288740020046, 0.10783715384703496, 0.10182070218147077, 0.12719099767170516, 0.11790795319613045, 0.14391658719276545, 0.16183636053774986, 0.15538974740343925, 0.17293051664147896, 0.15555407463745063, 0.157444726251314, 0.16357993311148233, 0.15989158315398722, 0.17699601921215413, 0.13588567613690938, 0.14768117393233315, 0.15086954081619575, 0.13904646567639667, 0.14689660293297935, 0.14989931017825564, 0.1344747619087311, 0.13833838981927638, 0.16049026799844923, 0.1380251991465664, 0.16378379318293101, 0.16234688108001427, 0.16208134948167463, 0.16580236040976537, 0.16026108299940645, 0.19698009747163847, 0.16334548742690735, 0.17253209393826185, 0.1508257428477764, 0.16003847616804812, 0.17111322665620288, 0.17089877513891383, 0.13710905262456108, 0.14960130143276906, 0.16226382079510326, 0.16885148415913642, 0.15423620285335182, 0.18656288703582735, 0.18383829083725245, 0.17448926431871936, 0.18553698167958088, 0.20935889441742683, 0.18780939371022998, 0.19148243370780893, 0.17922561090839262, 0.20881492209175667, 0.05444334337371637, 0.04998993329637558, 0.0639824361372785, 0.05106271687360642, 0.05867004779048779, 0.05049040471931587, 0.07236436749512942, 0.0702328933395926, 0.04906929554481154]}, "mutation_prompt": null}
{"id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 17, "fitness": 0.09129884660798424, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fa18df6b-9b2b-447d-978a-0541bd5d33e8", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "0c590f50-5b5e-4628-9a72-69c19ac604a5", "solution": "import numpy as np\n\nclass RefinedEnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                if np.random.rand() < 0.35:  # Probabilistic line refinement\n                    differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "RefinedEnhancedFireworkAlgorithm", "description": "Refining Enhanced Firework Algorithm by introducing a probabilistic selection mechanism to adaptively vary individual lines of the algorithm for enhanced exploration and exploitation.", "configspace": "", "generation": 18, "fitness": 0.09129391613010737, "feedback": "The algorithm RefinedEnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.17626405034750858, 0.15782254146192243, 0.17705036748222625, 0.17150231963172302, 0.17334789531212047, 0.1598563852133993, 0.19164481791414578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037217585989573254, 0.042775406932312965, 0.048174824009534545, 0.04089934883545354, 0.05361165361616771, 0.06170677637735822, 0.051757626896901776, 0.026342251741338973, 0.02590932881128971, 0.04019378143782737, 0.024609757942250288, 0.04153713305303175, 0.05316715448506637, 0.03527997191844989, 0.04027781441456446, 0.029309243532378293, 0.09923910311856288, 0.1214688103492283, 0.11597751984315097, 0.14785859955914005, 0.108594149057188, 0.09608984160654732, 0.09347218953399405, 0.1383395680304137, 0.11066497405579245, 0.06384417797859765, 0.07407890623973867, 0.10017035292336607, 0.06475530988478462, 0.08305828383547209, 0.07278224759745755, 0.09115391308882481, 0.06812568566658284, 0.09051785134921209, 0.11821781340138549, 0.18929541232743163, 0.15275579819713803, 0.11113563011214556, 0.11113845450204629, 0.11910854221774225, 0.1049931933826167, 0.12235782448829391, 0.11521355813494849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007925492997026273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.01678618634173068, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009465622983475308, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04324641545896524, 0.05941523347397892, 0.02761678189223893, 0.06295329560810392, 0.038554432697473606, 0.033971968864206836, 0.06206993829782348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016578490114143474, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18455353252786666, 0.20544623521082261, 0.18954485219879869, 0.1960784903888413, 0.21175647269466158, 0.1782941588647693, 0.1938537802929794, 0.0346167773078212, 0.03587106423759556, 0.034647345642444316, 0.03669725320361272, 0.05619499428614383, 0.04315887298401888, 0.056034984536230126, 0.04136150978834108, 0.04880143411474258, 0.19775912415273955, 0.12187940949892273, 0.12108523744494792, 0.13988811591733052, 0.1609651440439227, 0.11797837171343728, 0.14916077747294132, 0.14463643668374404, 0.1418447858695816, 0.16326562461321137, 0.1544314398909057, 0.16746791575197362, 0.17088013277046177, 0.17357337543122597, 0.1796528573053543, 0.1574385326477633, 0.17365700749066748, 0.14587050955682968, 0.10314827239051172, 0.09666777838903107, 0.11023191755226558, 0.10974377354086595, 0.12799679333850544, 0.10946004060456926, 0.10142214173058761, 0.12308675183387163, 0.11680630390349211, 0.1457270994944314, 0.15738412076518415, 0.14900880100820346, 0.19672826048618453, 0.16789374170220617, 0.1546806527659601, 0.14683024995028704, 0.16175514009077363, 0.17748226298577907, 0.13935162407487822, 0.1456626695329023, 0.13561810261445184, 0.13369781097497158, 0.1454804719577818, 0.15445708836828032, 0.14536806169317928, 0.14435588591919424, 0.16194244153976456, 0.1428397497128111, 0.16472528134446562, 0.16189509124692592, 0.16981949311089206, 0.14347447475945285, 0.14533563030420882, 0.15429520337655322, 0.15421967348488574, 0.15527926555957106, 0.17223722158066634, 0.15312032454964597, 0.16269703877355168, 0.13816246152699296, 0.1424694838424997, 0.2550393361497403, 0.16229576832060377, 0.16683339775408146, 0.14526171430850132, 0.17723860296170446, 0.18761001384842124, 0.17245364339897873, 0.18616856304319962, 0.20849931575394332, 0.18000374150422138, 0.17540488539735777, 0.17900477415132665, 0.20648460877796293, 0.05236116228448351, 0.04906842260002309, 0.06397088761883729, 0.05051770833070246, 0.05861712672059838, 0.05094177852830273, 0.07408830854053317, 0.052726988449746215, 0.05091950618179175]}, "mutation_prompt": null}
{"id": "bd4d2836-62c2-4607-96d3-0e0cc13f45a0", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "d344deb1-3614-4538-9862-aceb60f73312", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "1d4b2cb5-a3ca-4ea7-9c87-2b743efeea9a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "b19d2f35-3249-42fa-bb91-f65879d13804", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "5378345a-36f0-4b46-8c30-85529195a66b", "solution": "import numpy as np\n\nclass EvolutionaryCrossoverOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_solution():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def novel_crossover(solution, best_solution):\n            return solution + np.random.uniform(-1, 1, self.dim) * (best_solution - solution)\n\n        solutions = [create_solution() for _ in range(self.budget)]\n        best_solution = solutions[0]  # Initialize with the first solution\n        for _ in range(self.budget):\n            for i in range(len(solutions)):\n                new_solution = novel_crossover(solutions[i], best_solution)\n                if func(new_solution) < func(solutions[i]):\n                    solutions[i] = new_solution\n                if func(solutions[i]) < func(best_solution):\n                    best_solution = solutions[i]\n\n        return best_solution", "name": "EvolutionaryCrossoverOptimization", "description": "Utilizing an Evolutionary Search with a Novel Crossover Mechanism for Enhanced Exploration and Exploitation in Black Box Optimization", "configspace": "", "generation": 23, "fitness": 0.0906485386970342, "feedback": "The algorithm EvolutionaryCrossoverOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2416804141852812, 0.18694767309099702, 0.19483192853980125, 0.21469775509136413, 0.16453345268677877, 0.1574013797680336, 0.16331101411957316, 0.158504253153816, 0.17554704675093347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323854226133972, 0.05027176805424627, 0.0494783337099467, 0.03838196842323782, 0.06998749843533691, 0.07942230683563267, 0.05375946927162223, 0.058217821558365745, 0.05228791480605721, 0.030476607781321774, 0.0481328849606425, 0.05384056413308114, 0.03729944595113088, 0.04321702864726562, 0.045374914235480346, 0.034005460564199175, 0.030632931118194984, 0.027761172063736184, 0.07917597910008722, 0.08944687727207279, 0.08037071962089648, 0.07732489735135373, 0.09024678170894695, 0.0869671997737731, 0.08694330934517835, 0.0736624686491959, 0.08934006243700476, 0.0674871722073167, 0.06759896229303575, 0.09727600008012305, 0.06239813229861335, 0.0859371075175539, 0.09392147369712112, 0.08790463909280222, 0.07201025035669462, 0.08652909473580894, 0.12901464519897798, 0.182140512911394, 0.13779284585736828, 0.13142820553844958, 0.11501209205131746, 0.14000562354227153, 0.09715706054421025, 0.1649111482818909, 0.12713585962865015, 0.02126383494082751, 9.999999999998899e-05, 0.011242437637453029, 9.999999999998899e-05, 0.0025539396720001273, 9.999999999998899e-05, 0.020953897457628212, 0.041733154289457564, 0.010631659063808141, 0.006620944454920008, 0.037367093517693184, 0.02052278657848783, 0.049606863353376496, 0.03146436386855456, 0.0069414335421426054, 0.017018542438422046, 0.014869742113231554, 0.03710592146271918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048844935240205944, 0.060851791228871854, 0.03996262562353692, 0.04232440278063443, 0.02022884362446109, 0.027367006198179444, 0.02581123493681714, 0.028259819632703298, 0.0522949895494319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008256470189707543, 0.0015124479988808393, 9.999999999998899e-05, 0.0012205158730017596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009817619461901295, 0.21486188358096203, 0.1983398945502659, 0.20435911676033347, 0.213577691905662, 0.18360681283642566, 0.18887881558996256, 0.21870280077573412, 0.19127302768088073, 0.28349662235056095, 0.04261983863621466, 0.04237530949061674, 0.03947200171925447, 0.06827420233075787, 0.03740865944689942, 0.046528995626084146, 0.0424257950766882, 0.039508318951208876, 0.04606009471437478, 0.13438740367247082, 0.1122482511533528, 0.11807283073425223, 0.13754703706287508, 0.13522770723096056, 0.10822068939147012, 0.14373277296414677, 0.13684843717381956, 0.11317526491646368, 0.16220419594965374, 0.16301970401810195, 0.16733249900395664, 0.17820641965918604, 0.1707175650402174, 0.17796121287691136, 0.15719279394929564, 0.17599422917705454, 0.15428417614989487, 0.11597699750065982, 0.1164856226383415, 0.10575576061147984, 0.10646637242188661, 0.11362008920713018, 0.11958379725448953, 0.10057341663597186, 0.12181118533251267, 0.13274861340031308, 0.13438546916139094, 0.16887479577048814, 0.1474036463796623, 0.14786498025061934, 0.14541749733874842, 0.1488577173838861, 0.16478163355677666, 0.15031155113195327, 0.17028345227778952, 0.1274841829488521, 0.1448963306428226, 0.14555046646086178, 0.13127859242749185, 0.14410316882389984, 0.15676900664987736, 0.14004321643694506, 0.1359741499539836, 0.15840954791894224, 0.1306115103759976, 0.1573467128967695, 0.15896145455062238, 0.167431323928243, 0.2788963821081565, 0.12080592566376869, 0.16756398818009843, 0.1494123619823018, 0.1526934280969936, 0.14669349417559607, 0.1371863115898273, 0.12005013423693167, 0.12321486514129976, 0.13353564602407786, 0.287121876184383, 0.1568788912571808, 0.15882887058631545, 0.16114716641625326, 0.16528411806543553, 0.18428166847878524, 0.17131330887361873, 0.1802403885588434, 0.21820051071852908, 0.17625340942385104, 0.17322049357956115, 0.17208708671615025, 0.198107976516128, 0.04461884461801091, 0.046735262910793995, 0.06106610054202133, 0.05126494341508314, 0.057811002565798075, 0.05380243540481899, 0.0724382277173301, 0.0508305224072928, 0.04776339396918994]}, "mutation_prompt": null}
{"id": "90b96b90-0ca5-43e2-b816-71614cfba803", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "a90557b5-f90d-4f13-ad10-4e10d4f45dbb", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "4167dd91-907b-434b-9843-4e68c083a673", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmOpposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        # Incorporating opposition-based learning\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        opposite_solution = -best_solution\n        if func(opposite_solution) < func(best_solution):\n            best_solution = opposite_solution\n\n        return best_solution", "name": "EnhancedFireworkAlgorithmOpposition", "description": "Enhancing Firework Algorithm with Differential Evolution strategy incorporating opposition-based learning for improved exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.09129884660798424, "feedback": "The algorithm EnhancedFireworkAlgorithmOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "dbd81dca-03c4-4374-bbab-aaa296feba89", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "1a8e5c1d-ffa8-4220-aeea-4d4daa45158e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                new_firework = explode(fireworks[i])\n                if func(new_firework) < func(fireworks[i]):\n                    fireworks[i] = new_firework\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.2189801737100976, 0.2605715147801533, 0.1762904251131835, 0.1578218503093296, 0.17705200897938977, 0.17153367284629262, 0.17334789531212047, 0.1598563852133993, 0.1916710669416951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0366584361657698, 0.04452139485920836, 0.037227903657104044, 0.042775406932312965, 0.048174824009534545, 0.04090877383641778, 0.05361165361616771, 0.06170677637735822, 0.051770755879558594, 0.026342251741338973, 0.02590932881128971, 0.040205447175288955, 0.024609757942250288, 0.04153713305303175, 0.053179801740417476, 0.03527997191844989, 0.04027781441456446, 0.029315533601690702, 0.09924100361238075, 0.1214688103492283, 0.1159999603299009, 0.14786418006262791, 0.108594149057188, 0.09611079184497617, 0.09347707144659945, 0.1383395680304137, 0.11068803240334069, 0.06384417797859765, 0.07407890623973867, 0.10019098225768097, 0.06475530988478462, 0.08305828383547209, 0.07280002014136566, 0.09115391308882481, 0.06812568566658284, 0.09053706998944167, 0.11821781340138549, 0.18929541232743163, 0.15279074378096247, 0.11113563011214556, 0.11113845450204629, 0.11913472982138085, 0.1049931933826167, 0.12235782448829391, 0.11524231568661103, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032452849532965566, 9.999999999998899e-05, 0.016790757226985753, 0.003973523239729215, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03768948779726633, 0.009468453331913929, 0.017667153369731237, 0.0049324191877154755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04606907370094937, 0.06648712172147064, 0.04325570707499371, 0.05941523347397892, 0.02761678189223893, 0.06296729255624067, 0.038554432697473606, 0.033971968864206836, 0.062086447424301694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016583035277600744, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2137748912290447, 0.19543195383021994, 0.18456232886142498, 0.20544623521082261, 0.1895490689276249, 0.19612369624949888, 0.21175647269466158, 0.1782800310917333, 0.19388517615543277, 0.0346167773078212, 0.03587106423759556, 0.03465800159083976, 0.03669725320361272, 0.05619499428614383, 0.043168460657595276, 0.056034984536230126, 0.04136150978834108, 0.04881496596971879, 0.19775912415273955, 0.12187940949892273, 0.12110080807762647, 0.13989007422571298, 0.1609651440439227, 0.11799496623238681, 0.1491471634647371, 0.14463643668374404, 0.14187507673342603, 0.16326562461321137, 0.1544314398909057, 0.1674881372124435, 0.17088013277046177, 0.17357337543122597, 0.179676488694679, 0.1574385326477633, 0.17365700749066748, 0.1458884815244439, 0.10314827239051172, 0.09666777838903107, 0.11025731413743611, 0.10974377354086595, 0.12799679333850544, 0.10947972887440816, 0.10142214173058761, 0.12308675183387163, 0.11683211493613221, 0.1457270994944314, 0.15739011911421952, 0.14902510212592535, 0.19672826048618453, 0.16789166636369957, 0.1547032697391476, 0.14683024995028704, 0.16175514009077363, 0.17750227901054527, 0.13935162407487822, 0.1456626695329023, 0.13564821397837445, 0.13369781097497158, 0.1454804719577818, 0.15448993746978978, 0.14536806169317928, 0.14435588591919424, 0.16197515792316686, 0.1428397497128111, 0.16472528134446562, 0.16192066924921744, 0.16981949311089206, 0.14347447475945285, 0.14536548423757645, 0.15429520337655322, 0.15421967348488574, 0.15529587733546946, 0.17223722158066634, 0.15312032454964597, 0.16272839978870557, 0.13807289546982482, 0.1424694838424997, 0.25509072587573756, 0.16229576832060377, 0.16683339775408146, 0.14531085497917573, 0.17723860296170446, 0.18761001384842124, 0.17247320008736755, 0.18616856304319962, 0.20849931575394332, 0.1800170633567102, 0.17540488539735777, 0.17900477415132665, 0.20649023177069004, 0.05236116228448351, 0.04906842260002309, 0.0639824361372785, 0.05051770833070246, 0.05861712672059838, 0.05095328660074305, 0.07408830854053317, 0.052726988449746215, 0.050929478424884156]}, "mutation_prompt": null}
{"id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 29, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedFireworkAlgorithmWithPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cdbea35e-580f-43b5-a538-d5ffe8b812ac", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9db5bb7a-377d-46e3-9b52-7f405c737fde", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8b89b04b-e803-4712-a00e-82af6d8f16bb", "solution": "import numpy as np\n\nclass DynamicFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "DynamicFireworkAlgorithm", "description": "Enhancing Firework Algorithm with Differential Evolution strategy, incorporating a novel local search mechanism based on Particle Swarm Optimization, utilizing dynamic velocity updates and mutation operators.", "configspace": "", "generation": 31, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "41b28f1d-b549-4f9b-ac8a-89e52a566fe8", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2a32118a-9f15-42ce-8a46-dd4a467c56d1", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "04070158-f347-4b14-befd-059d5f6af06e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "71cfb4c6-c66d-4432-b303-8f09e3d6ad60", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "34e57a56-f7bf-4019-a0da-b4147907f8ee", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c2785e7b-ef22-4ee0-a734-f9202a8b6dd8", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0321597d-03ad-4742-8132-63572aba9d9a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7690e9f6-bb04-4b9e-8669-76d54bc686da", "solution": "import numpy as np\n\nclass HybridDEFAWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "HybridDEFAWithPSO", "description": "Hybrid Differential Evolution with Firework Algorithm and Local Search using Particle Swarm Optimization for efficient global exploration and exploitation in black box optimization.", "configspace": "", "generation": 39, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridDEFAWithPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "115be9eb-fef7-4cfb-8428-134efcb8f3b3", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "263ed65d-fdda-4a6e-bc53-5f643b82810e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "33da4aca-ad66-4bc3-9f12-b6d38a7558b4", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "aa58718e-fd10-4c7a-9c88-8e6d00a92223", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0803679d-6142-46b7-897d-46a1f9d2ad1d", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7cf94e03-4cb9-4cf7-a608-b65b2feda9b7", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "27516d2a-e6ab-46c0-9a94-1af9dd2b4270", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0e05593c-61d1-483d-9ac0-b28dd76a948c", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6a2a2a16-98c2-4467-93d0-fa6f4d225427", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "569570dc-6c13-4f9c-ad78-dfceb873ccc4", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2a347ff2-ccb7-4587-bbef-72c419c6d291", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "556e9635-6793-4d84-84c4-07991c1c1784", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "900f7499-e60c-45b9-b955-34bfce298af9", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "06b4b9ac-b3e7-402e-a7e3-b64430d5c3b7", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3c90cfd8-370e-4a56-9e83-afa27f41de51", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c3b41c78-95b3-4cb9-bb0e-2678b250d061", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "27574c55-ced7-48da-9878-a8e5a00a910d", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e1fb0889-24e8-4f76-84b8-f9ae1a0a2e74", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "5737316a-3e60-4544-804e-6e9192f3f608", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f871992b-bdac-484f-a440-122d5199629b", "solution": "import numpy as np\n\nclass RefinedEnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n                \n                # Refined parameter tuning\n                F = np.clip(F * np.random.normal(1, 0.1), 0.1, 0.9)  # Adaptive parameter tuning for DE\n                w = np.clip(w * np.random.normal(1, 0.1), 0.1, 0.9)  # Adaptive parameter tuning for PSO\n                c1 = np.clip(c1 * np.random.normal(1, 0.1), 0.1, 2.0)  # Adaptive parameter tuning for PSO\n                c2 = np.clip(c2 * np.random.normal(1, 0.1), 0.1, 2.0)  # Adaptive parameter tuning for PSO\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "RefinedEnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization, with refined update mechanisms based on adaptive parameter tuning.", "configspace": "", "generation": 59, "fitness": 0.09144843562834938, "feedback": "The algorithm RefinedEnhancedFireworkAlgorithmWithPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e940264b-fe1d-419e-80f5-b47e3501fb69", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "08617bb5-632e-4509-82b3-bb9ace09aa8b", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f1928214-91e0-43d5-8a29-b849adba85b6", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3cd7a6ef-326e-4a01-88ea-b77810ff6e89", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "51536896-fbeb-4345-b231-7064d17b1181", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "83e61747-b3db-4b3c-a907-c0c409c74651", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "791dca5f-2abd-4bcd-9d66-0e7bc2c12ad6", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0098e9dd-b077-43fe-b2b7-6f26d70c00ba", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "76d50d97-b811-41cf-b104-d5d20d9e404e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f3b39216-fc46-4261-b4ee-dd96ad75d3b8", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d225d2f7-b884-45dc-93a7-818260f374a6", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fe67b927-67dd-4b8b-85cd-ebaf34362403", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8c0b5cee-0d48-4f4a-9518-54db2015b68e", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Combining Differential Evolution with a novel Local Search using Firework Algorithm and Particle Swarm Optimization for enhanced global and local exploration in optimization problems.", "configspace": "", "generation": 72, "fitness": 0.09144843562834938, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0194cfbb-51e9-4713-815a-006fb96ec886", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1508ccdb-c0ea-43a9-9489-497562dbbda9", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f5743ee3-66df-443b-b82e-03eae933f617", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "857f3cb5-4a06-456d-947e-b74a19d18a28", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1e206da5-0cb2-4a9c-a8a8-32be887ef01c", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3b8fdb7f-8b02-40fc-9223-be15d112c8f8", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "206414bd-a6f5-4d7f-bfe7-956673e74f9e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "33f683f1-2b09-4d74-b1b8-d9a24cee103a", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func, mutation_rate):\n            F = 0.5 + mutation_rate\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        mutation_rate = 0.0\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n                    \n                differential_evolution(fireworks, i, func, mutation_rate)\n\n            # Update mutation rate dynamically based on the best solution\n            if np.random.rand() < 0.35:\n                mutation_rate = min(0.5, mutation_rate + 0.1) if func(g_best) < func(p_best[i]) else max(0.0, mutation_rate - 0.1)\n                \n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "DynamicMutationEnhancedFireworkAlgorithmWithPSO", "description": "Improving EnhancedFireworkAlgorithmWithPSO by dynamically adjusting the mutation rate in differential evolution based on the performance of the solutions.", "configspace": "", "generation": 80, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicMutationEnhancedFireworkAlgorithmWithPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "32954177-5cb4-49e4-83ab-ab7131af618d", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "91f536a0-5641-477f-bed9-3816f536dd77", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3edfddc8-bd36-4099-a28d-37c4b94f518e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "adeb770a-9ba9-49f0-aa6d-a0aa1a3d10c8", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e5f6c85f-3d03-4dc1-9dba-7bab681e117d", "solution": "import numpy as np\n\nclass ImprovedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "ImprovedFireworkAlgorithm", "description": "Improving the Enhanced Firework Algorithm by incorporating a novel mutation strategy based on a combination of Simulated Annealing and Differential Evolution for enhanced exploration-exploitation trade-off.", "configspace": "", "generation": 85, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e524ddde-cb50-4c4d-8755-406a01b09d43", "solution": "import numpy as np\n\nclass ImprovedFireworkAlgorithmWithChaoticSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n                if np.random.rand() < 0.35:  # Applying chaotic search with 35% probability\n                    fireworks[i] = chaotic_search(fireworks[i])  # New function for chaotic search\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "ImprovedFireworkAlgorithmWithChaoticSearch", "description": "Improving Enhanced Firework Algorithm by adding a chaotic search mechanism to enhance diversity and convergence speed.", "configspace": "", "generation": 86, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedFireworkAlgorithmWithChaoticSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "be7f3c82-0ecf-4369-938e-3ce4aa6255c0", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6bff6aff-673e-4834-b630-465d33cdc3d4", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3dd2bb05-7f59-4602-9c7f-90901c7a9bf7", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "276f7596-e3ac-40bb-bc8b-017791a0fdc4", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7c77c957-33cc-458d-bb89-aafd37cbc5ef", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d28c7c96-1f2f-495e-a13b-211499c49773", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3385acc6-ed7a-4b87-aab7-12d29d5a913e", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7844bf7a-956a-431f-8fe4-46f0c05e0e22", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f0eb040d-d5f0-4cd0-af44-21a78c464be6", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9d9ca231-157c-4524-9c72-0067671526f2", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "281d01c1-4fff-4883-9656-e6e6056f1adf", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d1e267a0-a90e-453d-9e5b-f5ab477bb8dc", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "94aa7c42-157b-4e1b-8e0a-61dc1173d9aa", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmWithPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework):\n            return firework + np.random.uniform(-1, 1, self.dim)\n\n        def differential_evolution(fireworks, i, func):\n            F = 0.5\n            for j in range(len(fireworks)):\n                if j != i:\n                    r1, r2, r3 = np.random.choice(len(fireworks), 3, replace=False)\n                    mutant = fireworks[r1] + F * (fireworks[r2] - fireworks[r3])\n                    if func(mutant) < func(fireworks[j]):\n                        fireworks[j] = mutant\n\n        def update_velocity(position, velocity, p_best, g_best, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * velocity\n            cognitive = c1 * np.random.rand() * (p_best - position)\n            social = c2 * np.random.rand() * (g_best - position)\n            return inertia + cognitive + social\n\n        fireworks = [create_firework() for _ in range(self.budget)]\n        velocities = [np.zeros(self.dim) for _ in range(self.budget)]\n        p_best = [fw.copy() for fw in fireworks]\n        g_best = fireworks[np.argmin([func(fw) for fw in fireworks])]\n\n        for _ in range(self.budget):\n            for i in range(len(fireworks)):\n                velocities[i] = update_velocity(fireworks[i], velocities[i], p_best[i], g_best)\n                fireworks[i] += velocities[i]\n\n                if func(fireworks[i]) < func(p_best[i]):\n                    p_best[i] = fireworks[i]\n                if func(fireworks[i]) < func(g_best):\n                    g_best = fireworks[i]\n\n                differential_evolution(fireworks, i, func)\n\n        best_solution = fireworks[np.argmin([func(fw) for fw in fireworks])]\n        return best_solution", "name": "EnhancedFireworkAlgorithmWithPSO", "description": "Enhancing Firework Algorithm with Differential Evolution strategy for improved global exploration and exploitation, incorporating a novel local search mechanism based on Particle Swarm Optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "728ff630-1f1f-43cd-a06c-5f6bd474454e", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
