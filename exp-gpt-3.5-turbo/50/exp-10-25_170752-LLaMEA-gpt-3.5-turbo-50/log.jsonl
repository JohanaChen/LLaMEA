{"id": "15b8105d-8cf9-4f0e-90b4-fd0585549c5c", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies()\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "A novel algorithm inspired by the behavior of fireflies in nature, where fireflies are attracted to each other's light and tend to move towards brighter fireflies. The algorithm simulates the movement of fireflies in the search space to find the global optimum.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 27, in __call__\n  File \"<string>\", line 21, in move_fireflies\nNameError: name 'func' is not defined\n.", "error": "NameError(\"name 'func' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 27, in __call__\n  File \"<string>\", line 21, in move_fireflies\nNameError: name 'func' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 1, "fitness": 0.05306235316110738, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "15b8105d-8cf9-4f0e-90b4-fd0585549c5c", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "42991708-0320-4ea9-90cc-5a8751dc5f41", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "21137bd9-d16c-437e-8802-1d24d3b54042", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "1d327b8d-9e11-45f9-88a9-b9fb213d0ba4", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "e1eff249-0a7d-4d53-bae8-74545b87f443", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "cfd45887-6851-44b0-905a-0afe5fddaa49", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "0eaa1be3-6071-43e5-91bb-d3fd82fde587", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "f572feff-d123-468b-8377-575597880b56", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "748d350a-c6cd-49f1-877e-5e01a9f5a56e", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "850033ce-5c77-4254-8b5d-d24429950a98", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "bb363e49-9ff9-4b5e-9673-a56bdfded8f6", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "2f5f17dc-6890-44b0-9d3f-1cc6b29e6c6d", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "02b22d8b-a22c-4be0-a542-7ea49deda07f", "solution": "import numpy as np\n\nclass HybridEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mu = 10\n        self.lambda_ = 50\n        self.sigma_init = 0.1\n        self.sigma_min = 1e-6\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        self.sigmas = np.full(self.population_size, self.sigma_init)\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def adapt_sigma(self):\n        for i in range(self.population_size):\n            self.sigmas[i] = max(self.sigmas[i] * np.exp(0.1 * np.random.normal(0, 1)), self.sigma_min)\n\n    def PSO_update(self, func):\n        for i in range(self.population_size):\n            cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (self.best_solution - self.particles[i])\n            social_component = self.social_weight * np.random.rand(self.dim) * (self.best_solution - self.particles[i])\n            self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive_component + social_component\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n    \n    def ES_update(self, func):\n        offspring = np.random.normal(self.particles, self.sigmas)\n        fitness_offspring = np.array([func(offspring[i]) for i in range(self.population_size)])\n        best_offspring = offspring[np.argmin(fitness_offspring)]\n        if func(best_offspring) < func(self.best_solution):\n            self.best_solution = best_offspring\n        return offspring, fitness_offspring\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.adapt_sigma()\n            offspring, _ = self.ES_update(func)\n            self.PSO_update(func)\n        return self.best_solution", "name": "HybridEvolutionaryAlgorithm", "description": "Implement a Hybrid Evolutionary Algorithm (HEA) by combining Evolution Strategies (ES) with Particle Swarm Optimization (PSO) to enhance exploration and exploitation in the search space dynamically.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (50, 5) and arg 1 with shape (50,).').", "error": "ValueError('shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (50, 5) and arg 1 with shape (50,).')", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {}, "mutation_prompt": null}
{"id": "cbf43574-adb7-48ed-9efa-4d9ff596d30f", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "197db62d-b84a-4e8a-8e67-1a766ca487bf", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "04f88d36-ee9f-420b-9bcc-419b0386ddab", "solution": "class FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflyAlgorithm", "description": "Refine the Firefly Algorithm by fixing the undefined function reference 'func' and updating the move_fireflies method to correctly utilize the black box function evaluation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505758822583, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421585951655, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08824561941825226, 0.06578804206734568, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644764726649, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.01303167927029758, 9.999999999998899e-05, 0.012360913187757117, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.1774904791862597, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761074498613312, 0.1335954017392985, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.114961407558553, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696270611188, 0.11025978876019182, 0.16121437533999872, 0.14929382812117764, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.0581517608679184, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.031613625142602686, 0.03193837629280438, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.02054618711967704]}, "mutation_prompt": null}
{"id": "49635983-3197-4c4c-9548-95fbf2b82148", "solution": "class DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (50, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def move_fireflies(self, func):\n        for i in range(len(self.population)):\n            for j in range(len(self.population)):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def adapt_population(self, func):\n        diversity = np.std([func(ind) for ind in self.population])\n        if diversity < 0.1:\n            self.population = np.vstack([self.population, np.random.uniform(-5.0, 5.0, (10, self.dim))])\n        elif diversity > 0.5 and len(self.population) > 10:\n            self.population = self.population[:len(self.population)//2]\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.move_fireflies(func)\n            self.adapt_population(func)\n            for i in range(len(self.population)):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "DynamicFireflyAlgorithm", "description": "Enhance the Firefly Algorithm by incorporating a dynamic population size that adapts based on function landscape diversity.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicFireflyAlgorithm' object has no attribute 'attractiveness'\").", "error": "AttributeError(\"'DynamicFireflyAlgorithm' object has no attribute 'attractiveness'\")", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {}, "mutation_prompt": null}
{"id": "513f5e1b-d69f-49f1-89cb-d0e56522e0ca", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    self.population[i] += self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j]) + self.gamma * (beta * np.random.uniform(-5.0, 5.0, self.dim))\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhance the Firefly Algorithm by incorporating swarm intelligence-inspired dynamic parameter adaptation and elitism for improved convergence speed and solution quality.", "configspace": "", "generation": 18, "fitness": 0.05306235484545336, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "736573e7-d2b4-4bbc-8d90-910beb63cae9", "metadata": {"aucs": [0.11854043543592774, 0.08757712511550231, 0.1260289799376102, 0.09418337459659254, 0.11744084725923931, 0.11306505673696488, 0.1117126342590622, 0.11718278218267864, 0.08884133839634156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010325231885116026, 0.024052722969812756, 0.01013514860424547, 0.013028497354272583, 0.006574876800483853, 0.006663385568959401, 0.020349421586214, 0.007767699881288226, 0.010656728868577936, 0.010333734057374033, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.0027592764544520643, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.0882456194149851, 0.06578804206717015, 0.07606868934078903, 0.06916699456814623, 0.06602617336945682, 0.08563377029682795, 0.09012779244433133, 0.08444592074186552, 0.10108644763083774, 0.06251526257832885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666409978700718, 0.013031679303703969, 9.999999999998899e-05, 0.012360914229674225, 9.999999999998899e-05, 0.10022929771034561, 0.08730461554767976, 0.10028857914759626, 0.11048878777504811, 0.07262453783438017, 0.01452262683915595, 0.02627668515388637, 0.06409135790968212, 0.01427072527367268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012294507878739425, 0.0013098204482928644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022972076690102927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12850963629417056, 0.16157895843359948, 0.17749059488947427, 0.12881491459805616, 0.1338249646693579, 0.1108625369109173, 0.16100796556167574, 0.12761073951724644, 0.1335954279579058, 9.999999999998899e-05, 0.008161244577169047, 0.021898433835684017, 0.03255942698273917, 0.003665450412912885, 0.018844510070105902, 0.013467697298979009, 0.0026039173443649366, 0.026760334164489863, 0.08485521887536596, 0.10742756638197914, 0.11818935407046993, 0.09853410524321404, 0.10847910920321024, 0.11496140756039164, 0.10564763599384352, 0.09602038560254245, 0.07724552473199531, 0.12149696055896586, 0.11025978876019182, 0.16121437533999872, 0.14929387030084817, 0.11689276283926042, 0.15018451895428475, 0.132961350016649, 0.17365513980577507, 0.12251778076424291, 0.09396565589111217, 0.05606155877308372, 0.08380943742963298, 0.05815195765484893, 0.10495277925787783, 0.06337067971762667, 0.09740119829813632, 0.09965868720300353, 0.0706525328763562, 0.1193583788470376, 0.10636228547739379, 0.13340256161756192, 0.13197169020084143, 0.10494760797301605, 0.14773696922767343, 0.12245976138762271, 0.11172920400882524, 0.12617269501926598, 0.1043938933682741, 9.999999999998899e-05, 0.11870175307262976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033912713126241445, 9.999999999998899e-05, 9.999999999998899e-05, 0.07882837172890045, 0.07462539026258563, 0.08528742678777868, 0.1067057393598807, 0.12076337156869488, 0.10999911014340591, 0.13486608281097812, 0.10699786540472156, 0.08904083764757742, 0.11020389358520355, 0.10437016290689083, 0.0691204743995153, 0.08725076990243796, 0.0506560621357699, 0.05898174484923746, 0.0699496230028337, 0.1452156787869957, 0.07809625742644699, 0.1443527089390756, 0.14646931581258216, 0.14760610070681301, 0.15292248645270212, 0.13105492799597418, 0.14244612699174208, 0.1496033933630153, 0.14344316850847827, 0.1468604079402709, 0.027291817031894983, 0.03161362513229382, 0.03193837631211305, 0.02697035594747199, 0.034192493798230084, 0.023353151008898565, 0.02265538771889608, 0.037879399205073105, 0.020546177450726844]}, "mutation_prompt": null}
{"id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 19, "fitness": 0.05386204826115583, "feedback": "The algorithm EnhancedFireflyAlgorithmEEBM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "513f5e1b-d69f-49f1-89cb-d0e56522e0ca", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "dd9cfa41-b1b0-4970-ba07-257ff097f5d3", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "DynamicFireflyAlgorithmEEBM", "description": "Enhancing the Enhanced Firefly Algorithm by dynamically adapting exploration and exploitation rates to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": 0.05386204826115583, "feedback": "The algorithm DynamicFireflyAlgorithmEEBM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "93bde686-c51e-40a7-9fca-3afb2ec4659a", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "52ab7072-dca0-4542-a206-46891be3a825", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "06c0291b-58ea-445e-ba76-ae44ead0dc1d", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "2bf0a449-4dd2-43a7-8f3b-1f194f1eff6a", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "Enhance the Enhanced Firefly Algorithm by optimizing the exploration-exploitation balance through the adaptation of parameters and utilizing a dynamic movement strategy.", "configspace": "", "generation": 24, "fitness": 0.05386204826115583, "feedback": "The algorithm AdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "6b81a0a6-e568-4bfc-a6d6-4ecdf23763ef", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "ad329066-fc64-45bc-aefe-e9bc3a822b6b", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "cf3e57d6-71d5-400e-b740-c20a180d3cc9", "solution": "import numpy as np\n\nclass NovelMultiObjectiveEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.8\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solutions = []\n        self.best_fitnesses = [float('inf')] * self.population_size\n\n    def select_parents(self):\n        return np.random.choice(range(self.population_size), size=2, replace=False)\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.randint(0, 2, size=self.dim, dtype=bool)\n        child1, child2 = parent1.copy(), parent2.copy()\n        child1[mask], child2[mask] = parent2[mask], parent1[mask]\n        return child1, child2\n\n    def mutate(self, individual):\n        return individual + np.random.normal(0, 0.1, size=self.dim)\n\n    def nondominated_sort(self, population):\n        # Implement nondominated sorting algorithm\n        pass\n\n    def crowding_distance(self, front):\n        # Calculate crowding distance for individuals in the current front\n        pass\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            offspring = []\n            for _ in range(self.population_size):\n                parent1, parent2 = self.population[self.select_parents()]\n                child1, child2 = self.crossover(parent1, parent2)\n                child1 = self.mutate(child1) if np.random.random() < self.mutation_rate else child1\n                child2 = self.mutate(child2) if np.random.random() < self.mutation_rate else child2\n                offspring.extend([child1, child2])\n            combined_population = np.vstack((self.population, offspring))\n            fronts = self.nondominated_sort(combined_population)\n            new_population = []\n            for front in fronts:\n                if len(new_population) + len(front) > self.population_size:\n                    break\n                new_population.extend(front)\n            crowding_dist = self.crowding_distance(fronts[0])\n            new_population.sort(key=lambda x: crowding_dist[x])\n            self.population = np.array(new_population[:self.population_size])\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitnesses[i]:\n                    self.best_fitnesses[i] = fitness\n                    self.best_solutions[i] = np.copy(self.population[i])\n        return self.best_solutions[np.argmin(self.best_fitnesses)]", "name": "NovelMultiObjectiveEvolutionaryAlgorithm", "description": "Introducing a Novel Multi-Objective Evolutionary Algorithm (NOMEA) that combines the exploitation of Pareto dominance and crowding distance to efficiently optimize black box functions with multiple objectives.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'NoneType' object is not iterable\").", "error": "TypeError(\"'NoneType' object is not iterable\")", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {}, "mutation_prompt": null}
{"id": "3738ad26-ded1-47e6-9bc8-17faf5413242", "solution": "# import numpy as np\n\nclass DynamicFireflyAlgorithm(DynamicFireflyAlgorithm):\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n", "name": "DynamicFireflyAlgorithm", "description": "Enhance the Enhanced Firefly Algorithm with a Dynamic Parameter Adaptation mechanism to adjust alpha and gamma values throughout optimization for improved convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicFireflyAlgorithm' object has no attribute 'attractiveness'\").", "error": "AttributeError(\"'DynamicFireflyAlgorithm' object has no attribute 'attractiveness'\")", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {}, "mutation_prompt": null}
{"id": "f9e6c605-cf0a-4f9c-bb83-77b2968dc6fc", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithmAEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "AdaptiveFireflyAlgorithmAEA", "description": "Enhancing the Enhanced Firefly Algorithm with an Adaptive Exploration-Exploitation Mechanism for Efficient Global Optimization.", "configspace": "", "generation": 29, "fitness": 0.05386204826115583, "feedback": "The algorithm AdaptiveFireflyAlgorithmAEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "9639a43d-af93-4af3-9fc7-65bb972446d2", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "337a60ce-af26-44ce-b01b-2183618e0aa7", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmProbabilistic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.probability = 0.35\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < self.probability else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmProbabilistic", "description": "Enhance the Enhanced Firefly Algorithm by incorporating a Novel Probability-Based Strategy to Dynamically Adjust Exploration and Exploitation rates during optimization.", "configspace": "", "generation": 31, "fitness": 0.05386204826115583, "feedback": "The algorithm EnhancedFireflyAlgorithmProbabilistic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "fea21495-6a23-4064-8b17-61e68045c7d8", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "2eefcc5b-6366-449c-857e-9ef0de6dc2a4", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "6785b4f2-39da-4b9b-bc26-b4aa948d2b5e", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm(DynamicFireflyAlgorithm):\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "DynamicFireflyAlgorithm", "description": "Enhancing the Enhanced Firefly Algorithm with Dynamic Adaptation of Exploration and Exploitation for Efficient Search Space Utilization", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicFireflyAlgorithm' object has no attribute 'population_size'\").", "error": "AttributeError(\"'DynamicFireflyAlgorithm' object has no attribute 'population_size'\")", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {}, "mutation_prompt": null}
{"id": "e87794e6-5b5c-47ac-8e9f-0fb564dadbe1", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "47160e36-a4c5-45b5-9702-9451bda9c0a6", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "6b0fd390-f8b4-406d-bfee-7b7a51ee2d4f", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "9f4322f5-b434-4caa-b426-47fc6d7cd52f", "solution": "# <code>\nimport numpy as np\n\nclass DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "DynamicFireflyAlgorithm", "description": "Enhancing Firefly Algorithm with Dynamic Exploration-Exploitation Balancing for Efficient Global Optimization.", "configspace": "", "generation": 38, "fitness": 0.05386204826115583, "feedback": "The algorithm DynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "9274306f-a6c2-4e66-bf40-7f6d635fedc7", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "c3187702-d664-46ff-a2c2-d14ced857207", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "fc81b9d8-7999-4f89-96c7-33a58180de9d", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "d76ed25d-bea1-4ad5-b7ff-eae0ae593ffd", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "3a268a51-c82c-4c1c-8a80-2736f9a33a6c", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBMRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBMRefined", "description": "Enhancing Exploration and Exploitation Balance in Firefly Algorithm through Adaptive Parameters and Randomized Moves for Efficient Search Space Optimization", "configspace": "", "generation": 43, "fitness": 0.05386204826115583, "feedback": "The algorithm EnhancedFireflyAlgorithmEEBMRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "7a85f238-9b40-4cc0-866e-f78689981303", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBMImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBMImproved", "description": "Enhance the Enhanced Firefly Algorithm further by incorporating a dynamic adaptation mechanism for balancing exploration and exploitation to improve search efficiency.", "configspace": "", "generation": 44, "fitness": 0.05386204826115583, "feedback": "The algorithm EnhancedFireflyAlgorithmEEBMImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "6ee8ff25-9fdb-492f-ab49-8e378acc4051", "solution": "import numpy as np\n\nclass DynamicParameterFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "DynamicParameterFireflyAlgorithm", "description": "Enhancing the Enhanced Firefly Algorithm with Dynamic Parameter Adaptation for Efficient Exploration and Exploitation in Black Box Optimization.", "configspace": "", "generation": 45, "fitness": 0.05386204826115583, "feedback": "The algorithm DynamicParameterFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "32cc62b4-4f6d-40f8-9809-688f45602bfc", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithmEEBM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def attractiveness(self, x, y):\n        return np.exp(-np.sum((x - y) ** 2) / self.dim)\n\n    def move_fireflies(self, func):\n        for i in range(self.population_size):\n            for j in range(self.population_size):\n                if func(self.population[j]) < func(self.population[i]):\n                    beta = self.beta_min + (1 - self.beta_min) * np.random.random()\n                    exploration = np.random.uniform(-5.0, 5.0, self.dim)\n                    exploitation = self.alpha * (self.population[j] - self.population[i]) * self.attractiveness(self.population[i], self.population[j])\n                    self.population[i] += exploration if np.random.random() < 0.35 else exploitation + self.gamma * beta * exploration\n\n    def adapt_parameters(self, iter_count):\n        self.alpha = max(0.2, self.alpha * (1 - iter_count / self.budget))\n        self.gamma = min(1.0, self.gamma + iter_count / (2 * self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            self.move_fireflies(func)\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "EnhancedFireflyAlgorithmEEBM", "description": "Improve the Enhanced Firefly Algorithm by introducing a novel Exploration-Exploitation Balance Mechanism to enhance the algorithm's ability to efficiently explore and exploit the search space.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.11854043543592774, 0.09118179578450747, 0.10095974542655095, 0.09483050894281242, 0.10728425118098672, 0.11021510059226969, 0.09971866869894563, 0.09753537036266391, 0.08256172290727914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016843939577701916, 0.013714517786423852, 0.022845298778768508, 0.0072200824409582864, 0.006663385568959401, 0.020534815652923477, 0.007904363411257553, 0.010900269399478746, 0.007981414448005708, 9.999999999998899e-05, 9.999999999998899e-05, 0.019586060842702313, 0.004139212319575036, 9.999999999998899e-05, 0.014700061674861709, 9.999999999998899e-05, 9.999999999998899e-05, 0.08211061798144748, 0.08559826499087553, 0.09333488216603636, 0.5869258437839299, 0.06227500098485761, 0.10406673394797494, 0.10827692044255877, 0.12214213851995992, 0.11631631545869292, 0.06251526257832885, 0.013758230743804556, 9.999999999998899e-05, 0.030909203102639005, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.041082473788681795, 0.029383460141463313, 0.10022929771034561, 0.08202949304053875, 0.059689957636930524, 0.06661146184762345, 0.07262453783438017, 0.027305239881655452, 0.02627668515388637, 0.05920972515916978, 0.009905522309368697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01477470002471526, 9.999999999998899e-05, 0.008270171351509648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11255081730244598, 0.15739068122190203, 0.14837810020606357, 0.1235919317338956, 0.10268142938065061, 0.14290756815602712, 0.16100796556167574, 0.12413900124650445, 0.176053588823338, 9.999999999998899e-05, 0.021091016207399504, 0.021898433835684017, 0.03255942698273917, 0.0074454787633935204, 0.017591177527858215, 0.007475521704290666, 0.00770127804305798, 0.026994174198041954, 0.08485521887536596, 0.08603708386328379, 0.11820820725791203, 0.09853410524321404, 0.10847910920321024, 0.1077485658260825, 0.08800530785186034, 0.13173215283861595, 0.0963868129664468, 0.10695766644877003, 0.11192802374758759, 0.16121437533999872, 0.13794061771827382, 0.14703974211559034, 0.11607850158318322, 0.13847896962804207, 0.17368808714472705, 0.11885955471783105, 0.061712320142078725, 0.07000912157119077, 0.089093535949611, 0.07490427804199518, 0.07689793175240522, 0.08112956063637122, 0.08366897173808396, 0.09965868720300353, 0.06403031877382215, 0.1193583788470376, 0.1390406826527082, 0.13700426661159215, 0.11583478347801779, 0.10264024879678968, 0.1222093469880996, 0.12245976138762271, 0.09608446325114472, 0.12617269501926598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026047727252589525, 9.999999999998899e-05, 0.10954363736470296, 0.09368118586587937, 0.08164266835200962, 0.11195868674151876, 0.12076337156869488, 0.07965347989593341, 0.10725934821248939, 0.10501402820571404, 0.10015868477369316, 0.11020389358520355, 0.10760331793732425, 0.0691259206614403, 0.0506453535405732, 0.043086750803252416, 0.05898174484923746, 0.10249352858356087, 0.08096605217959874, 0.07539452577853822, 0.1422872795914032, 0.1378487542003577, 0.1476054893927523, 0.14076616874982306, 0.1381971642155444, 0.13950339879673956, 0.1496033933630153, 0.13863023881492242, 0.16962867507361357, 0.022739371613129555, 0.01851000332304298, 0.04719457769552049, 0.02697035594747199, 0.03419364213562914, 0.02491901431555743, 0.01726282809921309, 0.03804761788548827, 0.03083284058023561]}, "mutation_prompt": null}
{"id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 47, "fitness": 0.19536515838756402, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "4d50fb19-e1a6-4a55-9130-83e1a5bd4e08", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "e77d43cb-31fd-4fc7-a100-e662b246b7ee", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "b8bac616-ebf5-411f-94a9-7368bedfc87b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "25c100c3-2458-4e14-a8f9-3846d49c1e2b", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr_min = 0.2\n        self.cr_max = 0.9\n        self.f_min = 0.2\n        self.f_max = 0.8\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population, f_val):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + f_val * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant, cr_val):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < cr_val:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = self.cr_min + (self.cr_max - self.cr_min) * (iter_count / self.budget)\n        self.f_val = self.f_min + (self.f_max - self.f_min) * (iter_count / self.budget)\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population, self.f_val)\n                trial = self.crossover(self.population[i], mutant, self.cr)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "ImprovedAdaptiveDE", "description": "Improve the AdaptiveDE algorithm by incorporating a novel self-adaptive mechanism for mutation and crossover probabilities, enhancing the algorithm's exploration and exploitation capabilities.", "configspace": "", "generation": 50, "fitness": 0.1482966635093269, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.3875201132825419, 0.37362374898258954, 0.36018057654982794, 0.39073651664883, 0.3692193134443794, 0.3610877325408207, 0.38397009548141203, 0.3705180689785228, 0.35754276419827147, 0.09850246168602206, 0.0889247622743955, 0.06331412076496945, 0.0872762087389336, 0.0794858240156755, 0.09179013080818077, 0.09678364038896747, 0.0866800048567884, 0.08617073569664369, 0.10670237763859991, 0.1004599017278528, 0.09934779432721697, 0.11093752711548699, 0.08963848422831722, 0.09305960084888831, 0.09193278040283381, 0.09831160493994706, 0.10076273140173109, 0.08092853589576499, 0.08262236206417184, 0.10864230430987243, 0.10624453106614506, 0.08284863993943603, 0.0979045716283683, 0.07904726003999407, 0.08787509871775145, 0.09142959734888723, 0.7184300381559832, 0.7219991400364969, 0.731842439908823, 0.6797681235742824, 0.7485680332691529, 0.7571181512056286, 0.8965729560505863, 0.735941390949516, 0.7404756277305745, 0.10974847775263752, 0.08788853565378507, 0.09279185491077147, 0.07926944629889554, 0.07192708907898837, 0.08050511520810977, 0.09720451786063278, 0.0978560207899476, 0.07225417776192367, 0.13439106426459824, 0.1377772688367488, 0.14194618436417372, 0.19487188531808142, 0.18709105904856993, 0.16246245006144233, 0.12980855048852535, 0.16349050835319778, 0.23372916900252338, 0.04962091271776792, 0.0632680276619072, 0.10337438034115554, 0.08257864017582794, 0.0644397813416997, 0.04875897042841826, 0.061476349969737054, 0.08391143563400782, 0.09081977708059108, 0.0720348472086807, 0.07745373696822355, 0.07044763556664713, 0.07626897123663934, 0.07193416847653444, 0.07802260520459037, 0.06015327733358555, 0.049510242035156304, 0.08032878408436606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020658609043556875, 0.03440531005484049, 0.06679627370521246, 0.0017532061209604155, 0.026125622840510343, 0.06496874306003919, 0.07223469561537821, 0.028379472231451985, 0.03872850669953609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019224223757509207, 0.022559208640262285, 0.025780267822681724, 0.03145217807233003, 0.023415005057297322, 0.03095516759458883, 0.042117899885646515, 0.032060030964141895, 0.03134046851329808, 0.3047250091993593, 0.27651417447278537, 0.2896161452898016, 0.3239522503732547, 0.28663517293186824, 0.29563804765322366, 0.281410913227232, 0.2586901336541966, 0.30296543898209627, 0.07452447539720564, 0.06311555861069496, 0.0685526643288118, 0.073499088898061, 0.054018050891784464, 0.06454800516683712, 0.09057431979458874, 0.057687811071215234, 0.07166915303395438, 0.15064965276403164, 0.12627978496304493, 0.14122422893847286, 0.1499239827900246, 0.12226272913268843, 0.14758687361375467, 0.11639929374924307, 0.11925999951091071, 0.12368954185598546, 0.17930825557550156, 0.1833656340313723, 0.18764359090657556, 0.17880201607781188, 0.16930016225947275, 0.1851862625569619, 0.177618427616272, 0.19803305932308435, 0.19756543310255592, 0.10464681172889778, 0.1384514946014389, 0.11562048734791408, 0.11305168908702112, 0.11862386889492993, 0.13771128423525603, 0.10890711776890638, 0.1299966359942144, 0.1297329027348374, 0.15278875588463436, 0.17134016061233182, 0.19437297780143836, 0.17008981648167976, 0.17884277487061395, 0.19423931742064438, 0.16413762020941558, 0.18007613731502625, 0.1634541081775437, 0.1779093596553064, 0.18208875114569145, 0.16915984743851664, 0.16401657382002122, 0.15901019357224433, 0.15450189526687064, 0.16862803895768286, 0.15121300348381395, 0.17164344524868425, 0.15183997976833474, 0.15870471115769524, 0.18804255419159832, 0.20474198121790865, 0.1629835202121228, 0.16987219152038346, 0.13096836902386844, 0.1360494617910779, 0.22017622566428807, 0.1543370024545655, 0.18171877636298184, 0.12650030083030028, 0.1529168149470812, 0.15037811502247445, 0.15759115529651968, 0.10849665577528445, 0.23766021172259155, 0.16743393698891473, 0.16943296104268357, 0.1657906636051819, 0.15626080210323834, 0.163529182136817, 0.17373651172229365, 0.1735074273747288, 0.1740454351280527, 0.1661399243716789, 0.18450935013588665, 0.06087156101260405, 0.05669004052181048, 0.06915002077394294, 0.05767910431780787, 0.06740326979823352, 0.053265422392767325, 0.06771752185042368, 0.05842543093793173, 0.04991308128181593]}, "mutation_prompt": null}
{"id": "fb4c6778-a43f-445f-8852-3f897cf88a6c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "695aba7d-3466-41f7-a2cd-8aced195a584", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "a4609ea8-8545-45aa-a0b9-9cede43ddda7", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "6089d31a-06b2-4c4f-a14a-d4366a83bdd5", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "627456d8-b235-46e5-b6e3-13a95dbb74a5", "solution": "import numpy as np\n\nclass HybridADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def local_search(self, ind, func):\n        current_fitness = func(ind)\n        for _ in range(5):\n            perturbed = ind + np.random.uniform(-0.1, 0.1, self.dim)\n            perturbed_fitness = func(perturbed)\n            if perturbed_fitness < current_fitness:\n                ind = np.copy(perturbed)\n                current_fitness = perturbed_fitness\n        return ind\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                trial = self.local_search(trial, func)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "HybridADE", "description": "Introducing Hybrid Adaptive Differential Evolution (HADE) combining Differential Evolution with Local Search for enhanced exploration-exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.16105656066433152, "feedback": "The algorithm HybridADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.36957907450906957, 0.33976921951646877, 0.38827207946762266, 0.3051533580290271, 0.34387216599824055, 0.3539763569938552, 0.3758131413329977, 0.3379659607329283, 0.3617581276672659, 0.11515707315843049, 0.06875793856341184, 0.09251725884258244, 0.054422259138361184, 0.07764093957127494, 0.022618329974088525, 0.0007621767833888571, 0.03855211225220423, 0.08238654491076502, 0.09629145650543547, 0.09330316159951835, 0.10126136687714538, 0.1011969337556824, 0.09028112637956187, 0.08612834700139116, 0.07036924367287012, 0.09467284165981105, 0.0791088744277666, 0.07291732428659525, 0.0670074666007986, 0.080516707608971, 0.07390924568440693, 0.07497319916505696, 0.0648695547458914, 0.06721406770632854, 0.07620525581144377, 0.06005396174864819, 0.57338199813358, 0.618212639191416, 0.6167061650668477, 0.2905769956147396, 0.661144234114384, 0.5861435543235853, 0.1894574163492192, 0.6243853737893904, 0.6040623659166645, 0.14548564498417782, 0.19102818457335036, 0.1131401945590409, 0.14786943000860597, 0.12063842017237036, 0.1352234620850299, 0.105650659287433, 0.12394847375057694, 0.22834361109371726, 0.23782371755160858, 0.22205053313195888, 0.14217753617593532, 0.17816533479217778, 0.2185762567979782, 0.2767659181284037, 0.23523481693035908, 0.13906911108434872, 0.14049416329718611, 0.13658038384036697, 0.1740781953183299, 0.1413782689432379, 0.1192363925695985, 0.15195955837791808, 0.09112439718232868, 0.09326131968934592, 0.12584728231269604, 0.16745089321406625, 0.15367395212643387, 0.10331970417523573, 0.10108142257866126, 0.11270966733019616, 0.08829383261741697, 0.10897488891729068, 0.11689079396905488, 0.08777196914503038, 0.12184220345322794, 0.01796918584478424, 9.999999999998899e-05, 9.999999999998899e-05, 0.02066198483175763, 0.00027424876127202236, 9.999999999998899e-05, 0.042234939409640404, 0.0157517694043674, 0.005957402284176405, 0.1253279409490371, 0.1451532830368265, 0.09571114372938905, 0.13288165244739425, 0.05072675398601589, 0.08139041479184506, 0.13723245443263554, 0.1284478112041586, 0.0789150276238999, 0.005829708673635303, 9.999999999998899e-05, 0.001849748497325554, 0.0010035423295691182, 0.006373678013436246, 0.001574394290555059, 0.0011769249163368078, 9.999999999998899e-05, 9.999999999998899e-05, 0.10279902743469116, 0.07101087451884192, 0.03500446180688943, 0.04067862910827902, 0.08095183256609473, 0.09451484643121844, 0.08512584169902437, 0.07738837786332475, 0.04021955992648163, 0.32774341560275555, 0.34072451012048, 0.3532026799805862, 0.33556459438445674, 0.327053598561747, 0.3315725767106853, 0.3590516372569509, 0.1943551103326444, 0.36826633053007485, 0.07131934664911754, 0.06304060028446024, 0.08109201221781115, 0.08424556570953667, 0.05908755695864787, 0.07077849547983317, 0.05987340753956427, 0.08833104812162196, 0.07321469588586005, 0.14677596157701078, 0.11784008815099101, 0.1333508794359346, 0.14263535460920462, 0.12966228971794658, 0.1492135476114288, 0.1388237307328991, 0.11640533004754305, 0.15761937930809633, 0.18162029684357617, 0.23118971861078985, 0.22607703306343874, 0.22232639478675564, 0.23351647416726717, 0.19434893034214806, 0.22129353994379175, 0.2509652684405006, 0.2425151566825865, 0.16964270018422212, 0.14880182991153235, 0.14824120479077751, 0.18311074843244168, 0.1725521292058242, 0.16679649823879394, 0.13200982022050378, 0.18727435234386203, 0.17190938685152324, 0.18552707632539078, 0.1903440660213821, 0.19880369028180178, 0.19459304361446328, 0.2051359458086096, 0.19285622028914018, 0.1990205581810247, 0.2024938985744037, 0.18678709807193805, 0.19295546824621868, 0.16539841115451714, 0.16887516602769792, 0.17407031079871926, 0.1829523722184464, 0.17345818317000194, 0.19809174329331747, 0.14493881753079618, 0.20504120699397033, 0.16078044809430425, 0.15968351043094553, 0.17348801498205413, 0.5172450769113515, 0.15924613307227387, 0.35739188705787417, 0.14219302989568716, 0.1462226260598536, 0.4022034780418049, 0.21996479052267381, 0.1750303963185903, 0.2564893338508496, 0.1469871656941214, 0.2529938142589152, 0.1452394061350547, 0.13641736891442435, 0.14768555354951585, 0.1722272199341165, 0.16773720980112938, 0.17255667468741143, 0.18642924176323217, 0.18850970373858567, 0.17795835916585678, 0.17679366624220494, 0.1742715833713968, 0.1875874152185727, 0.18303257070467305, 0.0705492583746925, 0.07062808269176457, 0.07860329189379589, 0.07780642716695363, 0.07895444512144567, 0.07009605557823884, 0.0821984890740719, 0.07677183329084547, 0.06464198854953751]}, "mutation_prompt": null}
{"id": "8b3be296-b4cd-4b48-bd36-1976bf2b2719", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "1315f843-409f-4a2d-94df-b7dca75520a4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "1e5f6fed-9475-4235-b796-e3c52e35aee0", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "1ab576c7-0b11-49d3-8894-474c901bdaa4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "1871cfe7-d37d-448b-bb1f-b35684da820f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "1e1c24ee-21aa-44a1-ab0c-04b5829c9f1a", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "ea263c84-f6e6-4bd8-9bad-8e2296f833a9", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "95675bfc-fdac-46a5-8415-8b22314d8bc3", "solution": "import numpy as np\n\nclass SelfAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr_min = 0.1\n        self.f_min = 0.2\n        self.cr_range = [0.1, 0.9]  # Range for self-adaptive crossover rate\n        self.f_range = [0.1, 0.9]   # Range for self-adaptive mutation factor\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.cr = np.random.uniform(self.cr_range[0], self.cr_range[1])\n        self.f = np.random.uniform(self.f_range[0], self.f_range[1])\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def self_adapt_parameters(self):\n        self.cr = np.clip(self.cr + np.random.normal(0, 0.1), self.cr_range[0], self.cr_range[1])\n        self.f = np.clip(self.f + np.random.normal(0, 0.1), self.f_range[0], self.f_range[1])\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.self_adapt_parameters()\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "SelfAdaptiveDE", "description": "Improve the AdaptiveDE algorithm by incorporating a novel self-adaptive mechanism for both crossover and mutation rates, enhancing the exploration-exploitation balance during optimization.", "configspace": "", "generation": 63, "fitness": 0.15226036033442777, "feedback": "The algorithm SelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.3835278380179449, 0.41098747348923215, 0.2979987952880774, 0.3731236500216212, 0.3665755058016471, 0.29092116973029813, 0.3816149035153431, 0.39645668510622534, 0.2963783364319653, 0.06839706702972248, 0.12104137872713272, 0.025047134263035287, 0.05880717469388563, 0.1009662100210097, 0.03401226240003363, 0.09060794241056325, 0.11285146995715545, 0.04034883255022037, 0.10913358356295122, 0.11049331250271843, 0.09854070941371595, 0.08327073325129697, 0.09862993155430178, 0.08034598359088085, 0.09822624327066021, 0.11496881501489664, 0.0823188021282123, 0.0716921237830378, 0.08490379096647194, 0.07458453559964218, 0.08952061550064316, 0.09671385327336535, 0.08565465226932811, 0.07936344023416875, 0.0905236749711339, 0.09178081717345699, 0.9043504910800266, 0.8248878701924733, 0.901698801429589, 0.9108534414903589, 0.8286222751207514, 0.9016883472314109, 0.8916255015117225, 0.855996873106961, 0.8888259629020755, 0.11471706955370153, 0.10494713027845592, 0.062237783688203985, 0.1019100921454954, 0.07644818383977359, 0.07019527630949451, 0.07476719248306873, 0.08948222088437652, 0.048241313930919016, 0.18171353223221287, 0.16535652670416634, 0.13928811858303902, 0.19425845032005884, 0.16044960787997897, 0.1371901146616814, 0.1558480010667579, 0.1777683611908717, 0.15550513008523736, 0.08791731974219985, 0.08247219064626554, 0.04365077372120563, 0.08524972952186305, 0.08851208037078051, 0.12117256975766177, 0.07352326026022382, 0.11099106928709501, 0.07874115947374882, 0.07485979096187023, 0.08149257393933662, 0.04182185336549138, 0.07551713777317126, 0.08781446241407898, 0.06129194242233593, 0.07115319296420186, 0.07635755239492104, 0.061727607825066144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04497823378284316, 0.0335413355811961, 0.026728608466905834, 0.055795176468901087, 0.02613633865941667, 0.011339524287010905, 0.049108047123358256, 0.026103375464538447, 0.024034546264816492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03616279248427401, 0.02836761442440061, 0.018555999510384225, 0.03679052682477524, 0.04047437748008853, 0.009869994670040239, 0.027360298379504044, 0.02834916543315613, 0.030045025648002266, 0.29544303205659395, 0.31789777029718025, 0.25580173134822404, 0.29368799513031363, 0.3340181571197641, 0.24796381135262147, 0.32438059289136, 0.31273569041682625, 0.26852102453101045, 0.06221264404223492, 0.07288547823963998, 0.057060842240569176, 0.06491395977606806, 0.06401757619557613, 0.054063087771501483, 0.06586163940464451, 0.06300818874111991, 0.0615647531598148, 0.13367079743706378, 0.10931044890310004, 0.1544530067796841, 0.12784632315636668, 0.12200303181392069, 0.1142465091365521, 0.1218095366096078, 0.12080769351712206, 0.11395358223477892, 0.2104931253272534, 0.18423497845008674, 0.19314824916958673, 0.1886427027510046, 0.1842794864182531, 0.166824619551585, 0.1980955097759014, 0.2193314235525624, 0.17586941048935367, 0.14131923032192517, 0.12384468775851054, 0.12117562305429075, 0.14518277749276398, 0.11881357873968101, 0.12885178301314515, 0.15739076779967942, 0.1625994867652658, 0.11550066418837801, 0.16742185433787649, 0.17553273885250942, 0.1565126164620657, 0.174414431625997, 0.16579835741023485, 0.19106674622781594, 0.18116936612849233, 0.17763226807423893, 0.17053142702741864, 0.16181909888223578, 0.15442299785299096, 0.1623825199531046, 0.16620747540160408, 0.15626937939126895, 0.1569349023511415, 0.16493232984112127, 0.17003578137034692, 0.16001320010429643, 0.1495730797580722, 0.17863364282873861, 0.2112162951320825, 0.20264044051667207, 0.1707484374197975, 0.1653320519937692, 0.12493104299548397, 0.22617334311737758, 0.147734850367231, 0.16825610926444357, 0.17317532137895453, 0.17459162598430134, 0.20491793629907074, 0.1494853346715992, 0.12715556059205468, 0.13003252029088141, 0.13788881382161855, 0.12248833626672295, 0.1658608526386035, 0.16177901417079643, 0.17499406788386207, 0.15702605991136587, 0.17472595290013504, 0.17430235270840677, 0.18744691127331603, 0.17254597171070396, 0.17395246763730776, 0.0674678366591619, 0.054419316611697965, 0.05813919501224829, 0.060704969698743616, 0.06234593155131862, 0.0632676283351653, 0.05528444475182148, 0.05350095830760382, 0.053654292344030186]}, "mutation_prompt": null}
{"id": "be704e40-092b-4889-aa11-28cb85a17f00", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "7da44296-396e-4cb2-a1a9-9b23232f744c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "798900a0-e891-4390-9bba-262941e96f53", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "0ae4a1a5-25fd-4c1c-b505-4a7ed6b8c30d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "5d2f2bba-c869-4115-8c36-ac5f723cfca7", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "bf3bdc02-dceb-466f-8a19-5df6acd2e961", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "deca0df2-f7f7-4178-a560-38f644b3ae6a", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhancing Differential Evolution with adaptive strategies and parameter tuning for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 70, "fitness": 0.19536515838756402, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "546941b3-6e9a-4592-aeac-30201e86d89f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "a822bfa3-ad3f-49f7-8865-d02ea864616b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "865c4e6a-5ab8-4c3b-a970-f8128925b7be", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "beb3db4d-d70a-424c-a8d8-1b4fab406f1e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "a4ef7946-10a9-477c-bccc-9d9aaafe99b4", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population, iter_count):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        f_dynamic = max(0.1, self.f_min * (1 - iter_count / self.budget))\n        mutant = population[selected[0]] + f_dynamic * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant, iter_count):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            cr_dynamic = max(0.1, self.cr * (1 - iter_count / self.budget))\n            if np.random.random() < cr_dynamic:\n                trial[i] = mutant[i]\n        return trial\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population, iter_count)\n                trial = self.crossover(self.population[i], mutant, iter_count)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "ImprovedAdaptiveDE", "description": "Improve the AdaptiveDE algorithm by enhancing the mutation and crossover operations using a novel adaptive strategy to balance exploration and exploitation while dynamically adjusting the control parameters.", "configspace": "", "generation": 75, "fitness": 0.1909224205078486, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.2801430553896411, 0.27688692146176863, 0.33189634475122987, 0.5430865713510313, 0.6341387020771363, 0.4837291147841264, 0.5040030114663528, 0.47637912679155237, 0.2898983517310747, 0.12687995950319897, 9.999999999998899e-05, 0.023406259208515467, 0.13241063008089493, 0.10805226161441694, 0.1752967863162398, 0.115638151555707, 0.40023648716690563, 0.12453205254246913, 0.10189593143178532, 0.1215114283867832, 0.11052973953737943, 0.12043936175181591, 0.11402749518009914, 0.10356744270987528, 0.1229598107571237, 0.12266516933051519, 0.127559695321947, 0.10460075376045275, 0.10491362971333618, 0.11022975125880707, 0.09181887583855386, 0.06910092838400161, 0.09157547057123228, 0.08676090390630398, 0.10448127518898076, 0.09979245911328471, 0.1857339317333876, 0.7537573015728362, 0.848334809008821, 0.7549422993657626, 0.7640158506867121, 0.14447499503910477, 0.1951294490743376, 0.7997642141624899, 0.852444381076221, 0.12531433665538005, 0.19209462039011305, 0.03473792911402618, 0.04708389667570623, 0.12497610141665394, 0.08225449669097362, 0.1354408188640558, 0.09993411428305643, 0.1501674710609977, 0.23522176095124192, 0.19964802978951535, 0.17450751039381052, 0.6295468095797241, 0.5574803693535498, 0.2450665824601721, 0.140142345071815, 0.15843121208899813, 0.3293073377403677, 0.2141779900900107, 0.18462515152734504, 0.1452808555097026, 0.1486655297569176, 0.14415182544690686, 0.1748507957964761, 0.11836276791598388, 0.1925960939330824, 0.12351950155321534, 0.08473799942381688, 0.11434650352570497, 0.09445514032394442, 0.13140347928284768, 0.1303897948565329, 0.15233341061346295, 0.1167843840116759, 0.10382713771712859, 0.1131591562563099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027794708765322307, 0.06481901356011754, 0.09430581287125728, 0.029083742760490527, 0.000660389549243523, 0.16423402610781956, 0.06344490863140495, 0.14845378164003997, 0.11969907146187309, 0.08693889943583921, 0.07001412700327692, 0.22412619082273166, 0.13167371514876558, 0.09175703618743136, 0.14062956373399904, 0.03564028599571134, 0.021219598408210194, 0.04706067609707498, 0.038969381429459826, 0.058723338141137504, 0.15808342392471697, 9.999999999998899e-05, 9.999999999998899e-05, 0.08359472963271786, 0.08334654660582963, 0.053471639635105706, 0.1079711303905686, 0.21115970762880343, 0.11862290139484744, 0.11249487248662504, 0.0660520207451234, 0.04781427806509586, 0.3938463481660667, 0.35638941837887883, 0.43867965751291527, 0.3916863961169724, 0.3530510184063048, 0.4263323063727845, 0.3364443505962539, 0.3004231691632413, 0.4882630184249739, 0.09171223048967425, 0.10772669211907338, 0.09770958346360803, 0.10853660654464425, 0.09670373928895826, 0.10252275427185209, 0.0831806757955077, 0.09841030580851473, 0.08992212695556467, 0.14639686653150552, 0.14577476263185962, 0.1254983008111159, 0.14509988297557408, 0.14185978601078109, 0.14133401122742284, 0.1353509750086841, 0.11362086495535584, 0.1493973526606116, 0.28738206962108026, 0.3139733042318634, 0.3195990067537656, 0.2817436915703697, 0.32384987257672115, 0.2638400375249914, 0.2332488152512735, 0.35650446757362897, 0.3042507841424311, 0.24670330814572727, 0.17711962546520865, 0.24440605855864073, 0.20335287290588322, 0.19699727009158174, 0.2868217444212643, 0.2156465671922323, 0.26139738747358243, 0.20471615992294379, 0.2090944733283171, 0.19001987622756045, 0.18118367718196515, 0.17928612139059263, 0.20032427595683144, 0.19400447231851126, 0.18581801852482727, 0.20894886441682137, 0.21352054977750412, 0.18426581696051303, 0.3363263553760738, 0.17611588530637712, 0.20839697594885254, 0.1986383746474356, 0.1939204738981406, 0.17626799175631436, 0.17480502183835456, 0.18903874504194795, 0.1639915401132046, 0.17888072550242762, 0.1752142210045855, 0.18914348411418413, 0.18876795807361024, 0.45888727571717414, 0.15494874737041642, 0.15570252100724302, 0.3374348273931731, 0.44452664739636494, 0.25748237699768617, 0.1902444614618568, 0.19006769345698482, 0.2083117223197003, 0.20906632511571877, 0.17442333539466304, 0.14365045633239282, 0.18787796919787225, 0.1721395800053218, 0.15918923247867856, 0.18490745204785042, 0.17233654721996905, 0.17175702738056575, 0.16096779545455142, 0.18463475624677772, 0.16764374416356476, 0.1655399630127462, 0.07350807044250995, 0.08100586992022962, 0.07862801872238212, 0.07078086154895502, 0.06887402749015692, 0.06874575117746373, 0.08879551663591412, 0.07991075885178234, 0.06862943488172657]}, "mutation_prompt": null}
{"id": "dfa70843-74fc-43d3-b9b1-ae65f584c254", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "938286a1-8111-4ca2-a77b-05a22318fd8f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "8f8a0a2f-bce3-49d6-95ab-d174d67d35b6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "95c74669-5798-4439-a3e1-c6caa68622c3", "solution": "import numpy as np\n\nclass HybridDEFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.fireflies = 20\n        self.population_size = 30\n        self.alpha = 0.9\n        self.beta_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def move_firefly(self, firefly, target):\n        attraction = np.linalg.norm(firefly - target) ** 2\n        step = self.beta_min * np.exp(-self.alpha * attraction) * (firefly - target)\n        return firefly + step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.fireflies):\n                for j in range(self.population_size):\n                    self.population[j] = self.move_firefly(self.population[j], self.population[np.random.randint(self.population_size)])\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.best_solution) or self.best_solution is None:\n                        self.best_solution = np.copy(self.population[j])\n        return self.best_solution", "name": "HybridDEFA", "description": "Utilizing a Hybrid Differential Evolution with Firefly Algorithm to enhance global exploration capabilities and converge quickly towards optimal solutions.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None')", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {}, "mutation_prompt": null}
{"id": "9b439683-8313-431c-a0eb-713f877ccc87", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "2c547158-3b7b-462d-91a0-b7ecefeed521", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "77f4b372-55ec-433b-b2b1-6a038d9b2140", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "174c4329-6ee5-4fac-94fc-cb7fcaf110b6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "bc85cd10-ade8-4985-865a-f06280641212", "solution": "import numpy as np\n\nclass DynamicMutDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population, fitnesses):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        f_dyn = np.clip(0.5 + 0.5 * (1 - fitnesses[target_idx] / max(fitnesses)), 0.2, 0.8)\n        mutant = population[selected[0]] + f_dyn * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population, [func(ind) for ind in self.population])\n                trial = self.population[i] + np.random.uniform(-0.1, 0.1, self.dim) * (mutant - self.population[i])\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "DynamicMutDE", "description": "Improve AdaptiveDE by introducing a dynamic mutation strategy based on individual performance to enhance exploration and exploitation balance for improved optimization.", "configspace": "", "generation": 84, "fitness": 0.04808671424790843, "feedback": "The algorithm DynamicMutDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.12668775767292229, 0.08351865986563678, 0.09801336634543645, 0.0952289520419266, 0.10775117361074882, 0.11323614020529726, 0.10384921629775723, 0.07523796319956744, 0.07393815484727528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012222197267148127, 0.014728700907457482, 0.010686566876161652, 0.015721073079233094, 0.018155672494994723, 0.020848785405812698, 0.021927784325111, 0.03660853199851477, 0.012429406176445057, 0.001880809582437526, 9.999999999998899e-05, 9.999999999998899e-05, 0.02180035804546332, 0.0015324833114968017, 0.0013407275631068805, 0.014953341900518669, 0.001400358519890288, 9.999999999998899e-05, 0.047147614244700375, 0.050925640960225116, 0.05106167129172556, 0.053340261193588256, 0.04687545855643349, 0.03858228446926637, 0.0638860334912611, 0.049195688151963624, 0.039843252084569625, 0.0627516341595965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010213192842586039, 0.007443723203840458, 9.999999999998899e-05, 0.014001232629865856, 9.999999999998899e-05, 0.11067119855647656, 0.08224659834595494, 0.059824388882108726, 0.07052799970150536, 0.08030758661246307, 0.0010839574771369653, 0.07159738875675392, 0.0744302565712156, 0.0186170162896806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01832918539413564, 0.0006733216910803641, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01880946104906489, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11244363847093575, 0.16030378265659817, 0.16248946020698207, 0.1038475212030684, 0.11846738532107737, 0.09610263791635465, 0.16839278765405574, 0.10315052518598711, 0.1380123181610985, 0.005364360544286462, 9.999999999998899e-05, 0.02198412468535549, 0.033030640384490884, 0.0036775899661506406, 0.01944549456499245, 0.0014159409588201388, 0.002143899066379684, 0.02797258021070359, 0.08609085436067121, 0.10098790027581983, 0.11842175776965747, 0.11018516203847106, 0.10852972522114013, 0.10798713552628325, 0.09169060139620067, 0.08099219012337167, 0.08680733123545159, 0.10724168117228783, 0.11770298675609248, 0.1613932299901244, 0.13800672315110074, 0.1168991282040499, 0.11340399774005838, 0.12081301227895835, 0.17377774300845283, 0.1288649546265046, 0.05985564337097804, 0.05230101360293171, 0.08398582550377798, 0.07189002701046643, 0.06406947898089654, 0.06342850570876157, 0.08601617123854488, 0.0997711199450243, 0.07207229633509582, 0.1358756559596388, 0.10944763265716662, 0.13617313488737148, 0.11165642087347205, 0.10157008888892793, 0.11071251548182148, 0.12245976138762271, 0.08962546827256379, 0.1288558108546406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07489123911986229, 0.07466602457976645, 0.0993905189194012, 0.09045203681441893, 0.12429286918908988, 0.08219489737508134, 0.1080764704646856, 0.10972376825815666, 0.08386372185571744, 0.1366933679147655, 0.1181228486413094, 0.071274653587731, 0.07126358699999202, 0.03921523733306165, 0.06000714128507734, 0.05888395434748983, 0.04953851822039157, 0.07199830186213407, 0.136085368854985, 0.13966972519026188, 0.14763022729669195, 0.13329628659092674, 0.14332531337388865, 0.15152269310206445, 0.15519026444651896, 0.14463054942957065, 0.18690735003775671, 0.01664281751923702, 0.017081286640617366, 0.031393493129599714, 0.027514958442460213, 0.03425093938292756, 0.020045516730027746, 0.024085288610534605, 0.03870940487391894, 0.032508035988806805]}, "mutation_prompt": null}
{"id": "7ec0018f-97bc-4f5e-b332-f8f937e10cea", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "bde0efd2-064e-4a59-ab21-546d3b25faf1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "5c52e6f7-59a0-4d66-aede-4cb16aed4869", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "03ff5716-fade-4a26-9b49-d2baa357f095", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "9ce67c93-0cf2-4f28-afc5-537aa1925ac4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "3e312180-9b86-4d77-a4c5-67000842230b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "5259bcd1-c911-45d5-8ab2-40722f5b477d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "b11864a1-3c73-4699-80df-f23b37b0f717", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "925a6fb6-4796-456e-9793-b060eaec9be2", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "0c19b14d-6d13-4a55-846e-600d9ce6101b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "19c17954-3ef5-4178-936e-9fb57b0f30a3", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "2cb8f96f-daf0-483f-b75b-87f6e93ebeac", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "9a5b0a46-9e48-461e-b0a2-1c427b03a7cb", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "AdaptiveDE", "description": "Enhance the Differential Evolution algorithm through a novel adaptive selection strategy to balance exploration and exploitation, with parameter adaptation mechanisms.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.45268309444196675, 0.383908782616747, 0.3756491176161919, 0.5598898321384266, 0.5883511347288666, 0.602262930002556, 0.5054677089377175, 0.3526626155682876, 0.3053054227908697, 0.16943760091090665, 0.002157006081181856, 0.018885149028485815, 0.07247965674064183, 0.05079114831566911, 0.296966706075409, 0.18634421546687652, 0.3629948697185017, 0.1705467783301594, 0.09733328745831482, 0.10982821033679013, 0.11545868932065806, 0.1182114552591198, 0.10244140533001078, 0.1256845669006974, 0.1251607738168481, 0.1119036859136755, 0.12735270176856628, 0.11407925024812848, 0.10833457684343362, 0.11481145579048768, 0.11836701332251431, 0.0745216505579549, 0.10102192110484176, 0.10814251762057736, 0.0975075579440079, 0.11466146920307752, 0.19758377303467856, 0.7642925179546639, 0.8493298168307658, 0.8038391218500374, 0.6888004040500786, 0.14180715352000184, 0.19064427707765785, 0.8044158974807123, 0.8524499181665055, 0.12215836130879054, 0.2150971839796424, 0.04081384039662095, 0.04942515732954578, 0.1366247144484054, 0.09870375839962686, 0.12149925278201013, 0.09130859275657277, 0.13899431215320057, 0.5613473543273269, 0.22491217874664404, 0.17265013471772273, 0.6589990856142773, 0.25130464119138496, 0.23646067089730483, 0.14630388843722852, 0.16332437678493517, 0.3347313715129683, 0.17494599246356446, 0.19517127712280025, 0.14438594376236846, 0.12951010742522795, 0.12553296884139964, 0.17059619591182962, 0.13630829478108553, 0.20537846645653113, 0.12363640929408615, 0.0995771874973288, 0.10229605737490433, 0.1042396324684629, 0.15713568060347693, 0.1613325899013084, 0.14857185896897318, 0.11440973955155498, 0.12591245124954598, 0.0979904328016491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733256366035277, 0.05612210866168976, 0.11550281481030578, 0.002089398100872719, 9.999999999998899e-05, 0.13477567061295936, 0.06836508070413239, 0.1570841232350424, 0.11342737997164076, 0.098055117946664, 0.11665398810332261, 0.21792501622354166, 0.09530815732924025, 0.08748553684545257, 0.1037514993919354, 0.04167906184118564, 0.06158695236209821, 0.041151752375813144, 0.003939399288238721, 0.06541184989232685, 0.0659198982594571, 9.999999999998899e-05, 9.999999999998899e-05, 0.1228350987412683, 0.103598644328604, 0.06211118401186955, 0.15239355303040625, 0.13602793980331296, 0.11486811921027329, 0.1065783701356271, 0.07790034304185045, 0.045745982951904796, 0.3869671595320626, 0.47421060399996473, 0.4580054953654056, 0.4958891920193631, 0.3850421389136447, 0.4560275156057323, 0.41281727448260896, 0.29432776070732825, 0.4951590997313958, 0.08224494202843236, 0.1085282163773853, 0.0705236825557225, 0.09149978993787322, 0.1068340119300194, 0.09746038020656089, 0.08752755424143832, 0.10436769515982036, 0.1130341426360848, 0.13763481527748722, 0.13082129449659874, 0.16977903818373996, 0.141589770467744, 0.14218078422770464, 0.13572937037207133, 0.12256721278797089, 0.11456235385113, 0.16088857729764272, 0.3243636120575202, 0.29574911459413145, 0.3060282651527888, 0.2599348601825654, 0.2809173119141859, 0.26400174199987325, 0.24322208217406838, 0.3519011700847162, 0.37578772808013194, 0.2827539647863462, 0.17139192081761012, 0.26551654065196917, 0.2084306647543479, 0.18105243845143548, 0.28113331998485847, 0.21373189991450814, 0.25430187801842197, 0.2212278191513899, 0.1902294043222431, 0.17980100785869724, 0.2084987522919458, 0.18958526617997362, 0.19616022772438024, 0.19970701783592482, 0.1942169643205749, 0.1986428108975571, 0.18011994269605858, 0.191302681301185, 0.32604206123048074, 0.18350338627333906, 0.20062569639057848, 0.19460762264771703, 0.19881210019787765, 0.17771671360625474, 0.18226465861073038, 0.18722321839566647, 0.1710832118730774, 0.17875813258751583, 0.174997085199588, 0.18921825805657178, 0.18923947243068107, 0.5441080406388943, 0.1582539905606034, 0.15748365240246043, 0.28243996276974814, 0.46628222596365676, 0.265460850473312, 0.1924321685873429, 0.18765915039109204, 0.1575410878678778, 0.216559829087139, 0.10174259799036045, 0.1452528635174718, 0.18910959774544234, 0.17711931447153106, 0.16135720981392898, 0.1870072189187716, 0.18484780694109737, 0.16956017426611447, 0.16499642470895137, 0.18749438485321634, 0.16658356656211148, 0.16858489708211033, 0.08269323260833827, 0.07841538834219774, 0.0716580603495307, 0.0999791904252958, 0.07362882773700208, 0.07754642205368656, 0.10115044647938853, 0.07632848216245658, 0.07548894979862797]}, "mutation_prompt": null}
{"id": "037a94e4-f0a9-4a9c-818c-32f82a176aa6", "solution": "import numpy as np\n\nclass ProbabilisticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + self.f_min * (population[selected[1]] - population[selected[2]])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n        if np.random.random() < 0.35:\n            self.cr = np.random.uniform(0.2, 0.9)\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "ProbabilisticDE", "description": "Improve the Differential Evolution algorithm by incorporating a probabilistic approach to dynamically adjust the control parameters for better exploration-exploitation trade-off.", "configspace": "", "generation": 98, "fitness": 0.19766379222553873, "feedback": "The algorithm ProbabilisticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "a7bb4374-1fdc-4e6e-acf9-26699b5726b4", "metadata": {"aucs": [0.5723321968557935, 0.5816082713323529, 0.5760344720333901, 0.546713133806753, 0.5897246345706795, 0.571628217483662, 0.5452789311457102, 0.5336225828372607, 0.5658866671729051, 0.23494797337596685, 9.999999999998899e-05, 0.22287758130923307, 0.27093767554983605, 0.2903446592596267, 0.233432607883022, 0.28027491844055274, 0.19223914577279155, 0.259324387274636, 0.11823593592414894, 0.10225210593848988, 0.12025019413937099, 0.14417630283554805, 0.12278355578439637, 0.12158806743628192, 0.1214886111024569, 0.15431942585803904, 0.13451572483082563, 0.10040027612891012, 0.08078899239750936, 0.11314457792472044, 0.10241570198890626, 0.10436620858377887, 0.11817757119256511, 0.1078098018056658, 0.08472672849676632, 0.09879936419182633, 0.8379623120486532, 0.8398142204273317, 0.8157609251474689, 0.8296198245960609, 0.8608510589117194, 0.8348535892871987, 0.8357256993282176, 0.7688085839557125, 0.8625422868341721, 0.1822647777262374, 0.20902195321886285, 0.0778736965584208, 0.10233019600309712, 0.09970789514128231, 0.20163828220492452, 0.17650170294955647, 0.10009393517806908, 0.15867273001165594, 0.2416275442362229, 0.25697722102984266, 0.1841436736596478, 0.21410865380449873, 0.34433427063346844, 0.22340883367972109, 0.18721579071525352, 0.21786670816127318, 0.421752237021644, 0.12922411820029234, 0.08735293814051126, 0.11319003744056788, 0.12967905259700996, 0.11056000078863559, 0.13801891382668674, 0.14990579471140753, 0.1352725747896718, 0.12615222756941058, 0.14569178513358894, 0.1210709374195923, 0.08761712573872904, 0.10723881989440232, 0.11587748684512478, 0.11835806272580263, 0.10934074144250339, 0.11003309469862921, 0.06057550625899333, 9.999999999998899e-05, 0.0008158092171870468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007288528533098693, 9.999999999998899e-05, 9.999999999998899e-05, 0.10678800874577832, 0.05572204363216915, 0.06383715370412668, 0.046990287494591554, 0.08709884834380077, 0.029302847634480322, 0.1261369500270363, 0.07639254665224182, 0.0644707751643322, 0.011437178567388573, 9.999999999998899e-05, 0.007558366515035275, 9.999999999998899e-05, 0.015197380566255192, 0.013248474646214703, 0.06766612128391569, 0.012407067841166297, 9.999999999998899e-05, 0.07449230522461203, 0.10901165535820623, 0.07898249282511693, 0.09669253392429544, 0.07924419250196202, 0.06841687791011719, 0.06759361498322869, 0.1010272509629756, 0.0768114766594381, 0.388757642060632, 0.4292989859888877, 0.41208351605062454, 0.4217706185485034, 0.23116785541113571, 0.387789948517823, 0.4059868442992042, 0.3632551752504325, 0.38548168644869496, 0.07190669057770538, 0.0884242951013764, 0.0821255709743014, 0.10112113081584262, 0.08652677880858062, 0.08819205811158404, 0.07839836955623236, 0.08868721109736066, 0.0966820320606272, 0.1552739818954777, 0.12501267727027443, 0.14865472036690686, 0.16277874891815713, 0.13512070940116627, 0.13455792851649417, 0.13816458614791305, 0.10777496566799383, 0.13836093092395418, 0.2682393652063043, 0.26592580827311263, 0.2723936457912216, 0.24467620429503578, 0.22045297766825933, 0.2586775537367295, 0.2789585937179252, 0.263446823604625, 0.25896231469150577, 0.15551837308084104, 0.22018388649038045, 0.1852271016316832, 0.1757726396028838, 0.17039275306568946, 0.18889516433063058, 0.15966469684243334, 0.24454937382211983, 0.16787230265572217, 0.20167108388646515, 0.1779514761696781, 0.17988167048702886, 0.18651201540427031, 0.16682887854666384, 0.1852443874567904, 0.19233710956760963, 0.18430033021433345, 0.1808772277795092, 0.21154863619940156, 0.1922002701623785, 0.1878695578453331, 0.18210556705206504, 0.19833419838551336, 0.20684483991053126, 0.18472981635228924, 0.21024839219015112, 0.18761601238154602, 0.2616989382316113, 0.17821584057548367, 0.1599072177169808, 0.3468053938214123, 0.1900882775933238, 0.2096263319888545, 0.14294324842291517, 0.16416262343047416, 0.16261430183284442, 0.30011851496727115, 0.19865709080124494, 0.2982151183953694, 0.2085032810847519, 0.17451311194571573, 0.16760441598737363, 0.13200526435737447, 0.14257485616696708, 0.3163207136871985, 0.17330999763578625, 0.18195210327759093, 0.1697009330790472, 0.1728904752359367, 0.16905332643736892, 0.17521158416458238, 0.17104446594957412, 0.18584432102746418, 0.17914067974111314, 0.07007661742627225, 0.07299011305870351, 0.07626042828354251, 0.07212865455386996, 0.08021281344632913, 0.06813816012529583, 0.07110184312905043, 0.0687750616343934, 0.06889048194180836]}, "mutation_prompt": null}
{"id": "94f14077-7ae7-459a-a1d7-da5715f578e6", "solution": "import numpy as np\n\nclass GaussianDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cr = 0.9\n        self.f_min = 0.2\n        self.sigma = 0.1\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def mutate(self, target_idx, population):\n        candidates = [idx for idx in range(self.population_size) if idx != target_idx]\n        selected = np.random.choice(candidates, 3, replace=False)\n        mutant = population[selected[0]] + (population[selected[1]] - population[selected[2]]) * self.f_min + np.random.normal(0, self.sigma, self.dim)\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.random() < self.cr:\n                trial[i] = mutant[i]\n        return trial\n\n    def adapt_parameters(self, iter_count):\n        self.cr = max(0.2, self.cr * (1 - iter_count / self.budget))\n        if np.random.random() < 0.35:\n            self.cr = np.random.uniform(0.2, 0.9)\n            self.sigma = max(0.01, self.sigma * 0.9)\n\n    def __call__(self, func):\n        for iter_count in range(self.budget):\n            self.adapt_parameters(iter_count)\n            for i in range(self.population_size):\n                mutant = self.mutate(i, self.population)\n                trial = self.crossover(self.population[i], mutant)\n                if func(trial) < func(self.population[i]):\n                    self.population[i] = trial\n            fitnesses = np.array([func(ind) for ind in self.population])\n            best_idx = np.argmin(fitnesses)\n            if fitnesses[best_idx] < self.best_fitness:\n                self.best_fitness = fitnesses[best_idx]\n                self.best_solution = np.copy(self.population[best_idx])\n        return self.best_solution", "name": "GaussianDE", "description": "Enhance the Probabilistic Differential Evolution algorithm by incorporating a Gaussian perturbation in the mutation step to introduce additional diversity and improve exploration.", "configspace": "", "generation": 99, "fitness": 0.18627752908847325, "feedback": "The algorithm GaussianDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "037a94e4-f0a9-4a9c-818c-32f82a176aa6", "metadata": {"aucs": [0.45759767664698725, 0.48180035437398494, 0.45665257955571603, 0.44567730859865307, 0.43255607218678904, 0.4567894895574709, 0.4619643736197042, 0.4656664034814333, 0.41543010761719457, 0.1283369561458345, 0.10430452048758343, 0.08761854266347013, 0.11279088154016259, 0.10127627872406286, 0.12202198640582718, 0.10548964970171093, 0.12561195653249302, 0.10769430885708808, 0.11940045765929064, 0.12175181584728978, 0.10634028793927597, 0.12487551486524551, 0.11124910152239831, 0.10547738147444252, 0.11922553025434757, 0.12995808185806013, 0.11449278207063229, 0.10334981822065181, 0.09887049860215413, 0.10341715363506176, 0.1290595229790018, 0.10575328783054849, 0.10085167131881556, 0.10906312406030261, 0.10524993299654328, 0.10366606270363321, 0.8289522720391828, 0.8611109430665478, 0.8185707861134864, 0.8459799464733165, 0.8159660991155627, 0.8175491858387334, 0.8639939198559532, 0.8358818030524019, 0.8005039943428622, 0.14842203043735613, 0.10107906846855663, 0.09319449950055092, 0.09357704917891974, 0.140093091699252, 0.1177684799585339, 0.14770707741637523, 0.09831026438441381, 0.18617947538545077, 0.17623462694749648, 0.3420519205382748, 0.20877514923396, 0.3215766463284765, 0.37061929347102296, 0.19963080178285286, 0.13971570894535001, 0.23767120175652212, 0.20089840274163584, 0.10019512072527048, 0.1520257202075307, 0.122341118037538, 0.14527713116509855, 0.11563259585077046, 0.10338230867769793, 0.12716245279154115, 0.09922331994581313, 0.14273485661807916, 0.1049039437483239, 0.10037709022251606, 0.10691248366259587, 0.10333110902017362, 0.11514362939350087, 0.12562653657530587, 0.11077007282627804, 0.12215642433907836, 0.13509165327691386, 0.017895520256070774, 0.0036640156979610428, 0.023096043297121116, 0.0022868165939311513, 0.00507232669145341, 9.999999999998899e-05, 0.008950608065182442, 9.999999999998899e-05, 0.028309822196896706, 0.0516001051929974, 0.06471886322195619, 0.09395776623581953, 0.035015147237462796, 0.06969123734503113, 0.12058379761629989, 0.0690346162492369, 0.10514677908993231, 0.06554019360880214, 0.017440930722174564, 0.00027859304182542566, 0.022463921191234637, 0.014660826555863649, 9.999999999998899e-05, 0.011537662864269604, 0.004638994795216456, 0.002604330476484895, 0.001468328504481753, 0.08002550247170581, 0.09343316790088207, 0.10046235955075122, 0.08955144487488398, 0.07724320137342999, 0.08315086573647901, 0.07357282016654643, 0.07491071545281414, 0.07116158640995085, 0.4198791936390952, 0.37833202295904433, 0.38544137979224247, 0.36987212876812203, 0.3703237778367281, 0.38357801631592636, 0.39442292796252043, 0.41629634089110046, 0.39810121702488355, 0.09344245204479795, 0.07364568001550342, 0.07080127409035908, 0.08340510414853108, 0.07615262007609636, 0.08010978764363608, 0.0918531359918674, 0.07207746615429955, 0.0831650060495358, 0.12949715275972085, 0.12261323025598736, 0.1323591471041642, 0.10638435135157964, 0.12874584806456346, 0.12546434574356702, 0.1500617087125804, 0.12479846482039081, 0.12085898869821654, 0.2586886980443066, 0.2587488934990171, 0.26520658359523575, 0.2648113679003138, 0.2650584139633212, 0.2313625874824794, 0.26440287751526703, 0.2850167136631695, 0.24010859373485938, 0.16587862068495873, 0.20453419084622426, 0.16967396675484359, 0.17770333050950937, 0.17322362745442466, 0.19992656536967002, 0.20430317328266645, 0.226336769018482, 0.18652462446016516, 0.19410766973568605, 0.17658435254095473, 0.17085088152442762, 0.20614995404114167, 0.1735755709714507, 0.19835899879405916, 0.17624342214426103, 0.1677526541396248, 0.19129210697545385, 0.18710176244281262, 0.1815677294239728, 0.19969693443127767, 0.2072510449422461, 0.2097807908557202, 0.17624933531134446, 0.1854370089983347, 0.19936126858211578, 0.1743526677612297, 0.31488278252888924, 0.17751406110245238, 0.15929078715051326, 0.24965277509071826, 0.1569315865196993, 0.4929529852599397, 0.14170055996018616, 0.15231380347262324, 0.17849285291539851, 0.20437391186175813, 0.19074502120646608, 0.114231823998445, 0.1612635768874825, 0.18660637694394766, 0.14794327736617874, 0.17290602172510883, 0.2578121373657004, 0.17699041976967889, 0.18049262640353259, 0.16965788031530937, 0.19156006967813688, 0.17099363961864034, 0.16808745316023888, 0.17848242906537526, 0.17243843883186838, 0.16777217694089908, 0.1706170435609975, 0.06935840346522493, 0.07049957107244265, 0.07278934649769819, 0.06497984160459347, 0.0598886979000004, 0.08062629666607313, 0.061620369922483986, 0.06985803704333826, 0.07161099155201578]}, "mutation_prompt": null}
