{"id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 0, "fitness": 0.2910447787264424, "feedback": "The algorithm DE_PSO_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "70387ae2-e63c-41bf-b3ab-9046919601fd", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "791a6a18-41a7-4b11-a724-9670d46f5067", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "9fe3ca12-a326-42e2-b653-53fd7bcacaca", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "5d7ec2a8-59c5-4269-b354-129068be4e71", "solution": "import numpy as np\n\nclass GA_SA_Hybrid_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.mutation_rate = 0.2\n        self.sa_steps = 10\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        \n        def crossover(parent1, parent2):\n            crossover_point = np.random.randint(1, self.dim)\n            child = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n            return child\n\n        def mutate(individual):\n            mutated_genes = np.random.uniform(self.lb, self.ub, self.dim)\n            mask = np.random.choice([0, 1], size=self.dim, p=[1 - self.mutation_rate, self.mutation_rate])\n            individual = individual * (1 - mask) + mutated_genes * mask\n            return individual\n\n        def SA_optimization(x):\n            current_state = x.copy()\n            current_energy = evaluate(current_state)\n            best_state = current_state.copy()\n            best_energy = current_energy\n\n            for _ in range(self.sa_steps):\n                candidate_state = mutate(current_state)\n                candidate_energy = evaluate(candidate_state)\n\n                if candidate_energy < current_energy:\n                    current_state = candidate_state\n                    current_energy = candidate_energy\n\n                    if candidate_energy < best_energy:\n                        best_state = candidate_state\n                        best_energy = candidate_energy\n                else:\n                    acceptance_probability = np.exp(-(candidate_energy - current_energy))\n                    if np.random.uniform() < acceptance_probability:\n                        current_state = candidate_state\n                        current_energy = candidate_energy\n\n            return best_state\n\n        population = create_population()\n        best_solution = population[0]\n\n        for _ in range(self.max_iter):\n            offspring = []\n\n            for _ in range(self.pop_size):\n                parent1, parent2 = np.random.choice(population, 2, replace=False)\n                child = crossover(parent1, parent2)\n                mutated_child = mutate(child)\n                offspring.append(mutated_child)\n\n            population = np.array(offspring)\n            population = np.array([SA_optimization(individual) for individual in population])\n\n            best_idx = np.argmin([evaluate(individual) for individual in population])\n            best_solution = population[best_idx]\n\n        return best_solution", "name": "GA_SA_Hybrid_Metaheuristic", "description": "A novel hybrid algorithm combining Genetic Algorithm (GA) and Simulated Annealing (SA) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {}, "mutation_prompt": null}
{"id": "47ed1b2f-5b69-469a-8adc-94c0d7533d12", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "5353a435-9da0-4d48-b097-a67596cf387e", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "205bd947-3d5e-4008-bc28-49805359e898", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "a94b9547-a16b-49ee-af70-30de20dbd32e", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "8a485cdc-328b-4a39-baf0-159f93fef568", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "2eab8c44-3917-401d-b8ec-76b851e44501", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "a10931f8-73ad-4ec8-aac6-21dfb455f700", "solution": "import numpy as np\n\nclass DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F = 0.5\n        self.CR = 0.9\n        self.w = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + self.F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = self.w * v + self.c1 * r1 * (p_best - x) + self.c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            for j in range(self.pop_size):\n                trial = DE(population, j)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution)\n\n        return best_solution", "name": "DE_PSO_Metaheuristic", "description": "The algorithm utilizes a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9013528423511183, 0.87692947406364, 0.8822624291484118, 0.895372968666843, 0.18242559348068577, 0.8653057177208798, 0.17536635285211455, 0.8930966797774008, 0.8884635060410939, 0.784779343513099, 0.04236158852832994, 0.7550451745439376, 0.7727663287205765, 0.04795898365688078, 0.7515270422335553, 0.018756215143655552, 0.789802437833058, 0.057402190319690405, 0.18343089804501456, 0.16616264791491608, 0.1795597723499619, 0.5756432259826633, 0.17402691497723322, 0.40039737344238857, 0.15728780892902816, 0.167949709749885, 0.13737487420494776, 0.16364605480143457, 0.1483198547871316, 0.11250135314794407, 0.13540772548453428, 0.1342455924575765, 0.11611235131056108, 0.15562785404128532, 0.14577850774248324, 0.14407019716084923, 0.9861732924091428, 0.9887940795859679, 0.986138534257229, 0.9825044427866855, 0.984276793044552, 0.9849247070399741, 0.9882635680910041, 0.9835650612901695, 0.9860863973405216, 0.6285233670777864, 0.463850880308734, 0.491922204822242, 0.6698340786687873, 0.1520104556744042, 0.639151768482107, 0.6033771761197899, 0.5602091501309328, 0.5096776640912388, 0.6450432021729082, 0.16601416358383325, 0.34217196163765407, 0.19486495037327056, 0.17829755054896923, 0.11643746254290732, 0.24268993559600427, 0.2945939891541721, 0.2517370128661054, 0.19826418897485598, 0.20857414673525765, 0.22143332347876787, 0.12977817331552377, 0.12869809140411959, 0.1887895607529102, 0.18448515109560248, 0.2685286795154177, 0.18887665307826274, 0.23094196431142588, 0.13319776192152788, 0.20696232558934968, 0.20599797456947677, 0.11359040739505544, 0.09500577593624326, 0.13931912540837343, 9.999999999998899e-05, 0.03440255364652278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003990913579183797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1040671879054682, 0.05309627030046593, 0.08448991483575852, 0.05179107391652815, 0.06013672646975332, 0.054002926388870054, 0.02218043563736738, 0.05706556494743431, 0.030998084403233817, 9.999999999998899e-05, 0.03630664117506144, 0.07055324774487703, 0.10622612414950416, 0.10490950716741576, 0.07752176784003384, 0.09765101778906815, 0.09859410627045295, 0.0750682056674652, 0.08446501808549578, 9.999999999998899e-05, 0.3096893222841346, 0.1804419184468088, 0.151050203023948, 0.2109792660916261, 0.08311922162146168, 0.049341316303406324, 0.1791441727326335, 0.5286187622858163, 0.530280107045469, 0.5158822418916271, 0.5320808551645596, 0.5641592421102072, 0.6205834665710985, 0.5829425753582108, 0.5309768108829638, 0.5673067894423027, 0.10790082526353195, 0.06355461829703601, 0.05609960890550647, 0.10598326926601054, 0.10935001093712093, 0.12056611511729132, 0.07849898444312386, 0.10331157490184573, 0.07969367452881337, 0.2676763715158915, 0.24206148803761884, 0.10548774400856453, 0.18765310443867544, 0.23140683353121583, 0.15849667797980127, 0.27517725189113706, 0.2211561795870387, 0.18586209206944337, 0.3525548534659596, 0.25985212679088554, 0.2837610079382824, 0.43464526957003735, 0.403681904077156, 0.48623250919097893, 0.209102889737948, 0.5248528394399872, 0.5176309433203237, 0.2999040633111878, 0.2920920261945438, 0.24102251911683692, 0.25030899447601107, 0.21242291423655402, 0.1958839596926112, 0.2975096452994077, 0.27941340655873137, 0.2834301293448852, 0.18427995415744425, 0.18660754495495202, 0.230448924538868, 0.21581637634264228, 0.17179715196421208, 0.23437766128915438, 0.220094885064409, 0.22345857926644308, 0.20701901537479073, 0.24426101833462532, 0.2096191268213755, 0.22624870173438194, 0.22041585040986955, 0.24344969467384558, 0.23791585881095711, 0.2026095706457529, 0.2235786525734389, 0.6261944508530122, 0.8901213117554362, 0.14833626567354607, 0.15171231312408506, 0.1952976985333228, 0.20004429406974555, 0.16666408510881137, 0.8478228488238015, 0.892824216716841, 0.13774006307582676, 0.46748183660017917, 0.1566218783300417, 0.10989939625813328, 0.20957787683475426, 0.4356133019677665, 0.5364882861355575, 0.6969843591828997, 0.6801078720793259, 0.10323526381632941, 0.2104557031572737, 0.19508960896218708, 0.2167910628737112, 0.20146277979190608, 0.21088852093142196, 0.2414559405867449, 0.2175466964142332, 0.19426885307449426, 0.22309415378219222, 0.07847189333729565, 0.08448287229203122, 0.09063017136248452, 0.08614378968829972, 0.07541992588284574, 0.12610638483399816, 0.08690248541293222, 0.0869037878199388, 0.09683648706995096]}, "mutation_prompt": null}
{"id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 12, "fitness": 0.3106022501931593, "feedback": "The algorithm Adaptive_DE_PSO_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "f879319e-9f77-4d49-a4fb-6b099f7771a5", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "70d767a1-c011-4592-a7ea-792a71c17de1", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "5e7d03df-d7d7-455c-a0c7-05dda30a5ec8", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "e9db563c-5f98-4fad-88b4-0d7bb63bb5df", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "591806be-55f9-4f27-9fbe-8919c897ba19", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "0ba3237a-6c8d-4bbd-8f0a-e1696356e11d", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "e499d3fc-9b1f-4341-9e57-6158b6572ee1", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "d7125d00-06fa-4751-9cd2-ba47ae0819e0", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "12b28245-ea3c-4a88-8496-90809a8d37ab", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "d26ce779-3497-45ea-8b46-635e33f36520", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "a76f61d1-0f9d-4c53-92fc-feb6e732da65", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "59a19f23-7320-4f85-a289-3d6e15596595", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "505132e6-ee05-44bb-91c4-468ec4740c6c", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "86e306f5-3a46-41c4-a7bb-7a0d1bb33eb2", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "b53faf02-ade7-46cb-83a3-9242e6e1bf9a", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "d642ca7b-15f6-40d5-9228-0d422de59066", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "8442f18a-1158-446b-a3e0-a75a99437f92", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "33a8e99b-c6ad-45d4-9738-cee65d71a272", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "cf18b123-486b-4650-a07c-96324c41a1c8", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "9ef9e81d-60f6-4e2d-be87-0a787e9c0dbe", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "a7c33a9d-cd16-42d9-b797-19d68e866c13", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "9c53f279-b720-4e59-9a60-7955e7222116", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "bd73f7f7-b92a-4944-994c-8ef46dd837d8", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "4778bd04-35ce-4e2c-af4d-a5eb2b263433", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "cd127e9b-e9bd-481b-8f24-6331a08de8e9", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "40ca0fae-7a3f-4b01-b333-9c10ce6fd917", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "d2876cb7-1825-4674-a199-27135c30ce2f", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "80121e5f-87e1-497e-995c-ab64c71dd780", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "5ce29888-2305-4959-a003-75c9f37c1bf9", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "3f876643-0f0a-4d51-a8c3-a4cc21adb1cb", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "f7107986-5e1d-47c1-a38f-9f28e6ac53e9", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "15bd05d8-2a92-47b4-a77d-6d8f231f8584", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "024ea6a4-9cea-42cb-a96c-cc3330d12b6d", "solution": "import numpy as np\n\nclass Refined_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.pop_size = 50\n\n    def __call__(self, func):\n        super_call = super().__call__(func)\n        return super_call", "name": "Refined_Adaptive_DE_PSO_Metaheuristic", "description": "An optimization algorithm that combines Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget, with a 50% probability to refine specific lines of the selected solution.", "configspace": "", "generation": 44, "fitness": 0.2499063789608309, "feedback": "The algorithm Refined_Adaptive_DE_PSO_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.4169582193624848, 0.802491607146208, 0.8224134734604037, 0.18832469058211276, 0.8066540723049712, 0.8351061102802586, 0.4254151007857031, 0.7786061540009891, 0.822723159344234, 0.05118480661552416, 0.5880857004188833, 9.999999999998899e-05, 9.999999999998899e-05, 0.6263693345514227, 0.044682354388764556, 9.999999999998899e-05, 0.6062151889826102, 0.5982380500552268, 0.09483617186785653, 0.17859997180907372, 0.06600236184365782, 0.06652144509721658, 0.15355143308923658, 0.13766757328093027, 0.10913384212505639, 0.15908921424485722, 0.16382274094496319, 0.0801402181801264, 0.11712067200202547, 0.14685821789911058, 0.08317224752444363, 0.13068264329509716, 0.16234560440986245, 0.09547850422732063, 0.13629494663995378, 0.1461463695281544, 0.9787446994092543, 0.9802552917134668, 0.9809573312635101, 0.9809950408088106, 0.9774471887267993, 0.9795731823010237, 0.9813329561967286, 0.9816320804292913, 0.976248611853892, 0.20987781737846578, 0.5001684270961797, 0.47672611637311746, 0.1413363963553642, 0.4144535425422492, 0.595885632526016, 0.11785643542371216, 0.47235436306973244, 0.5413830388850398, 0.25066030856694377, 0.22133706196702074, 0.7510322176295069, 0.1916682849415563, 0.2741133413376108, 0.20125428654175115, 0.18232504724263043, 0.614771665131788, 0.4473999139181315, 0.12432766526658556, 0.2267821240331287, 0.12727006094038407, 0.10926225301472836, 0.12888710215842225, 0.20229842236778417, 0.13248271943420353, 0.18487690869976203, 0.20545274794678847, 0.10932554948392903, 0.12311857132522697, 0.18676727426104867, 0.12382738295325713, 0.121976418277711, 0.10208995989526504, 0.11054576647198466, 0.21150427826463414, 0.10694927588562386, 9.999999999998899e-05, 0.030306735364649673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014469971037313178, 0.0028704634400790185, 0.0316090879779396, 0.03936552698538964, 0.068985288398141, 0.0717171499172764, 0.05762408768862848, 0.02474354232845266, 0.027945824053745905, 0.060625706461667095, 0.0366048558833032, 0.05896771244333798, 0.01304080598853019, 0.1664340152637357, 0.271187026684649, 9.999999999998899e-05, 0.07989638731151594, 0.08883421043242468, 0.014525383860542807, 0.07584481306351731, 0.06671497268860238, 0.03720695992985512, 0.01108857991454848, 0.13432989068029422, 0.07717842558532717, 0.03679656687218924, 0.0063370762983328, 0.04606289106327999, 0.08045353419916823, 0.08019413568221356, 0.35860743372655857, 0.49239488592146463, 0.5236035849196481, 0.35086092004683245, 0.5173349413549293, 0.5825832503643003, 0.42739365522580397, 0.5436999237285324, 0.5282989886508624, 0.08580910086188942, 0.10202328458844245, 0.08007340025435605, 0.10818784203052523, 0.10941434171641062, 0.07721205815427024, 0.07451435251156124, 0.1219012594566442, 0.14444639451711572, 0.17312938110336895, 0.17953322688673012, 0.17048156901141553, 0.2819839597576843, 0.4603294191961109, 0.19057675544347152, 0.19636629045775822, 0.22948744962765966, 0.2044045284656032, 0.26269105724836295, 0.37329616583736625, 0.39940947227482604, 0.24793689329211688, 0.49304126772168366, 0.28707677601733617, 0.24609527995781522, 0.4657437822180519, 0.5330272599596582, 0.18933252304733994, 0.36138427198668754, 0.2921256085963976, 0.1632554858869678, 0.19956549054268946, 0.22698592031173237, 0.1895084265734137, 0.2571908193572713, 0.19906402668429524, 0.18046758403540497, 0.1860239488433334, 0.19414568685781397, 0.16860323572672875, 0.21266556702329076, 0.2165307480751607, 0.2017306715046655, 0.21011535714349971, 0.2228531690337775, 0.18017769110237347, 0.2474445108954897, 0.21156268616073792, 0.18924756914939966, 0.2020582386205152, 0.24385670987964092, 0.18780096215023567, 0.20923280531472233, 0.23648259910744562, 0.2089003250964544, 0.261621994718921, 0.1532562815617119, 0.5593750818214952, 0.19767917192748186, 0.7271296663140956, 0.22320803881672913, 0.1615945208375239, 0.20882415433847923, 0.337322238925575, 0.21068778719150105, 0.18382460151432756, 0.19974936983408653, 0.2726062630297058, 0.15120941437631663, 0.1985392284424552, 0.16588073475322385, 0.1258246932999204, 0.19136472628184242, 0.20561794129732047, 0.1896002322854019, 0.17889277818128502, 0.207953057567131, 0.2107328323781006, 0.18281659475126788, 0.21425495716779708, 0.17795129036639024, 0.06463264519388434, 0.09249109700166191, 0.08321960720722366, 0.06272455664753906, 0.10302781512102699, 0.09164245404351545, 0.07789355954896238, 0.08576615280336697, 0.09625093668010687]}, "mutation_prompt": null}
{"id": "f8d05493-9150-4af7-b7ff-567354fded9c", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "1f89930e-6042-470e-8053-028fb0a646fc", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "f2fd3098-781b-4613-94c1-da350aa36465", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "6ec89e6a-5373-4504-8cf7-e6bbcb861a01", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "b031ff22-c28f-4fd9-9ae1-d992657092d7", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "16334374-6427-4c10-b56f-36ab4b1c3741", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "eb21a1ba-99bd-4869-840b-ad5dc80e620f", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "51afb117-5285-4ddd-8c96-12a7c597f3c3", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "66f5c2ec-031f-44d8-a9c6-eb51491941c2", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "768457ad-b2f0-4e67-a57a-dc9909d1dbf8", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "ba552de7-0d00-4c3a-a113-87c653b812ff", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "94bf13e2-5b47-45ca-a50b-1125e0db4f9f", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "3208bfb9-6f75-4a45-b7e4-dbf2e225651e", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "5bdfd1ed-ce57-4763-8f61-2e9ddac25f1b", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "a85b7ea1-a185-43a3-932a-0e8149d57fb6", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "4ec1f2ca-16df-4ddf-bf07-3bffdb3a4c25", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "17b51b0f-6bb3-4918-bced-227654a18881", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "71f76374-3ccf-4807-9721-875b81dc44e7", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A metaheuristic algorithm that combines Differential Evolution and Particle Swarm Optimization strategies with adaptively controlled parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 62, "fitness": 0.3106022501931593, "feedback": "The algorithm Adaptive_DE_PSO_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "1b0805c9-2f32-4a57-aae1-f0c61dbc3495", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "162f2eb7-89c9-4c40-818f-2deccf8b3fab", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "8077f826-4a13-4fe2-bdbc-a4dff8b90734", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "0b2c7938-272d-4297-a17c-78805a8a8224", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "59a5559a-5387-462d-8690-3c022823dc75", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "2e14c61e-a776-46e8-810e-c49dfdf93051", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "02a4ff68-9234-4bd1-a043-a4612da8434d", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "309c9f94-8890-4223-94f7-7e472c1836c6", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "c280691d-f2b8-4dee-8d06-341d6926e162", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "9c052f2c-fa76-4394-bd15-c2cc43cbd428", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "aac0f86d-3539-440e-865b-9c016cde43c4", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "6c0097b9-4eff-4844-8220-a6297c373e2b", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "631a1255-781f-47e0-a1c1-6be7ced4dca8", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "96193004-8017-4e18-b9cd-e59344981476", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "7d33b2f2-a6d0-4548-9f73-ce6942ccdde7", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "8318e48a-b505-436c-b8b9-0c2fc7dd9911", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "b469fdd5-db7a-4326-8f36-d61be537fff9", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "ee6110f8-9cdb-49ac-bb4a-76afa005942d", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "3410e79a-7e05-41f0-bbda-4a93d42d803e", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "afd5bcc3-116b-46ca-88ea-c02d7835badf", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "13687f20-15a3-43cd-a3b9-fd3603f26fe6", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR_min = 0.7\n        self.CR_max = 1.0\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.c1_min = 1.5\n        self.c1_max = 2.0\n        self.c2_min = 1.5\n        self.c2_max = 2.0\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n\n        def evaluate(x):\n            return func(clip(x))\n\n        def create_population():\n            return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n\n        def DE(x, target_idx, F, CR):\n            a, b, c = np.random.choice(np.delete(np.arange(self.pop_size), target_idx), 3, replace=False)\n            mutant = clip(x[a] + F * (x[b] - x[c]))\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, x[target_idx])\n            return trial\n\n        def PSO(x, g_best, w, c1, c2):\n            v = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n            p_best = x.copy()\n            p_best_fitness = np.array([evaluate(xi) for xi in p_best])\n            g_best_fitness = min(p_best_fitness)\n            g_best = p_best[np.argmin(p_best_fitness)]\n\n            for _ in range(self.max_iter):\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n                x = clip(x + v)\n                fx = np.array([evaluate(xi) for xi in x])\n\n                for i in range(self.pop_size):\n                    if fx[i] < p_best_fitness[i]:\n                        p_best[i] = x[i]\n                        p_best_fitness[i] = fx[i]\n                    if fx[i] < g_best_fitness:\n                        g_best = x[i]\n                        g_best_fitness = fx[i]\n\n            return g_best\n\n        population = create_population()\n        best_solution = population[0]\n\n        for i in range(self.max_iter):\n            F = self.F_min + (self.F_max - self.F_min) * np.random.rand()\n            CR = self.CR_min + (self.CR_max - self.CR_min) * np.random.rand()\n            w = self.w_min + (self.w_max - self.w_min) * np.random.rand()\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * np.random.rand()\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * np.random.rand()\n\n            for j in range(self.pop_size):\n                trial = DE(population, j, F, CR)\n                if evaluate(trial) < evaluate(population[j]):\n                    population[j] = trial\n\n            best_solution = PSO(population, best_solution, w, c1, c2)\n\n        return best_solution", "name": "Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9227292110605295, 0.8679660086888961, 0.9057303353692827, 0.9310825568368994, 0.8809566918942305, 0.8896801227350979, 0.9281872639856038, 0.8542533610671846, 0.9056818236897132, 0.8436891683720029, 0.7295515295380781, 9.999999999998899e-05, 0.8567346226949177, 0.047375682670594665, 0.7736806300053924, 0.850642267376661, 0.7358769463361055, 0.742769348829194, 0.13295660464809866, 0.11247247113657721, 0.14221682115791523, 0.14875856995153558, 0.07582573388852143, 0.721780761264887, 0.7741683106904005, 0.12515807730011053, 0.1716134911027679, 0.49275292469594545, 0.15670606329243963, 0.15201921666019202, 0.1408918493770025, 0.3819791593508326, 0.11418665964366903, 0.11461405369625466, 0.1538701511951096, 0.2936744045446812, 0.9822624832911934, 0.9829233531333026, 0.9862966609544134, 0.978391182422776, 0.9806153736108196, 0.9809693492081527, 0.9861669510354627, 0.9856554537757949, 0.9862282144623291, 0.8134549395752404, 0.05929839324388231, 0.7464848460478938, 0.7422703036744286, 0.6373277256384657, 0.7837750447590752, 0.7927856050794925, 0.08837438651299068, 0.08774300030479132, 0.31967373186802905, 0.21526854876616075, 0.16978365556450392, 0.19485671188761533, 0.8613086018535332, 0.20624023426341576, 0.23307872016321518, 0.12600134629376103, 0.22482509691609887, 0.2190385063764425, 0.20699067851414088, 0.20729327052454072, 0.10326590048037565, 0.09956491545444657, 0.1323327374223361, 0.19403041562756496, 0.20705291470763276, 0.2009210816061927, 0.23222826832536958, 0.22936865455499178, 0.13301011775983773, 0.24630097085827662, 0.1314130020015476, 0.23394547079226113, 0.19331447991159134, 0.13605036197082976, 0.10688245534125851, 0.008203664788826948, 0.05336740400530904, 0.05151955482131143, 9.999999999998899e-05, 9.999999999998899e-05, 0.0168317598418265, 0.003685256580678864, 9.999999999998899e-05, 9.999999999998899e-05, 0.09028527553389798, 0.055987291276079265, 0.2822482482030275, 0.08937822715222088, 0.01240356007914778, 0.03506793388468854, 0.12347293086804145, 0.06412077979392528, 0.06983013788136228, 0.0528971277894571, 9.999999999998899e-05, 0.1345030798246215, 0.20959164979249822, 0.09309466511380182, 0.08091741458959345, 0.10576321805726785, 0.09850022167337369, 0.07464038045775956, 0.07541778979412606, 0.04256576054566574, 0.3186861586121157, 0.03919998083325993, 9.999999999998899e-05, 0.04284565971523824, 0.05760568456084836, 0.049738731453247254, 0.10500634954628407, 0.5321643156447312, 0.522887517688889, 0.574506604428065, 0.6009778392866854, 0.5423083466900485, 0.6169529221955637, 0.6082548611427854, 0.5745417663086281, 0.5614820170829827, 0.09286368472492645, 0.07454048877830899, 0.10185390228760094, 0.12534266328267785, 0.11151431856781546, 0.1431077247805761, 0.1332264110456889, 0.0834314956709441, 0.12352914220688549, 0.2421667474893141, 0.26225605284230147, 0.14108361260228908, 0.18342791202974917, 0.2900781050484048, 0.20039188857175694, 0.21270748611323465, 0.5148649327895364, 0.2334389263661728, 0.24361385286873616, 0.2881741264375163, 0.3475673505493647, 0.4596587733820231, 0.22535140945750887, 0.21246819435520414, 0.4539004716988846, 0.222886972902975, 0.3565477080935714, 0.17517392582507074, 0.3579971914230493, 0.1877514124675187, 0.45846775540675233, 0.18055090639021676, 0.2739988224356614, 0.3720153687749327, 0.2390837592327748, 0.24571540428087013, 0.224791373666404, 0.24456489605425036, 0.22224387504444287, 0.2901913588261307, 0.22022780222261495, 0.1975835187962176, 0.2360668289192277, 0.1984728963382585, 0.216731018745271, 0.2087629435027909, 0.7483666310381553, 0.1859913158353511, 0.2536456264209309, 0.20253319880403386, 0.2248581785194982, 0.21191239082475344, 0.23985037166997225, 0.2047189397035306, 0.1879619505596657, 0.1755832407598893, 0.915303106611304, 0.1684624833821795, 0.20038823321572663, 0.17821537472556936, 0.2089787023512688, 0.18818548748430375, 0.9322559490736251, 0.6317173352276568, 0.15566623186115525, 0.6420883986086852, 0.2105549479223373, 0.1677263776883996, 0.18065412037437856, 0.10395795342268954, 0.1044900604256882, 0.7279151006470708, 0.22969218260748758, 0.19090454195167217, 0.17976900323682332, 0.18799237447999384, 0.2387305662358945, 0.20474840537237005, 0.20509692539471658, 0.24737612566832357, 0.2043475821376538, 0.1048334870467692, 0.09346084106482644, 0.10192544534395931, 0.09556014439641336, 0.09297340064249215, 0.12401228576665402, 0.09271961173470522, 0.10427479814185903, 0.09985210122386456]}, "mutation_prompt": null}
{"id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 84, "fitness": 0.3133092990946, "feedback": "The algorithm Enhanced_Adaptive_DE_PSO_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "8ad42617-9a04-4175-a746-c6ed5f72fe7b", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "65297a89-f028-4806-badd-aeea55ff96cf", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "665dbed0-9c9a-40c9-8626-9c224a234763", "solution": "import numpy as np\n\nclass CuckooFirefly_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5\n        self.beta = 1.0\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        # Algorithm logic here\n        \n        return population[np.argmin(fitness)]", "name": "CuckooFirefly_Metaheuristic", "description": "A novel metaheuristic algorithm combining Cuckoo Search and Firefly Algorithm with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 86, "fitness": 0.09144843562834938, "feedback": "The algorithm CuckooFirefly_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0c6c6fb0-6f42-4163-92ca-9d9e4f29b0e4", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "708ae9de-5977-4416-b13a-9ca6099be5ab", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "a6dc5604-6126-41d2-b2aa-6f12a0597fa1", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "e10d8763-5ba9-4d3a-8bd8-420db17024f3", "solution": "import numpy as np\n\nclass Hybrid_GA_SA_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.2\n        self.initial_temperature = 100.0\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n        best_solution = population[np.argmin(func(population))]\n        temperature = self.initial_temperature\n\n        for _ in range(self.budget):\n            offspring = np.copy(population)\n            for i in range(self.budget):\n                if np.random.rand() < self.mutation_rate:\n                    offspring[i] += np.random.normal(0, 1, size=self.dim)\n            for i in range(self.budget):\n                current_cost = func(population[i])\n                new_cost = func(offspring[i])\n                if new_cost < current_cost or np.random.rand() < np.exp((current_cost - new_cost) / temperature):\n                    population[i] = offspring[i]\n                    if new_cost < func(best_solution):\n                        best_solution = offspring[i]\n            temperature *= 0.95\n\n        return best_solution", "name": "Hybrid_GA_SA_Metaheuristic", "description": "Novel Hybrid Evolutionary Algorithm combining Genetic Algorithm and Simulated Annealing for versatile optimization across multiple domains.", "configspace": "", "generation": 90, "fitness": 0.09144843562834938, "feedback": "The algorithm Hybrid_GA_SA_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d40eb711-1296-4028-8d3a-694af690f83b", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "1e591db6-0761-4de0-9867-38b7cdffedcc", "solution": "import numpy as np\n\nclass Genetic_Simulated_Annealing_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_rate = 0.1\n        self.initial_temperature = 100.0\n\n    def __call__(self, func):\n        population = np.random.uniform(low=-5.0, high=5.0, size=(self.budget, self.dim))\n        best_solution = population[np.argmin(func(population))]\n        temperature = self.initial_temperature\n\n        for _ in range(self.budget):\n            mutation_prob = np.random.rand()\n            new_solution = best_solution.copy()\n\n            if mutation_prob < self.mutation_rate:\n                mutation_idx = np.random.randint(self.dim)\n                new_solution[mutation_idx] += np.random.uniform(-0.5, 0.5)\n\n            cost_diff = func(new_solution) - func(best_solution)\n            if cost_diff < 0 or np.random.rand() < np.exp(-cost_diff / temperature):\n                best_solution = new_solution\n\n            temperature *= 0.95  # Cooling schedule\n\n        return best_solution", "name": "Genetic_Simulated_Annealing_Metaheuristic", "description": "A novel algorithm combining Genetic Algorithm and Simulated Annealing with adaptive mutation and temperature control for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 92, "fitness": 0.09144843562834938, "feedback": "The algorithm Genetic_Simulated_Annealing_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "90a8bf79-a13a-45d6-aa08-181cebfef809", "solution": "import numpy as np\n\nclass Cooperative_Coevolutionary_LocalSearch_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_subproblems = 5\n        self.population_size = 20\n        self.F_min = 0.4\n        self.F_max = 0.8\n        self.c1_min = 1.5\n        self.c1_max = 2.2\n    \n    def __call__(self, func):\n        # Custom implementation for cooperative coevolutionary algorithm with local search\n        ...\n        return optimized_solution", "name": "Cooperative_Coevolutionary_LocalSearch_Metaheuristic", "description": "Utilizing a cooperative coevolutionary algorithm with local search and adaptive control parameters to enhance exploration and exploitation in a black box optimization setting.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'optimized_solution' is not defined\").", "error": "NameError(\"name 'optimized_solution' is not defined\")", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {}, "mutation_prompt": null}
{"id": "6079b63c-79b3-4a86-8308-8ef2a062b5e4", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "3ba769a9-c5fb-40c2-a2ff-e72e49855587", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "af5654ed-27b5-47d7-b9d8-804fe2fcab96", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "5d14f2ce-818f-4180-856a-f326e09f5437", "solution": "import numpy as np\n\nclass GreyWolf_Firefly_Metaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.5\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def grey_wolf_phase(self, population, func):\n        # Grey Wolf Optimization Phase\n        pass\n\n    def firefly_phase(self, population, func):\n        # Firefly Algorithm Phase\n        pass\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        for _ in range(self.budget // 2):\n            population = self.grey_wolf_phase(population, func)\n            population = self.firefly_phase(population, func)\n        return np.min([func(ind) for ind in population])", "name": "GreyWolf_Firefly_Metaheuristic", "description": "Novel algorithm combining Grey Wolf Optimization and Firefly Algorithm with adaptive control parameters for robust optimization across a diverse set of black box functions within a given budget.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'NoneType' object is not iterable\").", "error": "TypeError(\"'NoneType' object is not iterable\")", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {}, "mutation_prompt": null}
{"id": "6e66e5c1-6831-45c1-8c68-dc6505e90b6d", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization with adaptive control parameters for efficient exploration and exploitation of the search space within a given budget.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {"aucs": [0.9164684215507761, 0.8450102988178141, 0.8967829631076659, 0.9122548410422568, 0.8741042228335772, 0.8943583300671107, 0.9241775829809282, 0.8689876261115808, 0.9087421431318533, 0.8352722861069295, 0.6838871104199689, 0.7571376832070263, 0.8383641811332885, 0.04641713925975821, 0.7770104885967153, 9.999999999998899e-05, 0.7199535511374426, 0.7870073935960495, 0.158192149787862, 0.1102575822727978, 0.17868022452368282, 0.18228236738989245, 0.14439606658732285, 0.33986879747019794, 0.16168831405129747, 0.5009266963817944, 0.1684463696009092, 0.15155214425819408, 0.1483463249992466, 0.16272959630833372, 0.14533469654199727, 0.1603034853712525, 0.1272892628233434, 0.15514957215396685, 0.13175375732729977, 0.15350491962985657, 0.9806247614124055, 0.986199273463069, 0.985446366504965, 0.9811077733384959, 0.9836992217511535, 0.981115138748863, 0.9861597087323493, 0.9859947333575242, 0.9861904306241918, 0.7824754553050721, 0.5866856462547448, 0.7568717744717516, 0.7871565421673906, 0.15137318855164794, 0.7660110463298627, 0.7665396780517064, 0.08675739257990445, 0.08772898368604787, 0.24205992279352972, 0.21169126004879402, 0.16816650242937836, 0.1948480922972119, 0.3770196223304184, 0.21452683511989357, 0.23646233295546704, 0.12379110411970473, 0.23294878171170186, 0.20802566761079766, 0.19148937604712035, 0.21464125138432277, 0.22442284504712784, 0.13086290917062182, 0.13077532927232838, 0.13391667368807925, 0.15036212353800382, 0.13474994533261475, 0.22166545606993193, 0.25319167811207277, 0.19867281162444594, 0.13134708842320486, 0.22239393605911328, 0.228385274914364, 0.2526204711701596, 0.24060066315999562, 0.11222844975770674, 0.03325560096520619, 9.999999999998899e-05, 0.022209574113679964, 0.00010802735410742059, 9.999999999998899e-05, 9.999999999998899e-05, 0.05395002451477471, 0.06755636581153357, 0.0015599318257926154, 0.1063901950368098, 0.05037451747203103, 0.026521785893157124, 0.05172234267475251, 0.03577497364390492, 0.043478472593662776, 0.0911311457810412, 0.06753857449554468, 0.09939566365678565, 0.19924802756035753, 0.032374760361995825, 0.05085205344802213, 0.14306093939292008, 9.999999999998899e-05, 0.08029224268123925, 0.10564037762892675, 0.09862368411326128, 0.07454716878613943, 0.06158937546260079, 0.19140417255348607, 0.1559078074468092, 0.051273245465395356, 0.03904762072673329, 0.2795300829815095, 0.21922249750223566, 0.04789602585689012, 0.08342836920390395, 0.551820359463866, 0.5478324070309641, 0.5302557512889586, 0.6114652338182758, 0.6168748211904493, 0.5560687821089858, 0.6102142913794524, 0.5311226708911159, 0.6002372169630837, 0.12474889825200464, 0.09184265095670785, 0.07751951138679691, 0.0822411600434203, 0.09785821097719838, 0.11231406582533088, 0.12353246745437396, 0.0925776237499063, 0.12694189601833383, 0.17646227366096778, 0.24150233646730068, 0.31316860359727394, 0.1917923229456081, 0.4810217924145379, 0.41731458304551716, 0.18074360135033218, 0.2680026292738362, 0.16356939575969953, 0.33290223807017394, 0.2955907284178533, 0.5397265987457559, 0.2810098748678137, 0.3224404068967487, 0.4229266862641421, 0.39719751642326195, 0.4091972709635002, 0.5546037405001882, 0.24606036977865886, 0.21356782519937423, 0.18879177518456247, 0.19085751852340505, 0.21443902027075956, 0.23470147252953388, 0.25600633055635347, 0.3254525792400518, 0.2777249242136359, 0.2139278238559955, 0.2010589585057283, 0.2117437589644423, 0.2373288293008543, 0.2339971033993805, 0.19899513428612192, 0.19891715387711562, 0.1962205636622446, 0.21663590126949972, 0.210159184936204, 0.6827024973754323, 0.19465160172302576, 0.2249049347397155, 0.19291733727360738, 0.2019203432148825, 0.20790497615277925, 0.22045105554100053, 0.734584216416168, 0.17557541899174633, 0.170176696189279, 0.9275942706925524, 0.9267040099224764, 0.19948087284302196, 0.9051877290395526, 0.21103047803724928, 0.1697597559836821, 0.21247616624267485, 0.6870261869310397, 0.3961620650867077, 0.6778259894071224, 0.21173356871997462, 0.6518322966386862, 0.6564817081709529, 0.10392459004467602, 0.1254384325994632, 0.16575735188230334, 0.20079950157454596, 0.19824635893139053, 0.18143243300918488, 0.18047007300308593, 0.186073397011007, 0.2159459624558112, 0.20571437878040089, 0.23250198512931786, 0.21271483017868498, 0.08002186045896886, 0.10335440742975077, 0.07871600095605158, 0.10791558137698032, 0.09039141927319416, 0.10641945211020343, 0.09747362229355672, 0.09255710533907002, 0.08658108214050642]}, "mutation_prompt": null}
{"id": "4fa193c7-0ada-43a1-9ee3-a40a45748e67", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Metaheuristic_LineRefinement(Adaptive_DE_PSO_Metaheuristic):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.F_min = 0.5\n        self.F_max = 0.9\n\n    def __call__(self, func):\n        self.c1_min = 1.7\n        self.c1_max = 2.0\n        \n        # Implement line refinement strategy with probability 0.5\n        if np.random.rand() < 0.5:\n            # Refine individual lines of the selected solution\n\n        return super().__call__(func)", "name": "Enhanced_Adaptive_DE_PSO_Metaheuristic_LineRefinement", "description": "Novel Hybrid Metaheuristic Algorithm combining Adaptive Differential Evolution and Particle Swarm Optimization with Line Refinement Strategy for Efficient Search Space Exploration within a Budget", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('expected an indented block', ('<string>', 17, 9, '        return super().__call__(func)\\n')).", "error": "IndentationError('expected an indented block', ('<string>', 17, 9, '        return super().__call__(func)\\n'))", "parent_id": "fa00c58f-2dc8-46ad-b336-16bbda8f04c0", "metadata": {}, "mutation_prompt": null}
