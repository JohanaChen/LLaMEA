{"id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "cc05ad40-0721-49f0-8ae7-9c9600e868f2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "db6c2ec5-e6cd-4a04-94ed-e746c45fa0d9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "854358f1-dca6-4116-9feb-646dd39bb43b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "6350875e-65e0-4f17-a980-d2df86de5af5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "383f8639-30c8-41f5-ad41-317f6219f516", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "b5fa664f-b8e4-486a-b480-1e9657927f23", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "351d5d87-72d3-4c7c-9ee4-c303da979c20", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "57326c47-0e71-4674-965d-65bf448370c6", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "9aaa0af4-30fd-4ea6-aaea-27203a98a4d4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "22bc312e-1f96-419c-b4fd-d7fe13efda48", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "43a7449f-46ec-46ee-92d9-4107030a47a9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "035d65aa-1af5-4430-8ee9-cb1cccac5d0c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "8abb36ce-1a02-4f43-acb5-59c0ba753332", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "2819e33d-872a-4bb0-8f78-91d1ad908a2b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "6d84b173-0ede-4504-af30-d5937aa25f1c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "eb96bbe4-4aa9-4fb8-9e83-8a7a49f0d493", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "9c6f93bb-b825-449d-80e4-8bef0dc874d8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "c3b2638e-cf43-44a3-be38-db19def0f7c1", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "f5a06c4d-6c5d-4924-af0e-7ab0ff5595de", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "5b7315c8-54c8-4e35-b99e-4201f9da2bbc", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "732d5870-9af0-45ee-ab45-b82f1139e60e", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "95490ac8-be0e-45d7-8021-632425cf71c7", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "eead51eb-342b-4369-b39f-ad128f863e98", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "b15e783e-eeb4-4c27-bdf9-a434f33bd079", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "886ac56c-a73e-4396-a200-56a5d06887f4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "e0ec7317-be02-456b-8208-64c1cbdfb1c3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "45c8f7a9-3620-4b17-8d4f-8ed1325c1ea5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "ad7030bf-bade-44f1-a5d9-ceb65f40ab1c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "41d1d448-e7e3-4a7c-b0e8-3a5cfe1e2024", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "84e8f9e5-07cf-4f8c-9ccd-0d0645e28a16", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "3a71adcf-bfec-44dd-a873-53de8c10b19c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "44ca60b6-53aa-4459-9d0d-a93fbd28a11f", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "2e55fd39-d688-4276-a3fb-e078a67f960b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "49e0d3f6-d51f-46bc-8516-34d42e3fc038", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "95b05303-30a1-43ed-b0e9-707e97d54508", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "2e4e9439-21b2-4b3a-b57f-113a63df3584", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "d1375254-6e1f-4fc6-a82b-7d9954713d72", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "48e42404-2da0-4096-b486-33ef10117af1", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "c39672e7-0be0-4237-9f30-e488c50335b1", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "af2dac42-ba1a-476b-a086-758b67ca0fab", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "42b2f891-bb50-4397-9936-9e2d26ebf7f4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "82e52997-84ae-44f3-bca9-da66e42d279a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "608d79eb-bda2-4cd1-911c-7a81ffb8e4c4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "7540b18f-9da1-429e-bb81-3ca766234502", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "87a7f710-0603-43a1-9be5-34647619abac", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "7bb9a78d-eb06-4a0d-9a16-6bb1e163a960", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "af2952be-a3e4-4fb8-9e94-028f24e05914", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "31fb0043-2e3e-45c7-9135-a50afa2d4fef", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "6d41b5c2-3d3b-40db-82cf-aec41dcaced4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {}, "mutation_prompt": null}
{"id": "e13090e8-8edd-492a-bdd8-04956424b81e", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 50, "fitness": 0.3634161596286755, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "7d66d969-65b4-47d9-b649-47b3db2d9804", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "58fe6d6e-1d76-4e70-ad34-9cf80a8e7e10", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "0b646aa1-52aa-46dc-af77-d06e0fb73864", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "7d7b5757-6743-4c51-bd57-128550063312", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "A novel optimization algorithm combining Differential Evolution and Particle Swarm Optimization with individual line refinements for enhanced performance.", "configspace": "", "generation": 53, "fitness": 0.3634161596286755, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "7594f7fd-e359-4f9d-acb0-d4fd83c24a6a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "f895aae9-c5f5-4223-ae70-34694eb10563", "solution": "import numpy as np\n\nclass EnhancedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def greedy_selection(self, func, bounds, elite_ratio=0.1):\n        elite_size = int(self.pop_size * elite_ratio)\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.max_iter):\n            elite_idxs = np.argsort(fitness)[:elite_size]\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.5 * (b - c), bounds[0], bounds[1])\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[elite_idxs]\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        de_best = self.differential_evolution(func, bounds)\n        pso_best = self.particle_swarm_optimization(func, bounds)\n        elite_pop = self.greedy_selection(func, bounds)\n        return (de_best + pso_best + elite_pop) / 3", "name": "EnhancedNovelMetaheuristicAlgorithm", "description": "Enhancing the NovelMetaheuristicAlgorithm by incorporating a greedy selection mechanism to exploit the best individuals from the differential evolution and particle swarm optimization components.", "configspace": "", "generation": 55, "fitness": 0.3634161596286755, "feedback": "The algorithm EnhancedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "9e87be73-76da-458c-b7fc-a85aef762f9f", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "e9875049-d0e6-4da5-8c48-c9702a4356a5", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "1f6c1e60-7b16-451d-ad3d-cb9f810a0444", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "1257d76e-3b73-4e3c-b704-8112b26b4d47", "solution": "import numpy as np\n\nclass EnhancedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.adaptive_differential_evolution(func, bounds) + self.adaptive_particle_swarm_optimization(func, bounds)\n\n    def adaptive_differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        mutation_factor = 0.5\n\n        for _ in range(self.max_iter):\n            mutation_factor = self.adapt_parameter(mutation_factor)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + mutation_factor * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def adaptive_particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n        inertia_factor = 0.5\n\n        for _ in range(self.max_iter):\n            inertia_factor = self.adapt_parameter(inertia_factor)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia_factor * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def adapt_parameter(self, param):\n        if np.random.rand() < 0.5:\n            return max(0.1, param - 0.1)  # Decrease parameter\n        else:\n            return min(0.9, param + 0.1)  # Increase parameter", "name": "EnhancedNovelMetaheuristicAlgorithm", "description": "Enhancing the NovelMetaheuristicAlgorithm by introducing a novel adaptive mechanism to dynamically adjust mutation and inertia parameters during optimization.", "configspace": "", "generation": 59, "fitness": 0.3202998224853918, "feedback": "The algorithm EnhancedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.8722852534815315, 0.21733176563821643, 0.9171212784660829, 0.8955222188627768, 0.511405478719061, 0.9195606605457681, 0.8808732315415224, 0.31958127972887784, 0.900806300423983, 0.7712173645525991, 9.999999999998899e-05, 0.8174059703238967, 0.7524491097601758, 0.015009202334203997, 0.7046351730478243, 0.7985089048540215, 9.999999999998899e-05, 0.8341847196437084, 0.17136762650490345, 0.0969097049863743, 0.6884423685116026, 0.1681622194802952, 0.11797487960926678, 0.15234090661249644, 0.1497835087245183, 0.12352877052068856, 0.1743896384027417, 0.1468224659225108, 0.07707378984100033, 0.11261910511595619, 0.1713095017139371, 0.06282737292650631, 0.09774271311813232, 0.6336675800794151, 0.04243460326763693, 0.1509848047020218, 0.9792172826244163, 0.5269525136198951, 0.9016558769439473, 0.9143521203873968, 0.08808673658670652, 0.9548247903735395, 0.9661986958346851, 0.3220726364795723, 0.9410553269341144, 0.3605874845274464, 0.1313658644204867, 0.5376291731529472, 0.4653847437002395, 0.1446364989613006, 0.6225236745517022, 0.4619629600392091, 0.2046875792166145, 0.5777791132655823, 0.8602376699748843, 0.225139641090502, 0.10124710213740618, 0.8792723157602662, 0.06629094995570617, 0.2684777834200498, 0.36631421027770217, 0.14281471727915018, 0.9041336718268761, 0.20300646022016655, 0.05577770129093007, 0.386163810335188, 0.21212801411279747, 0.023448944096973734, 0.20240973574610566, 0.34636510551864697, 0.1115197353354126, 0.2913163123881751, 0.2615080036848907, 0.12069675387352019, 0.18414173687400637, 0.21972803688705211, 0.057079960668825924, 0.20263259808178957, 0.410591207127461, 0.09968259270442537, 0.2287140854464358, 0.22315893139862386, 9.999999999998899e-05, 0.19575013097067573, 0.2505471919806691, 9.999999999998899e-05, 0.1710103399407109, 0.403184467693694, 9.999999999998899e-05, 0.5358089352071709, 0.22389090754116536, 0.07234136237944311, 0.4622079914664736, 0.3081035699636886, 0.027848885655864297, 0.1863356193111455, 0.41271789419226024, 0.05337016314332521, 0.698532204211996, 0.038539226237007784, 9.999999999998899e-05, 0.11563586485109112, 0.13709239136937212, 0.08140164379458659, 0.18302622977941718, 0.17222179089657397, 0.06861762728224807, 0.2503905378951178, 0.4169304727666808, 0.028102430647640397, 0.342885713990437, 0.27203955528367896, 0.012585325235403122, 0.2889918773855884, 0.25357584457316884, 9.999999999998899e-05, 0.3360195135873564, 0.5829535216196453, 0.29398921316888194, 0.6111800399476164, 0.6329237333775772, 0.29149554903793207, 0.6522571496461647, 0.6135191869470078, 0.2038350484335415, 0.7489887917703205, 0.17419255137288414, 0.038858089571805254, 0.13185147214358184, 0.17361779651289866, 0.10967484429042584, 0.116825151375066, 0.1670666396182342, 0.18523974844625268, 0.11399628758970504, 0.2647113161655751, 0.21532760716700872, 0.2592540727611531, 0.2596610652514961, 0.18668667381199855, 0.23756496517248038, 0.17945943253275587, 0.3082461094846173, 0.24591841885585275, 0.44088659655720175, 0.18790263849474365, 0.62958181013633, 0.41963056008963606, 0.2530833844053404, 0.5429879266671027, 0.45885670431098247, 0.22658702130999075, 0.7122639818690953, 0.3583268631325226, 0.1752131366870161, 0.28216682194641185, 0.4806074738602487, 0.18214525900103173, 0.4636311464959083, 0.3233510432344978, 0.1741015063937752, 0.2167307355369562, 0.2163964926005164, 0.21709124786951128, 0.211148135764897, 0.18759556286800916, 0.2840641084269896, 0.1951677122638361, 0.23407311554501709, 0.27372007059977643, 0.22288900737603912, 0.7456786298576378, 0.17863725332648706, 0.21940209569223001, 0.2407131182035961, 0.18660110416460152, 0.20480007544653334, 0.7650940811226781, 0.16446662744555762, 0.23919175992578656, 0.1816832563440276, 0.1671457832192682, 0.1529395568718488, 0.8868754527165699, 0.18001718136944733, 0.17279778416870373, 0.8901636944737983, 0.16411862908404018, 0.8649508828946777, 0.15442977631436805, 0.1810042175428188, 0.8915829877882426, 0.8176394730498874, 0.11177170351256427, 0.8313533549604248, 0.21175825948606908, 0.1688187000063226, 0.8701127105311282, 0.18439701710519807, 0.1824695774988785, 0.17679874363614057, 0.19715045661973718, 0.21506951167540678, 0.18815239169038078, 0.18774037480841077, 0.2288571562710392, 0.19833266184030784, 0.08218338425727123, 0.10075502325644248, 0.08607773904150617, 0.08803154700919591, 0.10013709245785907, 0.07700606925834852, 0.07919286353932697, 0.08274310402987817, 0.09476821348244502]}, "mutation_prompt": null}
{"id": "d10d0f26-8c23-41d3-873d-7342b527cda9", "solution": "import numpy as np\n\nclass RefinedMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        \n        # Adjusting the probability of changing individual lines for refinement\n        if np.random.rand() < 0.5:\n            return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)\n        else:\n            return self.particle_swarm_optimization(func, bounds) + self.differential_evolution(func, bounds)", "name": "RefinedMetaheuristicAlgorithm", "description": "Combining differential evolution and particle swarm optimization with a probability of changing individual lines to refine the strategy for global optimization.", "configspace": "", "generation": 60, "fitness": 0.3148868304509842, "feedback": "The algorithm RefinedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9258636037451283, 0.9108612483102771, 0.9253910068266422, 0.19005387284496011, 0.9311188421452633, 0.9105510906519161, 0.931568581968081, 0.9272112812068105, 0.8843487622724048, 0.16676846102069065, 0.8603063879300137, 0.8256297004339973, 9.999999999998899e-05, 0.8669888948724493, 0.8701239777546794, 0.059510780345686576, 0.8678868406318185, 0.0599602339426496, 0.07705425790177978, 0.539803548582416, 0.18002105652813138, 0.09552093875634726, 0.2848265847071765, 0.16825560183395405, 0.10932765760842045, 0.5400680571315861, 0.15030461190051192, 0.05138682235077863, 0.1214669587435463, 0.14931420290785447, 0.09531936727977841, 0.1370997288702489, 0.174126830360384, 0.051730660622127056, 0.13769334547838152, 0.11855012597802439, 0.9879306138881504, 0.945423139050596, 0.9213546304448074, 0.07455391464551098, 0.9736691394775254, 0.8941661490803935, 0.07478141130560512, 0.9806492203334605, 0.9224654000711815, 0.19071534535389978, 0.41516594130154216, 0.2871687996752146, 0.19458846075496616, 0.3931276745568758, 0.27381614367251317, 9.999999999998899e-05, 0.31023106732883043, 0.5349078544225863, 0.09943647056994454, 0.22330977108530037, 0.39651906418071625, 0.9364852893310135, 0.9260083158984466, 0.27061393245686727, 0.18166168215273304, 0.9067889643039414, 0.9014902757041112, 0.2931068261246895, 0.1357019978580074, 0.1967007406685939, 0.16627660059455707, 0.13543266586355218, 0.19990705864322744, 0.15527367898429478, 0.1281457138565596, 0.17258988256285956, 0.2765236962458766, 0.1324168882929978, 0.18158567298827588, 0.13050864460465272, 0.16228215010873503, 0.146033601928783, 0.1363439979543165, 0.14319861322026373, 0.3788818707517043, 9.999999999998899e-05, 0.1759245188557641, 0.2414616487085972, 0.07604730490516354, 0.1681545877758066, 0.01757967589678322, 9.999999999998899e-05, 0.10500831361790952, 0.23624937183319372, 0.09283476879082497, 0.402249224585853, 0.2559679184104574, 0.035136975212783916, 0.30407103074949093, 0.21982116157074016, 0.13164818182553062, 0.1510335862263058, 0.3588210550171206, 9.999999999998899e-05, 0.12803901236193982, 0.09621448344788952, 0.08358191300243456, 0.246871930541964, 0.3298247320029505, 0.09778496185513974, 0.10774769415145347, 0.2092759996092416, 0.08186409447512721, 0.20854284129000766, 0.26869096429273387, 0.1265246841435952, 0.3264004641630117, 0.15073552716621874, 0.0878952153248822, 0.2996167339838517, 0.47994252138616256, 0.5653552220206688, 0.3568348588627186, 0.5340128582140401, 0.5121980892697988, 0.49032797786600757, 0.48639212417878386, 0.4974252290331279, 0.7213958451193884, 0.6060517354995227, 0.0835612705926011, 0.13096147835951566, 0.13607041505677864, 0.08578757309899043, 0.1325436520668687, 0.13280359261628205, 0.14131586587966316, 0.14507353189512928, 0.07857042996493224, 0.27409040336205603, 0.24024233012092922, 0.7231565429820792, 0.17219291520320545, 0.17022506031918128, 0.15497109060332315, 0.27019006244860033, 0.16615597213202438, 0.2016392365498465, 0.14595342830564118, 0.7560909917806437, 0.6875115982512494, 0.25339815312580105, 0.7060806716854877, 0.734861656600549, 0.1924653974131586, 0.63363090025884, 0.5050582977263052, 0.18351218884400267, 0.305643893877277, 0.6915629137875057, 0.3521935828080601, 0.479110370564645, 0.4704375862792681, 0.18741469041745706, 0.5718498066891851, 0.6943993384866456, 0.213228930379478, 0.2161837715015298, 0.23035374651343343, 0.2829102825577481, 0.1922111172385953, 0.20327230977988586, 0.2175820543571204, 0.20506962701808373, 0.20873648977414938, 0.17458604654808163, 0.20675719794294178, 0.7366789826361797, 0.18494799423859576, 0.20542471456544298, 0.21841812131936067, 0.23031700330423976, 0.24817724811635422, 0.21930135726021205, 0.08771067349906458, 0.19819032099191647, 0.16629318580295216, 0.14817217213336575, 0.9107970276062481, 0.16708891171278195, 0.16259484886401387, 0.17203346549920895, 0.6098841716181309, 0.3244508476686171, 0.2054281015671392, 0.21248406744834125, 0.169450278897894, 0.5213479382309554, 0.31144029765193626, 0.21348714233244004, 0.21303469456922142, 0.16785051468400958, 0.1995741466623766, 0.21861496927414414, 0.20371177756791592, 0.22200683073570782, 0.21833540529732276, 0.20617541197651768, 0.23169962213275408, 0.22162546395124416, 0.22566906878211823, 0.11204936081497763, 0.08253930404694587, 0.09174089238895178, 0.10541992736157957, 0.08987568298850124, 0.0905385473709106, 0.10496884678357532, 0.0924013401432392, 0.09597629916182304]}, "mutation_prompt": null}
{"id": "76a88c07-2926-471b-851a-6227ebf5678a", "solution": "import numpy as np\n\nclass HybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "HybridMetaheuristicAlgorithm", "description": "A hybrid metaheuristic algorithm combining differential evolution and particle swarm optimization for global optimization within a specified budget.", "configspace": "", "generation": 61, "fitness": 0.3634161596286755, "feedback": "The algorithm HybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "290fb8d8-da79-4479-8938-364f6a3b6d8c", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "8260b400-4ae8-44b8-bcef-5bfde74e018a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "5b553455-09b5-4266-986c-6aba5464e6d8", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "43471fe4-4e18-441e-9c94-1f5b6aa77d65", "solution": "# import numpy as np\n\nclass NovelImprovedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelImprovedMetaheuristicAlgorithm", "description": "A hybrid metaheuristic algorithm combining differential evolution and particle swarm optimization for global exploration and exploitation in black box function optimization.", "configspace": "", "generation": 65, "fitness": 0.3634161596286755, "feedback": "The algorithm NovelImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "ff1c1a79-8118-4073-aaa8-bf072a026ea8", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "f1798cbc-6e15-445c-ba0f-7d5ddca03929", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "06b6742c-a502-433f-8e7e-713f87cd06bd", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "311da836-8ac0-4947-8b64-7cad28df6f02", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "092596fc-cc61-42b1-9fa8-1b35b78518ef", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "cb119164-2fea-4414-a748-0310b2176000", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "7fee9dcb-191b-4af9-bd77-439d0efe10c9", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "414f8c58-7b1f-466e-961a-1e139f4dff64", "solution": "import numpy as np\n\nclass EnhancedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia_min = 0.4\n        inertia_max = 0.9\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n        \n        for _ in range(self.max_iter):\n            inertia = inertia_min + (inertia_max - inertia_min) * (_ / self.max_iter)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest", "name": "EnhancedNovelMetaheuristicAlgorithm", "description": "Enhancing the NovelMetaheuristicAlgorithm by dynamically adjusting the inertia weight in particle swarm optimization based on the fitness improvement.", "configspace": "", "generation": 73, "fitness": 0.3634161596286755, "feedback": "The algorithm EnhancedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "7b82804b-37c8-40ba-b12e-a30861cc67b3", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "8ca67031-1b02-4607-8412-eacf069a53bf", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "A hybrid optimization algorithm combining differential evolution and particle swarm optimization with refined strategies for global exploration and exploitation.", "configspace": "", "generation": 75, "fitness": 0.3634161596286755, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "7dd57ced-c674-4a15-947d-792720f0aa62", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "1ad2fa89-cc46-4ae1-88d0-8cd967fb5c08", "solution": "# import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def cuckoo_search(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        num_nests = self.pop_size\n        pa = 0.25\n        alpha = 0.1\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_nest_idx = np.argmin(fitness)\n        best_nest = pop[best_nest_idx]\n\n        for _ in range(self.max_iter):\n            step_size = alpha * (bounds[1] - bounds[0])\n            new_nests = pop.copy()\n\n            for i in range(num_nests):\n                step = step_size * np.random.randn(self.dim)\n                new_nest = pop[i] + step\n                new_nest = constrain(new_nest)\n\n                if np.random.rand() < pa:\n                    fit_new_nest = func(new_nest)\n                    if fit_new_nest < fitness[i]:\n                        new_nests[i] = new_nest\n                        fitness[i] = fit_new_nest\n\n                    if fit_new_nest < func(best_nest):\n                        best_nest = new_nest\n\n            pop = new_nests\n\n        return best_nest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return 0.5 * self.differential_evolution(func, bounds) + 0.3 * self.particle_swarm_optimization(func, bounds) + 0.2 * self.cuckoo_search(func, bounds)", "name": "EnhancedMetaheuristicAlgorithm", "description": "Enhancing the NovelMetaheuristicAlgorithm by incorporating a novel hybridization strategy of Differential Evolution with Cuckoo Search for improved global exploration and exploitation in black box optimization.", "configspace": "", "generation": 77, "fitness": 0.3634161596286755, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "ea54068f-6eb2-495a-bd12-e460f33d0f54", "solution": "# import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "EnhancedMetaheuristicAlgorithm", "description": "A novel hybrid algorithm that combines differential evolution and particle swarm optimization with individual line refinements to enhance global exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 78, "fitness": 0.3634161596286755, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "ec79296b-ff63-4694-94aa-508dc3aed620", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "d5eed644-81a9-4e18-aa90-59f656bff4d5", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "e24bd1b1-b97a-4914-8da5-da25b1daeb54", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "c980bffb-6cb7-45d1-ae31-51ca0b9782af", "solution": "import numpy as np\n\nclass RefinedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "RefinedNovelMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm that combines differential evolution and particle swarm optimization for global exploration and exploitation, with a 50% probability to refine the strategy of the selected solution.", "configspace": "", "generation": 82, "fitness": 0.3634161596286755, "feedback": "The algorithm RefinedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "179fbe46-8d13-4ebe-8353-0edf72ecf41e", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "5230e33b-40f1-48bd-a149-fc62196ec802", "solution": "# import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def firefly_algorithm(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        beta0 = 1.0\n        beta_min = 0.2\n        gamma = 0.01\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                for j in range(self.pop_size):\n                    if fitness[j] < fitness[i]:\n                        attractiveness = beta0 * np.exp(-gamma * np.linalg.norm(pop[j] - pop[i])**2)\n                        step = attractiveness * (pop[j] - pop[i])\n                        pop[i] = constrain(pop[i] + step)\n                        fitness[i] = func(pop[i])\n\n        return pop[np.argmin(fitness)]\n    \n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds) + self.firefly_algorithm(func, bounds)", "name": "EnhancedMetaheuristicAlgorithm", "description": "Enhancing the Novel Metaheuristic Algorithm by incorporating a hybridization of Firefly Algorithm for global exploration and exploitation optimization strategy.", "configspace": "", "generation": 84, "fitness": 0.3634161596286755, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "95ebaef9-b877-4373-a9f3-8ada47061094", "solution": "import numpy as np\n\nclass RefinedNovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "RefinedNovelMetaheuristicAlgorithm", "description": "Combining Differential Evolution and Particle Swarm Optimization for global exploration and exploitation in an evolutionary algorithm to optimize black box functions within a given budget.", "configspace": "", "generation": 85, "fitness": 0.3634161596286755, "feedback": "The algorithm RefinedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "a6ee4f55-bdad-4a7e-8c47-087f5b186472", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.adaptive_prob = 0.5\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        if np.random.rand() < self.adaptive_prob:\n            return self.differential_evolution(func, bounds)\n        else:\n            return self.particle_swarm_optimization(func, bounds)", "name": "EnhancedMetaheuristicAlgorithm", "description": "An enhanced metaheuristic algorithm combining differential evolution and particle swarm optimization with adaptive strategy updates for improved convergence performance.", "configspace": "", "generation": 86, "fitness": 0.3148868304509842, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9258636037451283, 0.9108612483102771, 0.9253910068266422, 0.19005387284496011, 0.9311188421452633, 0.9105510906519161, 0.931568581968081, 0.9272112812068105, 0.8843487622724048, 0.16676846102069065, 0.8603063879300137, 0.8256297004339973, 9.999999999998899e-05, 0.8669888948724493, 0.8701239777546794, 0.059510780345686576, 0.8678868406318185, 0.0599602339426496, 0.07705425790177978, 0.539803548582416, 0.18002105652813138, 0.09552093875634726, 0.2848265847071765, 0.16825560183395405, 0.10932765760842045, 0.5400680571315861, 0.15030461190051192, 0.05138682235077863, 0.1214669587435463, 0.14931420290785447, 0.09531936727977841, 0.1370997288702489, 0.174126830360384, 0.051730660622127056, 0.13769334547838152, 0.11855012597802439, 0.9879306138881504, 0.945423139050596, 0.9213546304448074, 0.07455391464551098, 0.9736691394775254, 0.8941661490803935, 0.07478141130560512, 0.9806492203334605, 0.9224654000711815, 0.19071534535389978, 0.41516594130154216, 0.2871687996752146, 0.19458846075496616, 0.3931276745568758, 0.27381614367251317, 9.999999999998899e-05, 0.31023106732883043, 0.5349078544225863, 0.09943647056994454, 0.22330977108530037, 0.39651906418071625, 0.9364852893310135, 0.9260083158984466, 0.27061393245686727, 0.18166168215273304, 0.9067889643039414, 0.9014902757041112, 0.2931068261246895, 0.1357019978580074, 0.1967007406685939, 0.16627660059455707, 0.13543266586355218, 0.19990705864322744, 0.15527367898429478, 0.1281457138565596, 0.17258988256285956, 0.2765236962458766, 0.1324168882929978, 0.18158567298827588, 0.13050864460465272, 0.16228215010873503, 0.146033601928783, 0.1363439979543165, 0.14319861322026373, 0.3788818707517043, 9.999999999998899e-05, 0.1759245188557641, 0.2414616487085972, 0.07604730490516354, 0.1681545877758066, 0.01757967589678322, 9.999999999998899e-05, 0.10500831361790952, 0.23624937183319372, 0.09283476879082497, 0.402249224585853, 0.2559679184104574, 0.035136975212783916, 0.30407103074949093, 0.21982116157074016, 0.13164818182553062, 0.1510335862263058, 0.3588210550171206, 9.999999999998899e-05, 0.12803901236193982, 0.09621448344788952, 0.08358191300243456, 0.246871930541964, 0.3298247320029505, 0.09778496185513974, 0.10774769415145347, 0.2092759996092416, 0.08186409447512721, 0.20854284129000766, 0.26869096429273387, 0.1265246841435952, 0.3264004641630117, 0.15073552716621874, 0.0878952153248822, 0.2996167339838517, 0.47994252138616256, 0.5653552220206688, 0.3568348588627186, 0.5340128582140401, 0.5121980892697988, 0.49032797786600757, 0.48639212417878386, 0.4974252290331279, 0.7213958451193884, 0.6060517354995227, 0.0835612705926011, 0.13096147835951566, 0.13607041505677864, 0.08578757309899043, 0.1325436520668687, 0.13280359261628205, 0.14131586587966316, 0.14507353189512928, 0.07857042996493224, 0.27409040336205603, 0.24024233012092922, 0.7231565429820792, 0.17219291520320545, 0.17022506031918128, 0.15497109060332315, 0.27019006244860033, 0.16615597213202438, 0.2016392365498465, 0.14595342830564118, 0.7560909917806437, 0.6875115982512494, 0.25339815312580105, 0.7060806716854877, 0.734861656600549, 0.1924653974131586, 0.63363090025884, 0.5050582977263052, 0.18351218884400267, 0.305643893877277, 0.6915629137875057, 0.3521935828080601, 0.479110370564645, 0.4704375862792681, 0.18741469041745706, 0.5718498066891851, 0.6943993384866456, 0.213228930379478, 0.2161837715015298, 0.23035374651343343, 0.2829102825577481, 0.1922111172385953, 0.20327230977988586, 0.2175820543571204, 0.20506962701808373, 0.20873648977414938, 0.17458604654808163, 0.20675719794294178, 0.7366789826361797, 0.18494799423859576, 0.20542471456544298, 0.21841812131936067, 0.23031700330423976, 0.24817724811635422, 0.21930135726021205, 0.08771067349906458, 0.19819032099191647, 0.16629318580295216, 0.14817217213336575, 0.9107970276062481, 0.16708891171278195, 0.16259484886401387, 0.17203346549920895, 0.6098841716181309, 0.3244508476686171, 0.2054281015671392, 0.21248406744834125, 0.169450278897894, 0.5213479382309554, 0.31144029765193626, 0.21348714233244004, 0.21303469456922142, 0.16785051468400958, 0.1995741466623766, 0.21861496927414414, 0.20371177756791592, 0.22200683073570782, 0.21833540529732276, 0.20617541197651768, 0.23169962213275408, 0.22162546395124416, 0.22566906878211823, 0.11204936081497763, 0.08253930404694587, 0.09174089238895178, 0.10541992736157957, 0.08987568298850124, 0.0905385473709106, 0.10496884678357532, 0.0924013401432392, 0.09597629916182304]}, "mutation_prompt": null}
{"id": "7567f5d3-79a7-4cd9-8b55-d2e3d40dd9e5", "solution": "# import numpy as np\n\nclass RefinedMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return 0.5 * self.differential_evolution(func, bounds) + 0.5 * self.particle_swarm_optimization(func, bounds)", "name": "RefinedMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation with a refined strategy to improve optimization performance.", "configspace": "", "generation": 87, "fitness": 0.3634161596286755, "feedback": "The algorithm RefinedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "520dd764-3632-48ac-ab64-ce7cfc63d5d0", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "25a9c7a8-f72d-4eb1-b08d-d443fa2bcfe4", "solution": "import numpy as np\n\nclass ImprovedMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        NovelMetaheuristicAlgorithm.__init__(self, budget, dim)\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "ImprovedMetaheuristicAlgorithm", "description": "A hybrid optimization algorithm combining differential evolution and particle swarm optimization with refinements based on a 0.5 probability for line changes.", "configspace": "", "generation": 89, "fitness": 0.3634161596286755, "feedback": "The algorithm ImprovedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "8bcf893c-7dbf-41ba-96a5-4f36f2648e01", "solution": "import numpy as np\n\nclass TweakedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "TweakedMetaheuristicAlgorithm", "description": "Combining Differential Evolution and Particle Swarm Optimization with individual line tweaks to enhance global exploration and exploitation for black box optimization.", "configspace": "", "generation": 90, "fitness": 0.3634161596286755, "feedback": "The algorithm TweakedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "d279d089-4a9c-4ccc-a338-ad383eb16164", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "545e2b74-aa84-4f5a-9e48-f7844a67c0ca", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "33d87bfc-84a2-46ea-ac4e-15ba1153124d", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "EnhancedMetaheuristicAlgorithm", "description": "Combining differential evolution and particle swarm optimization with individual line refinement for enhanced global exploration and exploitation in black box optimization.", "configspace": "", "generation": 93, "fitness": 0.3634161596286755, "feedback": "The algorithm EnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "ac6225c5-5aae-4aa9-a4ec-aa469f95f06a", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "87840b1a-ec4a-4a22-89c7-02a24bf76278", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n\n    def differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n                    if fit < func(gbest):\n                        gbest = pop[i]\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.differential_evolution(func, bounds) + self.particle_swarm_optimization(func, bounds)", "name": "NovelMetaheuristicAlgorithm", "description": "An evolutionary algorithm utilizing a combination of differential evolution and particle swarm optimization for global exploration and exploitation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.9305177161157484, 0.6936513269676153, 0.3466857975319738, 0.9201136305342622, 0.9376266773754489, 0.8778379381794246, 0.920734724484908, 0.9142101268632289, 0.9287600970534884, 0.8792343974535025, 0.44637911127942376, 0.8552347343215612, 0.8544232023734171, 0.8656254073187422, 0.8824585192237991, 0.8497242589785772, 0.8636276077699566, 0.8608386631073498, 0.5233978623940905, 0.7218423280515358, 0.6387609877913782, 0.17543397966626384, 0.17461716344777034, 0.6372678943312986, 0.4750638745121727, 0.16826207513956837, 0.32599809225311627, 0.32074312155761486, 0.1169122019453771, 0.12132923677316865, 0.14837164077117582, 0.1567402440833463, 0.13905363674616278, 0.1412050563092705, 0.14496641807138766, 0.1484855502850846, 0.9137351643874696, 0.8921539853788645, 0.968054960917997, 0.9477823583548032, 0.9417929500098434, 0.9399950175423587, 0.9588633653602251, 0.9658294499656681, 0.9039422387120235, 0.322131582468007, 0.18290863474706842, 0.22544436368597276, 0.1566533088370774, 0.2827718899421501, 0.43505224114417185, 0.24830776846941216, 0.354261317867578, 0.34125506432729913, 0.21979893363148184, 0.2273508630754092, 0.22571063028023197, 0.9368914589985954, 0.9136282977042464, 0.36914235211324786, 0.8952505360587613, 0.37048046027602277, 0.9390108672826705, 0.13430051091084372, 0.19411142278596583, 0.1524861138910426, 0.27186910466041503, 0.3543554964036467, 0.1598178569862615, 0.13239098060921484, 0.14294753023467544, 0.1931275516777996, 0.21467126343084397, 0.12971546332838557, 0.17350405432644234, 0.3852563050642781, 0.13211603745019673, 0.8173072777660048, 0.15382788491297217, 0.15224153388705652, 0.24269486648530603, 9.999999999998899e-05, 0.09879464808122118, 0.24130612760365466, 0.0972669659636125, 0.26275296393775605, 0.04391081967095145, 0.07313841947917388, 0.21416225801793598, 0.14840344172234332, 0.26749532971499346, 0.16997359681984325, 0.14750471535846266, 0.14626377478773134, 0.16628049328704786, 0.12352142535522248, 0.13658675595218506, 0.1635039190947688, 0.14555226255363718, 0.17236306509106247, 0.2180377858431225, 0.10231485131137674, 0.11633684680306255, 0.19562922681298955, 0.08711987592153525, 0.16010264511135464, 0.17161747501550995, 0.12278012652694337, 0.2704514264704222, 0.26433281767348504, 0.3422620635178719, 0.32805837572134455, 0.2024200981667562, 0.4901367152990104, 0.24386026945752992, 0.3537724356562101, 0.19947106939892045, 0.5720059625415195, 0.6305878827919105, 0.5265710212740908, 0.5732016427097786, 0.5203591670145427, 0.77156015163096, 0.6364709164063472, 0.7502418459356834, 0.6635917278442405, 0.13660205277473925, 0.11932296758078631, 0.1604682552460479, 0.4296272010123604, 0.1290050923787045, 0.13412475351031738, 0.13293181555231603, 0.13082766771676557, 0.1623565125901616, 0.675034463868936, 0.15658182184528746, 0.23714548348515596, 0.3067027654923078, 0.17695489602363434, 0.16789040128372013, 0.1611872447208429, 0.21061790107685552, 0.26682125940387846, 0.7307816085712762, 0.4852576710746056, 0.5775357780666704, 0.5042079487989836, 0.234670781381339, 0.374383130706765, 0.6532361296356162, 0.7526315568221078, 0.5885354533026215, 0.2975694210324339, 0.6882506026533357, 0.5786478189961899, 0.4370390010710965, 0.3491776756585867, 0.5026470611186212, 0.20095326495088073, 0.5138917739996451, 0.5470406799875925, 0.23031310432406893, 0.18898020101144586, 0.2328545413053844, 0.2120855177541261, 0.1816945169166363, 0.19984311824539158, 0.21461185001577388, 0.21358571686076788, 0.20385353302425846, 0.7084634409806542, 0.2452561617553397, 0.22010957842741197, 0.7308141211448924, 0.20794985488522044, 0.24470644021759314, 0.7779234331732755, 0.24707081561477717, 0.7029822022896088, 0.1661071190402028, 0.1639516950559491, 0.1536622945711974, 0.1788678524058338, 0.19391538910180384, 0.17827869264738727, 0.16165419485156685, 0.16731909248614651, 0.16217820703179786, 0.9095369833194571, 0.16960709660990247, 0.21240095422702399, 0.27847681453645723, 0.20976465129198363, 0.44468092050434493, 0.12601771915147708, 0.21214813212878003, 0.19425097813825454, 0.20536128741536763, 0.21294562740303513, 0.22359656089528201, 0.20834844403652597, 0.21445770536846076, 0.18442849477273837, 0.21679568187196396, 0.19901097922342836, 0.2056979624912526, 0.09093973489126506, 0.09556759645819568, 0.0912988535179815, 0.09174830014087343, 0.09894153820942897, 0.07321689612048399, 0.09528737088107042, 0.0970135988843438, 0.08340497601449115]}, "mutation_prompt": null}
{"id": "1ace3bc7-333e-47f5-a225-0dc16a69ab3f", "solution": "import numpy as np\n\nclass RefinedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def refined_differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                    # Refined strategy: Adjust mutation factor F and crossover rate CR\n                    F = 0.5 + 0.5 * np.random.rand()\n                    CR = 0.9 + 0.1 * np.random.rand()\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = constrain(a + F * (b - c))\n                    crossover = np.random.rand(self.dim) < CR\n                    trial = np.where(crossover, mutant, pop[i])\n                    f_trial = func(trial)\n                    if f_trial < fitness[i]:\n                        pop[i] = trial\n                        fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def refined_particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n\n                    # Refined strategy: Update gbest based on the best fitness found\n                    new_gbest = pbest[np.argmin(pbest_fit)]\n                    if func(new_gbest) < func(gbest):\n                        gbest = new_gbest\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.refined_differential_evolution(func, bounds) + self.refined_particle_swarm_optimization(func, bounds)", "name": "RefinedNovelMetaheuristicAlgorithm", "description": "A hybrid optimization algorithm combining differential evolution and particle swarm optimization with refined strategies to improve global exploration and exploitation efficiency.", "configspace": "", "generation": 96, "fitness": 0.4156331981148291, "feedback": "The algorithm RefinedNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.29.", "error": "", "parent_id": "e13090e8-8edd-492a-bdd8-04956424b81e", "metadata": {"aucs": [0.8928725505118514, 0.9201286259686388, 0.9274287333235041, 0.9129056395620462, 0.9155883594948409, 0.9182853726578574, 0.9083328827293542, 0.9145189890022014, 0.9029652489282506, 0.8526665272349963, 0.8539085483499101, 0.8557995145096399, 0.8586234900055347, 0.8494156178116018, 0.7872179171288294, 0.8614516584854516, 0.8612750066790622, 0.8338088681938374, 0.17497437446356978, 0.1477676626498433, 0.16805353534590428, 0.1608961358067338, 0.16642704123334096, 0.1792410110678011, 0.17387743956886648, 0.1554834104285424, 0.14772266397542444, 0.1197103137767983, 0.11770463808631848, 0.14619791567722273, 0.152970597845973, 0.11796782092445735, 0.13079030915235546, 0.10719277836586316, 0.13902354623183433, 0.13913641584253966, 0.9508043733847126, 0.9620342866378041, 0.9215106181868857, 0.955369923045446, 0.9648666750452852, 0.9267268279493107, 0.9551687727155644, 0.9458250913041707, 0.9266384758164387, 0.7302772536179624, 0.7682985746602178, 0.6768341339307131, 0.7286541186455187, 0.745731247543216, 0.6779926869648829, 0.7217839533371422, 0.5489354818824534, 0.6847038240311211, 0.9208854589578733, 0.22664204231483742, 0.9051628044734269, 0.8854930732871162, 0.8608649625691318, 0.866083646792227, 0.9068136017292127, 0.9229547302378818, 0.9058735658727974, 0.17487300100113368, 0.2879845022472608, 0.30175535071045856, 0.7110449924826898, 0.4397627442895977, 0.21205051672845998, 0.17301053505746078, 0.19178506726458722, 0.6337663924195526, 0.2868995276816937, 0.13216578089381603, 0.2471411164878431, 0.2006450567378828, 0.2779782264125126, 0.20899469779274538, 0.16818597177386785, 0.23411489650721695, 0.508475513287775, 0.03472844717094559, 0.802717558360058, 0.14834947850504943, 0.1789018622082289, 0.15554065856651178, 0.1342169925453378, 0.30796784437978464, 0.1979782579148709, 0.19985518061982777, 0.46485982860358877, 0.22442020009670283, 0.2506256174553372, 0.3277655083256955, 0.35947704287974414, 0.30614360441394317, 0.6431409819929086, 0.5209557502993443, 0.46288276346436985, 0.1672150684029413, 0.1509298990196365, 0.283301054391739, 0.1735800077359434, 0.14290365411834083, 0.12299814780521867, 0.19841709780322048, 0.1393605757150721, 0.21279673179793612, 0.3680169984488212, 0.47514449646642654, 0.4533440171198354, 0.4130139039382624, 0.40768552779460343, 0.5653311569231214, 0.6045322437752518, 0.4273928634488531, 0.29054926153383254, 0.6813587934110108, 0.5986375597294655, 0.6612008025037616, 0.6402986056558718, 0.8886387971386625, 0.5657406225352042, 0.7175407313907632, 0.6745537959279744, 0.6821671852677706, 0.12260973091658922, 0.13932880091519384, 0.13697734584258991, 0.14087121278417303, 0.14025211874052423, 0.1394271930197558, 0.14919534359620212, 0.10809766850158953, 0.1284992086987402, 0.16543622827681448, 0.2300430797409423, 0.2066379466617968, 0.36092375459512427, 0.22178494686902728, 0.14670510247640378, 0.2499449910665258, 0.16673497858834674, 0.256175021770651, 0.7127496146320479, 0.7105326102625242, 0.660551075274648, 0.5359378154515995, 0.6221087345412484, 0.7478433918341655, 0.7005009065174507, 0.501568236512022, 0.5169452006564228, 0.49939413340418026, 0.3158346563978427, 0.4977985930145501, 0.46189337809074105, 0.6481939420145388, 0.6527454845939159, 0.4790695992416846, 0.678339019412123, 0.2120840220168012, 0.23094150966501614, 0.19656543127207937, 0.19874739838712652, 0.21915977835491385, 0.2018277496271106, 0.21530340198267806, 0.21898424811625228, 0.18277494227554947, 0.2084549673334143, 0.21553112866611013, 0.1975346912052358, 0.208349366510323, 0.7837875550621314, 0.7676334202123101, 0.20025801883662797, 0.7294044269991746, 0.1953351139838172, 0.7225646956378424, 0.17164312846865848, 0.18618665966464465, 0.15275062010700136, 0.17812411175369347, 0.18725444732561392, 0.17030495168231152, 0.16650304014312767, 0.7573975922373279, 0.17589939525579634, 0.6150628926212892, 0.2111613167248786, 0.305143002140443, 0.2071528718068011, 0.20504386279550646, 0.16462162510331713, 0.21422253110705725, 0.16253720624955892, 0.21070547728920785, 0.20751254854521584, 0.21018700793894407, 0.19518700484748652, 0.20307602681021597, 0.16521122735999338, 0.2000964023655576, 0.20342079447005434, 0.18989181350279327, 0.20519173511588473, 0.0972242582491275, 0.10015077365291924, 0.10154165306195628, 0.08569816985413325, 0.07872994851125381, 0.08712424858660983, 0.09630874201413009, 0.08567315068979564, 0.08286519036108697]}, "mutation_prompt": null}
{"id": "ca0fb893-e128-448b-ae87-eb0f15ef47ec", "solution": "import numpy as np\n\nclass RefinedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def refined_differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                    # Refined strategy: Adjust mutation factor F and crossover rate CR\n                    F = 0.5 + 0.5 * np.random.rand()\n                    CR = 0.9 + 0.1 * np.random.rand()\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = constrain(a + F * (b - c))\n                    crossover = np.random.rand(self.dim) < CR\n                    trial = np.where(crossover, mutant, pop[i])\n                    f_trial = func(trial)\n                    if f_trial < fitness[i]:\n                        pop[i] = trial\n                        fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def refined_particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n\n                    # Refined strategy: Update gbest based on the best fitness found\n                    new_gbest = pbest[np.argmin(pbest_fit)]\n                    if func(new_gbest) < func(gbest):\n                        gbest = new_gbest\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.refined_differential_evolution(func, bounds) + self.refined_particle_swarm_optimization(func, bounds)", "name": "RefinedNovelMetaheuristicAlgorithm", "description": "A hybrid optimization algorithm combining differential evolution and particle swarm optimization with refined strategies to improve global exploration and exploitation efficiency.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ace3bc7-333e-47f5-a225-0dc16a69ab3f", "metadata": {"aucs": [0.8928725505118514, 0.9201286259686388, 0.9274287333235041, 0.9129056395620462, 0.9155883594948409, 0.9182853726578574, 0.9083328827293542, 0.9145189890022014, 0.9029652489282506, 0.8526665272349963, 0.8539085483499101, 0.8557995145096399, 0.8586234900055347, 0.8494156178116018, 0.7872179171288294, 0.8614516584854516, 0.8612750066790622, 0.8338088681938374, 0.17497437446356978, 0.1477676626498433, 0.16805353534590428, 0.1608961358067338, 0.16642704123334096, 0.1792410110678011, 0.17387743956886648, 0.1554834104285424, 0.14772266397542444, 0.1197103137767983, 0.11770463808631848, 0.14619791567722273, 0.152970597845973, 0.11796782092445735, 0.13079030915235546, 0.10719277836586316, 0.13902354623183433, 0.13913641584253966, 0.9508043733847126, 0.9620342866378041, 0.9215106181868857, 0.955369923045446, 0.9648666750452852, 0.9267268279493107, 0.9551687727155644, 0.9458250913041707, 0.9266384758164387, 0.7302772536179624, 0.7682985746602178, 0.6768341339307131, 0.7286541186455187, 0.745731247543216, 0.6779926869648829, 0.7217839533371422, 0.5489354818824534, 0.6847038240311211, 0.9208854589578733, 0.22664204231483742, 0.9051628044734269, 0.8854930732871162, 0.8608649625691318, 0.866083646792227, 0.9068136017292127, 0.9229547302378818, 0.9058735658727974, 0.17487300100113368, 0.2879845022472608, 0.30175535071045856, 0.7110449924826898, 0.4397627442895977, 0.21205051672845998, 0.17301053505746078, 0.19178506726458722, 0.6337663924195526, 0.2868995276816937, 0.13216578089381603, 0.2471411164878431, 0.2006450567378828, 0.2779782264125126, 0.20899469779274538, 0.16818597177386785, 0.23411489650721695, 0.508475513287775, 0.03472844717094559, 0.802717558360058, 0.14834947850504943, 0.1789018622082289, 0.15554065856651178, 0.1342169925453378, 0.30796784437978464, 0.1979782579148709, 0.19985518061982777, 0.46485982860358877, 0.22442020009670283, 0.2506256174553372, 0.3277655083256955, 0.35947704287974414, 0.30614360441394317, 0.6431409819929086, 0.5209557502993443, 0.46288276346436985, 0.1672150684029413, 0.1509298990196365, 0.283301054391739, 0.1735800077359434, 0.14290365411834083, 0.12299814780521867, 0.19841709780322048, 0.1393605757150721, 0.21279673179793612, 0.3680169984488212, 0.47514449646642654, 0.4533440171198354, 0.4130139039382624, 0.40768552779460343, 0.5653311569231214, 0.6045322437752518, 0.4273928634488531, 0.29054926153383254, 0.6813587934110108, 0.5986375597294655, 0.6612008025037616, 0.6402986056558718, 0.8886387971386625, 0.5657406225352042, 0.7175407313907632, 0.6745537959279744, 0.6821671852677706, 0.12260973091658922, 0.13932880091519384, 0.13697734584258991, 0.14087121278417303, 0.14025211874052423, 0.1394271930197558, 0.14919534359620212, 0.10809766850158953, 0.1284992086987402, 0.16543622827681448, 0.2300430797409423, 0.2066379466617968, 0.36092375459512427, 0.22178494686902728, 0.14670510247640378, 0.2499449910665258, 0.16673497858834674, 0.256175021770651, 0.7127496146320479, 0.7105326102625242, 0.660551075274648, 0.5359378154515995, 0.6221087345412484, 0.7478433918341655, 0.7005009065174507, 0.501568236512022, 0.5169452006564228, 0.49939413340418026, 0.3158346563978427, 0.4977985930145501, 0.46189337809074105, 0.6481939420145388, 0.6527454845939159, 0.4790695992416846, 0.678339019412123, 0.2120840220168012, 0.23094150966501614, 0.19656543127207937, 0.19874739838712652, 0.21915977835491385, 0.2018277496271106, 0.21530340198267806, 0.21898424811625228, 0.18277494227554947, 0.2084549673334143, 0.21553112866611013, 0.1975346912052358, 0.208349366510323, 0.7837875550621314, 0.7676334202123101, 0.20025801883662797, 0.7294044269991746, 0.1953351139838172, 0.7225646956378424, 0.17164312846865848, 0.18618665966464465, 0.15275062010700136, 0.17812411175369347, 0.18725444732561392, 0.17030495168231152, 0.16650304014312767, 0.7573975922373279, 0.17589939525579634, 0.6150628926212892, 0.2111613167248786, 0.305143002140443, 0.2071528718068011, 0.20504386279550646, 0.16462162510331713, 0.21422253110705725, 0.16253720624955892, 0.21070547728920785, 0.20751254854521584, 0.21018700793894407, 0.19518700484748652, 0.20307602681021597, 0.16521122735999338, 0.2000964023655576, 0.20342079447005434, 0.18989181350279327, 0.20519173511588473, 0.0972242582491275, 0.10015077365291924, 0.10154165306195628, 0.08569816985413325, 0.07872994851125381, 0.08712424858660983, 0.09630874201413009, 0.08567315068979564, 0.08286519036108697]}, "mutation_prompt": null}
{"id": "a728658f-6197-453e-b3e1-befa9878d73c", "solution": "import numpy as np\n\nclass RefinedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def refined_differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                    # Refined strategy: Adjust mutation factor F and crossover rate CR\n                    F = 0.5 + 0.5 * np.random.rand()\n                    CR = 0.9 + 0.1 * np.random.rand()\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = constrain(a + F * (b - c))\n                    crossover = np.random.rand(self.dim) < CR\n                    trial = np.where(crossover, mutant, pop[i])\n                    f_trial = func(trial)\n                    if f_trial < fitness[i]:\n                        pop[i] = trial\n                        fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def refined_particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n\n                    # Refined strategy: Update gbest based on the best fitness found\n                    new_gbest = pbest[np.argmin(pbest_fit)]\n                    if func(new_gbest) < func(gbest):\n                        gbest = new_gbest\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.refined_differential_evolution(func, bounds) + self.refined_particle_swarm_optimization(func, bounds)", "name": "RefinedNovelMetaheuristicAlgorithm", "description": "A hybrid optimization algorithm combining differential evolution and particle swarm optimization with refined strategies to improve global exploration and exploitation efficiency.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ace3bc7-333e-47f5-a225-0dc16a69ab3f", "metadata": {"aucs": [0.8928725505118514, 0.9201286259686388, 0.9274287333235041, 0.9129056395620462, 0.9155883594948409, 0.9182853726578574, 0.9083328827293542, 0.9145189890022014, 0.9029652489282506, 0.8526665272349963, 0.8539085483499101, 0.8557995145096399, 0.8586234900055347, 0.8494156178116018, 0.7872179171288294, 0.8614516584854516, 0.8612750066790622, 0.8338088681938374, 0.17497437446356978, 0.1477676626498433, 0.16805353534590428, 0.1608961358067338, 0.16642704123334096, 0.1792410110678011, 0.17387743956886648, 0.1554834104285424, 0.14772266397542444, 0.1197103137767983, 0.11770463808631848, 0.14619791567722273, 0.152970597845973, 0.11796782092445735, 0.13079030915235546, 0.10719277836586316, 0.13902354623183433, 0.13913641584253966, 0.9508043733847126, 0.9620342866378041, 0.9215106181868857, 0.955369923045446, 0.9648666750452852, 0.9267268279493107, 0.9551687727155644, 0.9458250913041707, 0.9266384758164387, 0.7302772536179624, 0.7682985746602178, 0.6768341339307131, 0.7286541186455187, 0.745731247543216, 0.6779926869648829, 0.7217839533371422, 0.5489354818824534, 0.6847038240311211, 0.9208854589578733, 0.22664204231483742, 0.9051628044734269, 0.8854930732871162, 0.8608649625691318, 0.866083646792227, 0.9068136017292127, 0.9229547302378818, 0.9058735658727974, 0.17487300100113368, 0.2879845022472608, 0.30175535071045856, 0.7110449924826898, 0.4397627442895977, 0.21205051672845998, 0.17301053505746078, 0.19178506726458722, 0.6337663924195526, 0.2868995276816937, 0.13216578089381603, 0.2471411164878431, 0.2006450567378828, 0.2779782264125126, 0.20899469779274538, 0.16818597177386785, 0.23411489650721695, 0.508475513287775, 0.03472844717094559, 0.802717558360058, 0.14834947850504943, 0.1789018622082289, 0.15554065856651178, 0.1342169925453378, 0.30796784437978464, 0.1979782579148709, 0.19985518061982777, 0.46485982860358877, 0.22442020009670283, 0.2506256174553372, 0.3277655083256955, 0.35947704287974414, 0.30614360441394317, 0.6431409819929086, 0.5209557502993443, 0.46288276346436985, 0.1672150684029413, 0.1509298990196365, 0.283301054391739, 0.1735800077359434, 0.14290365411834083, 0.12299814780521867, 0.19841709780322048, 0.1393605757150721, 0.21279673179793612, 0.3680169984488212, 0.47514449646642654, 0.4533440171198354, 0.4130139039382624, 0.40768552779460343, 0.5653311569231214, 0.6045322437752518, 0.4273928634488531, 0.29054926153383254, 0.6813587934110108, 0.5986375597294655, 0.6612008025037616, 0.6402986056558718, 0.8886387971386625, 0.5657406225352042, 0.7175407313907632, 0.6745537959279744, 0.6821671852677706, 0.12260973091658922, 0.13932880091519384, 0.13697734584258991, 0.14087121278417303, 0.14025211874052423, 0.1394271930197558, 0.14919534359620212, 0.10809766850158953, 0.1284992086987402, 0.16543622827681448, 0.2300430797409423, 0.2066379466617968, 0.36092375459512427, 0.22178494686902728, 0.14670510247640378, 0.2499449910665258, 0.16673497858834674, 0.256175021770651, 0.7127496146320479, 0.7105326102625242, 0.660551075274648, 0.5359378154515995, 0.6221087345412484, 0.7478433918341655, 0.7005009065174507, 0.501568236512022, 0.5169452006564228, 0.49939413340418026, 0.3158346563978427, 0.4977985930145501, 0.46189337809074105, 0.6481939420145388, 0.6527454845939159, 0.4790695992416846, 0.678339019412123, 0.2120840220168012, 0.23094150966501614, 0.19656543127207937, 0.19874739838712652, 0.21915977835491385, 0.2018277496271106, 0.21530340198267806, 0.21898424811625228, 0.18277494227554947, 0.2084549673334143, 0.21553112866611013, 0.1975346912052358, 0.208349366510323, 0.7837875550621314, 0.7676334202123101, 0.20025801883662797, 0.7294044269991746, 0.1953351139838172, 0.7225646956378424, 0.17164312846865848, 0.18618665966464465, 0.15275062010700136, 0.17812411175369347, 0.18725444732561392, 0.17030495168231152, 0.16650304014312767, 0.7573975922373279, 0.17589939525579634, 0.6150628926212892, 0.2111613167248786, 0.305143002140443, 0.2071528718068011, 0.20504386279550646, 0.16462162510331713, 0.21422253110705725, 0.16253720624955892, 0.21070547728920785, 0.20751254854521584, 0.21018700793894407, 0.19518700484748652, 0.20307602681021597, 0.16521122735999338, 0.2000964023655576, 0.20342079447005434, 0.18989181350279327, 0.20519173511588473, 0.0972242582491275, 0.10015077365291924, 0.10154165306195628, 0.08569816985413325, 0.07872994851125381, 0.08712424858660983, 0.09630874201413009, 0.08567315068979564, 0.08286519036108697]}, "mutation_prompt": null}
{"id": "bbd2ae20-5993-45a3-be4a-8bece3a20dee", "solution": "import numpy as np\n\nclass RefinedNovelMetaheuristicAlgorithm(NovelMetaheuristicAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def refined_differential_evolution(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = constrain(a + 0.5 * (b - c))\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                    # Refined strategy: Adjust mutation factor F and crossover rate CR\n                    F = 0.5 + 0.5 * np.random.rand()\n                    CR = 0.9 + 0.1 * np.random.rand()\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = constrain(a + F * (b - c))\n                    crossover = np.random.rand(self.dim) < CR\n                    trial = np.where(crossover, mutant, pop[i])\n                    f_trial = func(trial)\n                    if f_trial < fitness[i]:\n                        pop[i] = trial\n                        fitness[i] = f_trial\n\n        return pop[np.argmin(fitness)]\n\n    def refined_particle_swarm_optimization(self, func, bounds):\n        def constrain(x):\n            return np.clip(x, bounds[0], bounds[1])\n\n        inertia = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        pop = np.random.uniform(bounds[0], bounds[1], (self.pop_size, self.dim))\n        velocity = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fit = np.array([func(ind) for ind in pop])\n        gbest = pbest[np.argmin(pbest_fit)]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = inertia * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = constrain(pop[i] + velocity[i])\n                fit = func(pop[i])\n                if fit < pbest_fit[i]:\n                    pbest[i] = pop[i]\n                    pbest_fit[i] = fit\n\n                    # Refined strategy: Update gbest based on the best fitness found\n                    new_gbest = pbest[np.argmin(pbest_fit)]\n                    if func(new_gbest) < func(gbest):\n                        gbest = new_gbest\n\n        return gbest\n\n    def __call__(self, func):\n        bounds = (-5.0, 5.0)\n        return self.refined_differential_evolution(func, bounds) + self.refined_particle_swarm_optimization(func, bounds)", "name": "RefinedNovelMetaheuristicAlgorithm", "description": "A hybrid optimization algorithm combining differential evolution and particle swarm optimization with refined strategies to improve global exploration and exploitation efficiency.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ace3bc7-333e-47f5-a225-0dc16a69ab3f", "metadata": {"aucs": [0.8928725505118514, 0.9201286259686388, 0.9274287333235041, 0.9129056395620462, 0.9155883594948409, 0.9182853726578574, 0.9083328827293542, 0.9145189890022014, 0.9029652489282506, 0.8526665272349963, 0.8539085483499101, 0.8557995145096399, 0.8586234900055347, 0.8494156178116018, 0.7872179171288294, 0.8614516584854516, 0.8612750066790622, 0.8338088681938374, 0.17497437446356978, 0.1477676626498433, 0.16805353534590428, 0.1608961358067338, 0.16642704123334096, 0.1792410110678011, 0.17387743956886648, 0.1554834104285424, 0.14772266397542444, 0.1197103137767983, 0.11770463808631848, 0.14619791567722273, 0.152970597845973, 0.11796782092445735, 0.13079030915235546, 0.10719277836586316, 0.13902354623183433, 0.13913641584253966, 0.9508043733847126, 0.9620342866378041, 0.9215106181868857, 0.955369923045446, 0.9648666750452852, 0.9267268279493107, 0.9551687727155644, 0.9458250913041707, 0.9266384758164387, 0.7302772536179624, 0.7682985746602178, 0.6768341339307131, 0.7286541186455187, 0.745731247543216, 0.6779926869648829, 0.7217839533371422, 0.5489354818824534, 0.6847038240311211, 0.9208854589578733, 0.22664204231483742, 0.9051628044734269, 0.8854930732871162, 0.8608649625691318, 0.866083646792227, 0.9068136017292127, 0.9229547302378818, 0.9058735658727974, 0.17487300100113368, 0.2879845022472608, 0.30175535071045856, 0.7110449924826898, 0.4397627442895977, 0.21205051672845998, 0.17301053505746078, 0.19178506726458722, 0.6337663924195526, 0.2868995276816937, 0.13216578089381603, 0.2471411164878431, 0.2006450567378828, 0.2779782264125126, 0.20899469779274538, 0.16818597177386785, 0.23411489650721695, 0.508475513287775, 0.03472844717094559, 0.802717558360058, 0.14834947850504943, 0.1789018622082289, 0.15554065856651178, 0.1342169925453378, 0.30796784437978464, 0.1979782579148709, 0.19985518061982777, 0.46485982860358877, 0.22442020009670283, 0.2506256174553372, 0.3277655083256955, 0.35947704287974414, 0.30614360441394317, 0.6431409819929086, 0.5209557502993443, 0.46288276346436985, 0.1672150684029413, 0.1509298990196365, 0.283301054391739, 0.1735800077359434, 0.14290365411834083, 0.12299814780521867, 0.19841709780322048, 0.1393605757150721, 0.21279673179793612, 0.3680169984488212, 0.47514449646642654, 0.4533440171198354, 0.4130139039382624, 0.40768552779460343, 0.5653311569231214, 0.6045322437752518, 0.4273928634488531, 0.29054926153383254, 0.6813587934110108, 0.5986375597294655, 0.6612008025037616, 0.6402986056558718, 0.8886387971386625, 0.5657406225352042, 0.7175407313907632, 0.6745537959279744, 0.6821671852677706, 0.12260973091658922, 0.13932880091519384, 0.13697734584258991, 0.14087121278417303, 0.14025211874052423, 0.1394271930197558, 0.14919534359620212, 0.10809766850158953, 0.1284992086987402, 0.16543622827681448, 0.2300430797409423, 0.2066379466617968, 0.36092375459512427, 0.22178494686902728, 0.14670510247640378, 0.2499449910665258, 0.16673497858834674, 0.256175021770651, 0.7127496146320479, 0.7105326102625242, 0.660551075274648, 0.5359378154515995, 0.6221087345412484, 0.7478433918341655, 0.7005009065174507, 0.501568236512022, 0.5169452006564228, 0.49939413340418026, 0.3158346563978427, 0.4977985930145501, 0.46189337809074105, 0.6481939420145388, 0.6527454845939159, 0.4790695992416846, 0.678339019412123, 0.2120840220168012, 0.23094150966501614, 0.19656543127207937, 0.19874739838712652, 0.21915977835491385, 0.2018277496271106, 0.21530340198267806, 0.21898424811625228, 0.18277494227554947, 0.2084549673334143, 0.21553112866611013, 0.1975346912052358, 0.208349366510323, 0.7837875550621314, 0.7676334202123101, 0.20025801883662797, 0.7294044269991746, 0.1953351139838172, 0.7225646956378424, 0.17164312846865848, 0.18618665966464465, 0.15275062010700136, 0.17812411175369347, 0.18725444732561392, 0.17030495168231152, 0.16650304014312767, 0.7573975922373279, 0.17589939525579634, 0.6150628926212892, 0.2111613167248786, 0.305143002140443, 0.2071528718068011, 0.20504386279550646, 0.16462162510331713, 0.21422253110705725, 0.16253720624955892, 0.21070547728920785, 0.20751254854521584, 0.21018700793894407, 0.19518700484748652, 0.20307602681021597, 0.16521122735999338, 0.2000964023655576, 0.20342079447005434, 0.18989181350279327, 0.20519173511588473, 0.0972242582491275, 0.10015077365291924, 0.10154165306195628, 0.08569816985413325, 0.07872994851125381, 0.08712424858660983, 0.09630874201413009, 0.08567315068979564, 0.08286519036108697]}, "mutation_prompt": null}
