{"id": "b9d5888c-e385-4f4c-b114-09c57d70489f", "solution": "import numpy as np\n\nclass FuzzyBatOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, gamma=0.9, fmin=0, fmax=1, loudness=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.gamma = gamma\n        self.fmin = fmin\n        self.fmax = fmax\n        self.loudness = loudness\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.velocities = np.zeros((population_size, dim))\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            frequencies = self.fmin + (self.fmax - self.fmin) * np.random.rand(self.population_size)\n            for i in range(self.population_size):\n                rand = np.random.uniform(-1, 1, self.dim)\n                self.velocities[i] += (self.population[i] - self.population[np.random.randint(self.population_size)]) * frequencies[i]\n                if np.random.rand() > self.alpha:\n                    self.velocities[i] = self.velocities[i] * np.exp(self.gamma * t)\n                new_solution = self.population[i] + self.velocities[i]\n                if func(new_solution) < func(self.population[i]) and np.random.rand() < self.loudness:\n                    self.population[i] = new_solution\n        return self.population[np.argmin([func(ind) for ind in self.population])]", "name": "FuzzyBatOptimization", "description": "A novel metaheuristic algorithm called Fuzzy Bat Optimization (FBO) inspired by bat echolocation behavior to search for optimal solutions while balancing exploration and exploitation in black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.04650769328290443, "feedback": "The algorithm FuzzyBatOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.12.", "error": "", "parent_id": null, "metadata": {"aucs": [0.07181364364570886, 0.06431866737955294, 0.08236914018003227, 0.019579586265935367, 0.052663807373400595, 0.02528686401062208, 0.05139080429074816, 0.051628596311483865, 0.06710423975803792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007032389154560614, 0.014660589931378087, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012183156401149864, 9.999999999998899e-05, 0.018244632740415323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019584109309318087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10611848182900852, 0.9948089584865917, 0.9884097985282095, 0.05570625080418845, 0.05936373231303782, 0.9943204644337538, 0.052743846806748707, 0.05640285118341404, 0.07923716958571003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031547499169881643, 9.999999999998899e-05, 9.999999999998899e-05, 0.01128570432758147, 9.999999999998899e-05, 0.10022250663299836, 0.03771825398343609, 0.02178082510346724, 0.014380359421179656, 9.999999999998899e-05, 9.999999999998899e-05, 0.032463136309094476, 9.999999999998899e-05, 0.00990454107027039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09023759494900607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07836113617320539, 0.12382270115302818, 0.14837306154480012, 0.09423774961727682, 0.08049300303886009, 0.09574238586768913, 0.12402899815583424, 0.09714462652123779, 0.12102268080014822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006095761768449837, 9.999999999998899e-05, 0.017590675008137935, 9.999999999998899e-05, 9.999999999998899e-05, 0.02675766679738989, 0.07035147937964248, 0.06735170473055219, 0.10375387849559314, 0.09853410524321404, 0.0658039462614215, 0.05642008154731104, 0.05495888082910971, 0.05528784789016483, 0.07724084482140336, 0.09764774967137113, 0.09624377118846317, 0.10358124896054144, 0.1084671442984243, 0.08298851675706886, 0.08325128544218063, 0.11819725897825906, 0.100118223980045, 0.07953847072410514, 0.03331248507469553, 0.03083918792361784, 0.0346381699677224, 0.08014884892466145, 0.030627633971784918, 0.04356447604603331, 0.05648699256316181, 0.03851292764905212, 0.013622927564267417, 0.0916346253723066, 0.06030676336775975, 0.11086540876062123, 0.10288011956690357, 0.0674604580548066, 0.08239228128971221, 0.12245976138762271, 0.06492341417862701, 0.12616046611933307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04383883184105075, 0.05613155167646122, 0.0604750134365597, 0.06718430858767355, 0.12075449401053884, 0.061712850205561165, 0.06085919533613782, 0.05661570979092789, 0.053668661077050595, 0.04104691020433948, 0.03967287076345216, 0.016399175185323966, 0.018604596831832354, 0.03278256742573671, 0.04550546360150254, 0.018962194954988854, 0.01690607506452524, 0.041417538704489054, 0.13571711755614158, 0.1201673997603151, 0.1476214446392956, 0.10925341160048296, 0.1140377125817511, 0.12464933244832954, 0.10677892549364809, 0.10861499811413722, 0.14685603953125737, 9.999999999998899e-05, 0.012196765396912057, 0.03137868739961758, 0.01525001332180198, 0.005873151039465507, 0.008255010421277964, 0.012712442326479279, 9.999999999998899e-05, 0.007002118599970575]}, "mutation_prompt": null}
{"id": "037b5620-ca60-4a43-bc86-a4bfbe87007e", "solution": "import numpy as np\n\nclass FuzzyBatOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, gamma=0.9, fmin=0, fmax=1, loudness=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.gamma = gamma\n        self.fmin = fmin\n        self.fmax = fmax\n        self.loudness = loudness\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.velocities = np.zeros((population_size, dim))\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            frequencies = self.fmin + (self.fmax - self.fmin) * np.random.rand(self.population_size)\n            for i in range(self.population_size):\n                rand = np.random.uniform(-1, 1, self.dim)\n                self.velocities[i] += (self.population[i] - self.population[np.random.randint(self.population_size)]) * frequencies[i]\n                if np.random.rand() > self.alpha:\n                    self.velocities[i] = self.velocities[i] * np.exp(self.gamma * t)\n                new_solution = self.population[i] + self.velocities[i]\n                if func(new_solution) < func(self.population[i]) and np.random.rand() < self.loudness:\n                    self.population[i] = new_solution\n        return self.population[np.argmin([func(ind) for ind in self.population])]", "name": "FuzzyBatOptimization", "description": "A novel metaheuristic algorithm called Fuzzy Bat Optimization (FBO) inspired by bat echolocation behavior to search for optimal solutions while balancing exploration and exploitation in black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b9d5888c-e385-4f4c-b114-09c57d70489f", "metadata": {"aucs": [0.07181364364570886, 0.06431866737955294, 0.08236914018003227, 0.019579586265935367, 0.052663807373400595, 0.02528686401062208, 0.05139080429074816, 0.051628596311483865, 0.06710423975803792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007032389154560614, 0.014660589931378087, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012183156401149864, 9.999999999998899e-05, 0.018244632740415323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019584109309318087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10611848182900852, 0.9948089584865917, 0.9884097985282095, 0.05570625080418845, 0.05936373231303782, 0.9943204644337538, 0.052743846806748707, 0.05640285118341404, 0.07923716958571003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031547499169881643, 9.999999999998899e-05, 9.999999999998899e-05, 0.01128570432758147, 9.999999999998899e-05, 0.10022250663299836, 0.03771825398343609, 0.02178082510346724, 0.014380359421179656, 9.999999999998899e-05, 9.999999999998899e-05, 0.032463136309094476, 9.999999999998899e-05, 0.00990454107027039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09023759494900607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07836113617320539, 0.12382270115302818, 0.14837306154480012, 0.09423774961727682, 0.08049300303886009, 0.09574238586768913, 0.12402899815583424, 0.09714462652123779, 0.12102268080014822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006095761768449837, 9.999999999998899e-05, 0.017590675008137935, 9.999999999998899e-05, 9.999999999998899e-05, 0.02675766679738989, 0.07035147937964248, 0.06735170473055219, 0.10375387849559314, 0.09853410524321404, 0.0658039462614215, 0.05642008154731104, 0.05495888082910971, 0.05528784789016483, 0.07724084482140336, 0.09764774967137113, 0.09624377118846317, 0.10358124896054144, 0.1084671442984243, 0.08298851675706886, 0.08325128544218063, 0.11819725897825906, 0.100118223980045, 0.07953847072410514, 0.03331248507469553, 0.03083918792361784, 0.0346381699677224, 0.08014884892466145, 0.030627633971784918, 0.04356447604603331, 0.05648699256316181, 0.03851292764905212, 0.013622927564267417, 0.0916346253723066, 0.06030676336775975, 0.11086540876062123, 0.10288011956690357, 0.0674604580548066, 0.08239228128971221, 0.12245976138762271, 0.06492341417862701, 0.12616046611933307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04383883184105075, 0.05613155167646122, 0.0604750134365597, 0.06718430858767355, 0.12075449401053884, 0.061712850205561165, 0.06085919533613782, 0.05661570979092789, 0.053668661077050595, 0.04104691020433948, 0.03967287076345216, 0.016399175185323966, 0.018604596831832354, 0.03278256742573671, 0.04550546360150254, 0.018962194954988854, 0.01690607506452524, 0.041417538704489054, 0.13571711755614158, 0.1201673997603151, 0.1476214446392956, 0.10925341160048296, 0.1140377125817511, 0.12464933244832954, 0.10677892549364809, 0.10861499811413722, 0.14685603953125737, 9.999999999998899e-05, 0.012196765396912057, 0.03137868739961758, 0.01525001332180198, 0.005873151039465507, 0.008255010421277964, 0.012712442326479279, 9.999999999998899e-05, 0.007002118599970575]}, "mutation_prompt": null}
{"id": "b2929055-4a4b-4102-899b-addc318f6424", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 2, "fitness": 0.06488590794382139, "feedback": "The algorithm FireflySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "b9d5888c-e385-4f4c-b114-09c57d70489f", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "2be67070-37d4-485c-ace1-50bbebd27bcf", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "cf71fcec-09fb-4947-be91-2ead1a7c93f2", "solution": "import numpy as np\n\nclass BatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, loudness=0.5, pulse_rate=0.5, alpha=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.alpha = alpha\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.velocities = np.zeros((population_size, dim))\n        self.frequencies = np.zeros(population_size)\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                if np.random.uniform() > self.pulse_rate:\n                    self.frequencies[i] = np.random.uniform()\n                self.velocities[i] += (self.population[i] - self.best_solution) * self.frequencies[i]\n                new_solution = self.population[i] + self.velocities[i]\n                if np.random.uniform() < self.loudness and func(new_solution) < func(self.population[i]):\n                    self.population[i] = new_solution\n                if func(self.population[i]) < func(self.best_solution):\n                    self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "BatAlgorithm", "description": "Introducing Bat Algorithm (BA) which models the echolocation behavior of bats to optimize black box functions in a metaheuristic approach.", "configspace": "", "generation": 4, "fitness": 0.03590529034563741, "feedback": "The algorithm BatAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.08.", "error": "", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.07181330898994998, 0.06431679251783684, 0.0823663224436868, 0.01957813786470397, 0.05266877858311203, 0.025288696900545027, 0.05138120802417201, 0.051628309595026844, 0.09861243313009671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014650383229042885, 9.999999999998899e-05, 9.999999999998899e-05, 0.001218203741411683, 9.999999999998899e-05, 0.01824100199849632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01957044857562762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04516940182244866, 0.033654766459677354, 0.9935013515798439, 0.03907583748563448, 0.046862318115645785, 0.03192773184128039, 0.033266396811741705, 0.04897317140154578, 0.025833791181587018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011277652050201148, 9.999999999998899e-05, 0.10017496909156776, 0.03768056034217038, 0.006478524425501564, 0.004561771729970299, 9.999999999998899e-05, 9.999999999998899e-05, 0.02627668515388637, 9.999999999998899e-05, 0.00989963487477874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07832824083940082, 0.10699451485468547, 0.1535682580902752, 0.09421848602364857, 0.08047729070500265, 0.09565668009633788, 0.12400941518361086, 0.09713521651726642, 0.12098790763126144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006091556324323788, 9.999999999998899e-05, 0.017577169176649643, 9.999999999998899e-05, 9.999999999998899e-05, 0.02674966469608986, 0.07032740246115521, 0.06735064040652183, 0.05468846648487902, 0.09851515928292842, 0.06580412133254798, 0.056416097950454436, 0.05494327979575797, 0.04854198091522777, 0.09255817928305865, 0.09605545395404802, 0.09623090938109091, 0.10356888276275533, 0.10846326979678178, 0.08298797166467886, 0.08323508556841885, 0.11420206329748472, 0.1001088437161568, 0.10600828763558401, 0.033308613563564515, 0.030829012349185336, 0.03462498877036291, 0.044650675553987496, 0.015483300088296903, 0.03712434084440741, 0.05648699256316181, 0.03850232164098377, 0.013108628799350819, 0.0916346253723066, 0.06029382963109742, 0.1108387897582579, 0.10287200049050282, 0.06746350072194751, 0.08958384460148117, 0.12245976138762271, 0.0744277480056964, 0.1261388919108758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04382775420198304, 0.05612482238272509, 0.0606097704345997, 0.06718651143652299, 0.12072873457964339, 0.06167628448090767, 0.06084029961278903, 0.056615725614002965, 0.07866287944057093, 0.038236490165352244, 0.03967402848431323, 0.02164175832517301, 0.018603081350493045, 0.02159539747937711, 0.04570695937102065, 0.018959891689504182, 0.015830524329372708, 0.04140207780948146, 0.10094617558277352, 0.14031790940675415, 0.14756172515949728, 0.10735471808377628, 0.11398226970102077, 0.12465113207635137, 0.10055695637821827, 0.10855238108663434, 0.14683757106953965, 9.999999999998899e-05, 0.01218993606986607, 0.031363489162220315, 9.999999999998899e-05, 0.005870943797043893, 0.008248438830895766, 0.00378771705097114, 9.999999999998899e-05, 0.007001911628415125]}, "mutation_prompt": null}
{"id": "59db2d77-7d22-447e-8cb1-5eff4157882b", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "ea59d7fa-f06c-4e18-9f96-02c1885b70f0", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "62b26ad1-e2df-455d-8ac2-16c07e0c9ed0", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "c429df03-1b6b-4dd1-bb3e-17864f1f4d42", "solution": "import numpy as np\n\nclass BeesAlgorithm:\n    def __init__(self, budget, dim, colony_size=10, elite_sites=3, patch_size=3, neighborhood_size=5):\n        self.budget = budget\n        self.dim = dim\n        self.colony_size = colony_size\n        self.elite_sites = elite_sites\n        self.patch_size = patch_size\n        self.neighborhood_size = neighborhood_size\n        self.colony = np.random.uniform(-5.0, 5.0, (colony_size, dim))\n        self.best_solution = np.copy(self.colony[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.colony_size):\n                site = np.random.randint(self.elite_sites)\n                patch = self.colony[np.random.choice(self.colony_size, self.patch_size, replace=False)]\n                new_solution = self.colony[i] + np.mean(patch, axis=0) - self.colony[i]\n                if func(new_solution) < func(self.colony[i]):\n                    self.colony[i] = new_solution\n            neighborhoods = [np.random.choice(self.colony_size, self.neighborhood_size, replace=False) for _ in range(self.colony_size)]\n            for i in range(self.colony_size):\n                best_neighbor = min(neighborhoods[i], key=lambda x: func(self.colony[x]))\n                if func(self.colony[best_neighbor]) < func(self.best_solution):\n                    self.best_solution = np.copy(self.colony[best_neighbor])\n        return self.best_solution", "name": "BeesAlgorithm", "description": "Introducing Bees Algorithm (BA) that mimics the food foraging behavior of honey bees to efficiently search for optimal solutions in black box optimization problems.", "configspace": "", "generation": 8, "fitness": 0.056012289247843024, "feedback": "The algorithm BeesAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.11212187023566511, 0.12264114604245091, 0.10174105298692315, 0.047082129060995626, 0.052671030410949116, 0.02775595108715112, 0.06913739298222155, 0.09308359061948945, 0.07298345686477137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038497223708065964, 0.016230631161863185, 0.018067178248050708, 0.029262848768967564, 9.999999999998899e-05, 0.03957447852673135, 0.00631462439666064, 0.009780638064979419, 0.011019145292767485, 9.999999999998899e-05, 0.020577846525940968, 0.025473401268089058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006642461249689813, 9.999999999998899e-05, 0.04517470916867583, 0.033657799480335426, 0.04286138859857269, 0.03908208589608786, 0.0468642992317122, 0.030571533465444056, 0.03327159997836682, 0.04897507313221794, 0.025841732940069972, 0.08560991259838702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01550932569372232, 0.009223971470023185, 9.999999999998899e-05, 0.01685052028786682, 9.999999999998899e-05, 0.13729449464354515, 0.059260448826728096, 0.07606357112130335, 0.008541340574148348, 9.999999999998899e-05, 9.999999999998899e-05, 0.040466224297875275, 9.999999999998899e-05, 0.037293981181586444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021638945572328372, 9.999999999998899e-05, 9.999999999998899e-05, 0.074491082505861, 9.999999999998899e-05, 9.999999999998899e-05, 0.06043870665410156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024687728701091483, 0.06899329421562583, 9.999999999998899e-05, 0.021724233044029484, 9.999999999998899e-05, 0.10728486828440142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15220006881352033, 0.12138076518389351, 0.16298701316479858, 0.09450105815003629, 0.11631254226719723, 0.09575938023808117, 0.15788342120341436, 0.20989868998418992, 0.15607138912497498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017390833162315378, 0.015899469745481065, 0.048759973389040034, 0.005950020383854615, 0.010150310183739575, 0.04842157240087641, 0.11506964411274001, 0.1424015262043533, 0.11156163860648471, 0.09852712132463726, 0.09566763417368862, 0.06457424422427027, 0.09501501353595232, 0.08621773519247111, 0.11277796116425853, 0.1313496699708525, 0.13941614240529454, 0.11244857701659006, 0.1352607785846761, 0.15911775906831405, 0.13998134583952193, 0.11643087513588346, 0.1238823964071818, 0.10666997235514186, 0.07442943273626357, 0.08181695430491343, 0.05899422219411976, 0.08537578483693198, 0.10435111114156648, 0.09745095794381087, 0.06471086159321371, 0.061134768280981744, 0.04231162315618042, 0.16300292635959068, 0.15010786962376677, 0.16650295536266224, 0.2162037205575773, 0.18247658713426862, 0.18070790737745335, 0.17046245420961637, 0.14891299369176447, 0.14793630087972487, 0.13157445978974736, 0.10520396384745911, 0.13653913360697334, 0.15152766416502894, 0.0969882509700396, 0.15542826629092432, 0.1565383804314473, 0.13551456251795757, 9.999999999998899e-05, 0.08579627449679805, 0.0759472425260872, 0.07009596214792946, 0.15337750714817922, 0.12075536185855129, 0.07774889235967763, 0.06085761826460834, 0.1653602639977364, 0.06277452223320501, 0.038235491003054234, 0.039671509666887816, 0.04476746233915496, 0.02894926195010994, 0.05251708200704086, 0.04601696137029865, 0.03594729011381881, 0.045970484555453384, 0.059202403885156296, 0.14042574502832927, 0.17075032402375545, 0.15609624768905017, 0.1578960188207853, 0.20068712662740307, 0.15299101316321717, 0.1650744823828978, 0.17201639031154714, 0.1914137932765415, 0.04959317187022749, 0.04306612072081206, 0.0388297185466685, 0.04554510893568675, 0.03674854149609674, 0.06501950676751367, 0.04893475995437524, 0.045619614677885334, 0.047983576529312066]}, "mutation_prompt": null}
{"id": "3224bf5a-0574-437c-8d03-c552e9e23a44", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "dab68bee-002d-4458-bfd0-9e55b9fb035d", "solution": "import numpy as np\n\nclass FireflySwarmOptimization:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            beta = self.beta0 * np.exp(-self.gamma * t)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness = beta / (np.linalg.norm(self.population[j] - self.population[i]) + 1e-6)\n                        self.population[i] += self.alpha * attractiveness * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            if func(self.population[i]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[i])\n        return self.best_solution", "name": "FireflySwarmOptimization", "description": "Introducing Firefly Swarm Optimization (FSO) algorithm which mimics the flashing behavior of fireflies to converge towards optimal solutions in black box optimization problems.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.1678753726663501, 0.10044147837208584, 0.1537879245020609, 0.10177064136219194, 0.07622551108269615, 0.08491803796439312, 0.09555531513945792, 0.13501705942729114, 0.10328153847067878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03341398715164434, 0.02637493015441228, 0.023813997951229293, 0.03822901492931996, 0.040672967168822516, 0.01397920362801508, 0.028373904499656932, 0.023529633533463268, 0.01825680356161752, 0.024897032986645362, 0.012255039034699045, 0.012549822360712448, 0.036557676257412686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090367936862093, 9.999999999998899e-05, 9.999999999998899e-05, 0.06657213878884138, 0.04401773036294032, 0.052059069986726714, 0.06200504089755998, 0.06949576064547414, 0.06970310730290874, 0.0658661029390667, 0.0747593004652003, 0.06702557607654913, 0.08988642313611417, 0.03357207583604849, 0.02003084138223532, 0.04283415956297065, 0.044553188634085195, 0.027517684924686203, 0.006373926376531225, 0.01128661298981437, 9.999999999998899e-05, 0.10738800328185494, 0.073919106401785, 0.1002410394262615, 0.09545553636072068, 0.008924320862423896, 0.05098019077328042, 0.041168255998898506, 0.03500230899127332, 0.1496987413423856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018189628110087952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024768491369031587, 0.013716011864702837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017980671424180805, 0.027865203726478605, 0.0077792760870776245, 0.009665291118559849, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063231894311029935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16419499485495204, 0.13898375217812686, 0.20529207948134087, 0.16558716961879605, 0.1299597053246977, 0.10923686037856828, 0.16193649273165556, 0.18851565899193035, 0.17015444134988733, 9.999999999998899e-05, 0.003055347160201616, 9.999999999998899e-05, 0.04563088482498456, 0.019423760718326966, 0.025152964989811122, 0.032419425618394615, 0.019038031829132107, 0.02924280794419387, 0.1129188342117996, 0.12433214440127671, 0.08026735904381654, 0.09886616332209175, 0.09167670575094866, 0.13154864719871473, 0.13665679271988518, 0.10431676039556403, 0.10835476822912182, 0.1378235197320875, 0.11889814020022926, 0.12111731945562354, 0.14477086624354452, 0.1418691630775022, 0.14617097081135622, 0.13245673747083309, 0.14582571511126385, 0.11689724906941623, 0.11024303077204312, 0.08479054350180415, 0.0581798580972791, 0.09067972193013907, 0.10148538556021047, 0.10181663254937501, 0.071705689009259, 0.0873302860159818, 0.048686123718300944, 0.1447235097723738, 0.1644866166102914, 0.14741704632632757, 0.1570663376174105, 0.1565160509160869, 0.18876926215421164, 0.14071465067020128, 0.14328949825639647, 0.14208349236297657, 0.11268121023775379, 0.1500020784836239, 0.149128931753844, 0.13418830288602734, 0.13604646499037643, 0.137357027012744, 0.1462455274977097, 0.12289111369732453, 0.13288068958625754, 0.08232898255929089, 0.13109748522718623, 0.1454700876586401, 0.14166904396151092, 0.12076337156869488, 0.10618865563531366, 0.11917236218013527, 0.09958594513732644, 0.12154584004858682, 0.14090060854866204, 0.0868099354532682, 0.11297269810287902, 0.1499681389436608, 0.0767289265096206, 0.09471324421523386, 0.0945508561171644, 0.10314267421658463, 0.10585721262920356, 0.17676663449981445, 0.1398792451259644, 0.19943292069263174, 0.17728859897131055, 0.1457376450632779, 0.16267366877202094, 0.14984999195010384, 0.14104211630423502, 0.1618414199856354, 0.04660962165464877, 0.02248882113956019, 0.03682100852077452, 0.05134891354671267, 0.036856450643421135, 0.05341182696902358, 0.04758495094048376, 0.03149026350678319, 0.05379259227264266]}, "mutation_prompt": null}
{"id": "428a223f-8247-46b2-9758-25d32599c891", "solution": "import numpy as np\n\nclass CuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "CuckooSearchAlgorithm", "description": "Introducing the Cuckoo Search Algorithm (CSA) based on the brood parasitism of cuckoo species, where cuckoos lay their eggs in the nests of other bird species to find a suitable host for their eggs.", "configspace": "", "generation": 11, "fitness": 0.08833940284696971, "feedback": "The algorithm CuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "b2929055-4a4b-4102-899b-addc318f6424", "metadata": {"aucs": [0.18332186287862096, 0.18048281427077528, 0.19757069218713552, 0.13271241875853634, 0.25079926670263886, 0.17477760649895446, 0.16570647180177733, 0.17704185631042257, 0.216292526135474, 0.00021553092968829013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05476476027620447, 0.03099796931655563, 0.04129755196848095, 0.07155030541836893, 0.06982288088733823, 0.03604475505975202, 0.0398806234719461, 0.07995042001344987, 0.05332702439682557, 0.06298032298434553, 0.03423140457836349, 0.03859570818812552, 0.060916967290653656, 0.023786884938673203, 0.026521668919279318, 0.023426241919565993, 0.051329318696450854, 0.06944544848386847, 0.0847987848179651, 0.06181397158419222, 0.07497605925166118, 0.06341851304733259, 0.06466853088722146, 0.10676543136186356, 0.06706368360366655, 0.07149087378005248, 0.1055958143856306, 0.028995113887806845, 0.06227173896923399, 0.054286628707843176, 0.03545295310622565, 0.08080576328947209, 0.053699819461902165, 0.03965375390437964, 0.0555959766872125, 0.08736488886175153, 0.12591147291939342, 0.07304595852660534, 0.06705588551953079, 0.07321033579693381, 0.17642603924389533, 0.1284011575648656, 0.08319370731880171, 0.06538355983853039, 0.07800437877328514, 9.999999999998899e-05, 0.005485224115178267, 0.00034387184517603586, 9.999999999998899e-05, 0.02220350385026648, 0.055188466465294406, 0.059854345068877546, 0.09227989736001874, 0.010041374322560692, 0.06666024493644818, 0.07159012952285393, 0.003008298011078714, 0.0695436478976138, 0.05791283850721374, 9.999999999998899e-05, 0.08691804600369724, 0.08631817169924816, 0.005130900952318718, 9.999999999998899e-05, 0.001018441052032193, 9.999999999998899e-05, 0.0011459253328668373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050660377448927485, 0.023729585867729996, 0.06171244495989703, 0.05932535109106596, 0.11263141688005984, 0.0013959431132297695, 0.06645381846795795, 0.05887927716863506, 0.04043746493748224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021191990411408845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045827783050059745, 0.004468336369449433, 0.0013968861429503043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18562881891602934, 0.18592615585355687, 0.17827883410928647, 0.15388230932928004, 0.22305752633876796, 0.1666597853393028, 0.21782229128856, 0.1621198329409853, 0.1966092738154369, 0.05854056292800813, 0.03582283487684146, 0.04711190228983264, 0.038749081643729144, 0.05647220844622902, 0.058292397725287604, 0.027520092915273353, 0.027403950788391196, 0.07011337106218651, 0.128662049908852, 0.16790319134251264, 0.1346380253919931, 0.1852347677794567, 0.11124830116751327, 0.1469387987932378, 0.12052416822347678, 0.13198564353319997, 0.10043356037663576, 0.1492785912853678, 0.17347722509679864, 0.16491149618318446, 0.16038001483626252, 0.17247110735602567, 0.15479472913743997, 0.1503408084341321, 0.15097324189474925, 0.16749489949318574, 0.07703440626162916, 0.09298133209822079, 0.11228223092882272, 0.09612706107789504, 0.14360859775498536, 0.087151947981289, 0.09670002387905774, 0.09329522306507099, 0.09079383133667485, 0.3034609166313329, 0.15920559525678202, 0.15315762933669053, 0.16648148987518196, 0.14634104250935964, 0.1524235204617509, 0.15629464880676824, 0.17089083326665955, 0.15577358318098, 0.08822330388461797, 0.08511896943334829, 0.1318036174332401, 0.11818101493081468, 0.1225207254494719, 0.08908976817978287, 0.08954886242496085, 0.09981552096622293, 0.1076692423211898, 0.11491419398164604, 0.13216960391089783, 0.11716494192261906, 0.1182306508414418, 0.5464770994465316, 0.1637242645796414, 0.15423964390257383, 0.25139121008950593, 0.11512888112078778, 0.16453710733736748, 0.10054220361764732, 0.13334763981456177, 0.13780593450793255, 0.12894338692011187, 0.14230022141443155, 0.12695902634071976, 0.12460612297780405, 0.11518076712060321, 0.18774316638581345, 0.188284953499521, 0.18818108323695537, 0.19380455278751052, 0.19488441348720553, 0.19031306752924793, 0.18087767463381044, 0.20293655451639248, 0.18689378265018686, 0.07759068879914521, 0.06039199052407551, 0.05999749839208712, 0.06565704465804556, 0.06433093658669842, 0.044382072249322335, 0.0481413521351477, 0.04886608347228483, 0.05991610486557242]}, "mutation_prompt": null}
{"id": "1ed1878a-dafc-4c6f-831c-b23e832adcce", "solution": "import numpy as np\n\nclass CuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "CuckooSearchAlgorithm", "description": "Introducing the Cuckoo Search Algorithm (CSA) based on the brood parasitism of cuckoo species, where cuckoos lay their eggs in the nests of other bird species to find a suitable host for their eggs.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "428a223f-8247-46b2-9758-25d32599c891", "metadata": {"aucs": [0.18332186287862096, 0.18048281427077528, 0.19757069218713552, 0.13271241875853634, 0.25079926670263886, 0.17477760649895446, 0.16570647180177733, 0.17704185631042257, 0.216292526135474, 0.00021553092968829013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05476476027620447, 0.03099796931655563, 0.04129755196848095, 0.07155030541836893, 0.06982288088733823, 0.03604475505975202, 0.0398806234719461, 0.07995042001344987, 0.05332702439682557, 0.06298032298434553, 0.03423140457836349, 0.03859570818812552, 0.060916967290653656, 0.023786884938673203, 0.026521668919279318, 0.023426241919565993, 0.051329318696450854, 0.06944544848386847, 0.0847987848179651, 0.06181397158419222, 0.07497605925166118, 0.06341851304733259, 0.06466853088722146, 0.10676543136186356, 0.06706368360366655, 0.07149087378005248, 0.1055958143856306, 0.028995113887806845, 0.06227173896923399, 0.054286628707843176, 0.03545295310622565, 0.08080576328947209, 0.053699819461902165, 0.03965375390437964, 0.0555959766872125, 0.08736488886175153, 0.12591147291939342, 0.07304595852660534, 0.06705588551953079, 0.07321033579693381, 0.17642603924389533, 0.1284011575648656, 0.08319370731880171, 0.06538355983853039, 0.07800437877328514, 9.999999999998899e-05, 0.005485224115178267, 0.00034387184517603586, 9.999999999998899e-05, 0.02220350385026648, 0.055188466465294406, 0.059854345068877546, 0.09227989736001874, 0.010041374322560692, 0.06666024493644818, 0.07159012952285393, 0.003008298011078714, 0.0695436478976138, 0.05791283850721374, 9.999999999998899e-05, 0.08691804600369724, 0.08631817169924816, 0.005130900952318718, 9.999999999998899e-05, 0.001018441052032193, 9.999999999998899e-05, 0.0011459253328668373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050660377448927485, 0.023729585867729996, 0.06171244495989703, 0.05932535109106596, 0.11263141688005984, 0.0013959431132297695, 0.06645381846795795, 0.05887927716863506, 0.04043746493748224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021191990411408845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045827783050059745, 0.004468336369449433, 0.0013968861429503043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18562881891602934, 0.18592615585355687, 0.17827883410928647, 0.15388230932928004, 0.22305752633876796, 0.1666597853393028, 0.21782229128856, 0.1621198329409853, 0.1966092738154369, 0.05854056292800813, 0.03582283487684146, 0.04711190228983264, 0.038749081643729144, 0.05647220844622902, 0.058292397725287604, 0.027520092915273353, 0.027403950788391196, 0.07011337106218651, 0.128662049908852, 0.16790319134251264, 0.1346380253919931, 0.1852347677794567, 0.11124830116751327, 0.1469387987932378, 0.12052416822347678, 0.13198564353319997, 0.10043356037663576, 0.1492785912853678, 0.17347722509679864, 0.16491149618318446, 0.16038001483626252, 0.17247110735602567, 0.15479472913743997, 0.1503408084341321, 0.15097324189474925, 0.16749489949318574, 0.07703440626162916, 0.09298133209822079, 0.11228223092882272, 0.09612706107789504, 0.14360859775498536, 0.087151947981289, 0.09670002387905774, 0.09329522306507099, 0.09079383133667485, 0.3034609166313329, 0.15920559525678202, 0.15315762933669053, 0.16648148987518196, 0.14634104250935964, 0.1524235204617509, 0.15629464880676824, 0.17089083326665955, 0.15577358318098, 0.08822330388461797, 0.08511896943334829, 0.1318036174332401, 0.11818101493081468, 0.1225207254494719, 0.08908976817978287, 0.08954886242496085, 0.09981552096622293, 0.1076692423211898, 0.11491419398164604, 0.13216960391089783, 0.11716494192261906, 0.1182306508414418, 0.5464770994465316, 0.1637242645796414, 0.15423964390257383, 0.25139121008950593, 0.11512888112078778, 0.16453710733736748, 0.10054220361764732, 0.13334763981456177, 0.13780593450793255, 0.12894338692011187, 0.14230022141443155, 0.12695902634071976, 0.12460612297780405, 0.11518076712060321, 0.18774316638581345, 0.188284953499521, 0.18818108323695537, 0.19380455278751052, 0.19488441348720553, 0.19031306752924793, 0.18087767463381044, 0.20293655451639248, 0.18689378265018686, 0.07759068879914521, 0.06039199052407551, 0.05999749839208712, 0.06565704465804556, 0.06433093658669842, 0.044382072249322335, 0.0481413521351477, 0.04886608347228483, 0.05991610486557242]}, "mutation_prompt": null}
{"id": "5a78b9aa-e366-4e23-901b-5187ebbd6f4b", "solution": "import numpy as np\n\nclass CuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "CuckooSearchAlgorithm", "description": "Introducing the Cuckoo Search Algorithm (CSA) based on the brood parasitism of cuckoo species, where cuckoos lay their eggs in the nests of other bird species to find a suitable host for their eggs.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "428a223f-8247-46b2-9758-25d32599c891", "metadata": {"aucs": [0.18332186287862096, 0.18048281427077528, 0.19757069218713552, 0.13271241875853634, 0.25079926670263886, 0.17477760649895446, 0.16570647180177733, 0.17704185631042257, 0.216292526135474, 0.00021553092968829013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05476476027620447, 0.03099796931655563, 0.04129755196848095, 0.07155030541836893, 0.06982288088733823, 0.03604475505975202, 0.0398806234719461, 0.07995042001344987, 0.05332702439682557, 0.06298032298434553, 0.03423140457836349, 0.03859570818812552, 0.060916967290653656, 0.023786884938673203, 0.026521668919279318, 0.023426241919565993, 0.051329318696450854, 0.06944544848386847, 0.0847987848179651, 0.06181397158419222, 0.07497605925166118, 0.06341851304733259, 0.06466853088722146, 0.10676543136186356, 0.06706368360366655, 0.07149087378005248, 0.1055958143856306, 0.028995113887806845, 0.06227173896923399, 0.054286628707843176, 0.03545295310622565, 0.08080576328947209, 0.053699819461902165, 0.03965375390437964, 0.0555959766872125, 0.08736488886175153, 0.12591147291939342, 0.07304595852660534, 0.06705588551953079, 0.07321033579693381, 0.17642603924389533, 0.1284011575648656, 0.08319370731880171, 0.06538355983853039, 0.07800437877328514, 9.999999999998899e-05, 0.005485224115178267, 0.00034387184517603586, 9.999999999998899e-05, 0.02220350385026648, 0.055188466465294406, 0.059854345068877546, 0.09227989736001874, 0.010041374322560692, 0.06666024493644818, 0.07159012952285393, 0.003008298011078714, 0.0695436478976138, 0.05791283850721374, 9.999999999998899e-05, 0.08691804600369724, 0.08631817169924816, 0.005130900952318718, 9.999999999998899e-05, 0.001018441052032193, 9.999999999998899e-05, 0.0011459253328668373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050660377448927485, 0.023729585867729996, 0.06171244495989703, 0.05932535109106596, 0.11263141688005984, 0.0013959431132297695, 0.06645381846795795, 0.05887927716863506, 0.04043746493748224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021191990411408845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045827783050059745, 0.004468336369449433, 0.0013968861429503043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18562881891602934, 0.18592615585355687, 0.17827883410928647, 0.15388230932928004, 0.22305752633876796, 0.1666597853393028, 0.21782229128856, 0.1621198329409853, 0.1966092738154369, 0.05854056292800813, 0.03582283487684146, 0.04711190228983264, 0.038749081643729144, 0.05647220844622902, 0.058292397725287604, 0.027520092915273353, 0.027403950788391196, 0.07011337106218651, 0.128662049908852, 0.16790319134251264, 0.1346380253919931, 0.1852347677794567, 0.11124830116751327, 0.1469387987932378, 0.12052416822347678, 0.13198564353319997, 0.10043356037663576, 0.1492785912853678, 0.17347722509679864, 0.16491149618318446, 0.16038001483626252, 0.17247110735602567, 0.15479472913743997, 0.1503408084341321, 0.15097324189474925, 0.16749489949318574, 0.07703440626162916, 0.09298133209822079, 0.11228223092882272, 0.09612706107789504, 0.14360859775498536, 0.087151947981289, 0.09670002387905774, 0.09329522306507099, 0.09079383133667485, 0.3034609166313329, 0.15920559525678202, 0.15315762933669053, 0.16648148987518196, 0.14634104250935964, 0.1524235204617509, 0.15629464880676824, 0.17089083326665955, 0.15577358318098, 0.08822330388461797, 0.08511896943334829, 0.1318036174332401, 0.11818101493081468, 0.1225207254494719, 0.08908976817978287, 0.08954886242496085, 0.09981552096622293, 0.1076692423211898, 0.11491419398164604, 0.13216960391089783, 0.11716494192261906, 0.1182306508414418, 0.5464770994465316, 0.1637242645796414, 0.15423964390257383, 0.25139121008950593, 0.11512888112078778, 0.16453710733736748, 0.10054220361764732, 0.13334763981456177, 0.13780593450793255, 0.12894338692011187, 0.14230022141443155, 0.12695902634071976, 0.12460612297780405, 0.11518076712060321, 0.18774316638581345, 0.188284953499521, 0.18818108323695537, 0.19380455278751052, 0.19488441348720553, 0.19031306752924793, 0.18087767463381044, 0.20293655451639248, 0.18689378265018686, 0.07759068879914521, 0.06039199052407551, 0.05999749839208712, 0.06565704465804556, 0.06433093658669842, 0.044382072249322335, 0.0481413521351477, 0.04886608347228483, 0.05991610486557242]}, "mutation_prompt": null}
{"id": "45941f0f-101c-4cfa-82c8-f5a8f8a98ca6", "solution": "import numpy as np\n\nclass CuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "CuckooSearchAlgorithm", "description": "Introducing the Cuckoo Search Algorithm (CSA) based on the brood parasitism of cuckoo species, where cuckoos lay their eggs in the nests of other bird species to find a suitable host for their eggs.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "428a223f-8247-46b2-9758-25d32599c891", "metadata": {"aucs": [0.18332186287862096, 0.18048281427077528, 0.19757069218713552, 0.13271241875853634, 0.25079926670263886, 0.17477760649895446, 0.16570647180177733, 0.17704185631042257, 0.216292526135474, 0.00021553092968829013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05476476027620447, 0.03099796931655563, 0.04129755196848095, 0.07155030541836893, 0.06982288088733823, 0.03604475505975202, 0.0398806234719461, 0.07995042001344987, 0.05332702439682557, 0.06298032298434553, 0.03423140457836349, 0.03859570818812552, 0.060916967290653656, 0.023786884938673203, 0.026521668919279318, 0.023426241919565993, 0.051329318696450854, 0.06944544848386847, 0.0847987848179651, 0.06181397158419222, 0.07497605925166118, 0.06341851304733259, 0.06466853088722146, 0.10676543136186356, 0.06706368360366655, 0.07149087378005248, 0.1055958143856306, 0.028995113887806845, 0.06227173896923399, 0.054286628707843176, 0.03545295310622565, 0.08080576328947209, 0.053699819461902165, 0.03965375390437964, 0.0555959766872125, 0.08736488886175153, 0.12591147291939342, 0.07304595852660534, 0.06705588551953079, 0.07321033579693381, 0.17642603924389533, 0.1284011575648656, 0.08319370731880171, 0.06538355983853039, 0.07800437877328514, 9.999999999998899e-05, 0.005485224115178267, 0.00034387184517603586, 9.999999999998899e-05, 0.02220350385026648, 0.055188466465294406, 0.059854345068877546, 0.09227989736001874, 0.010041374322560692, 0.06666024493644818, 0.07159012952285393, 0.003008298011078714, 0.0695436478976138, 0.05791283850721374, 9.999999999998899e-05, 0.08691804600369724, 0.08631817169924816, 0.005130900952318718, 9.999999999998899e-05, 0.001018441052032193, 9.999999999998899e-05, 0.0011459253328668373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050660377448927485, 0.023729585867729996, 0.06171244495989703, 0.05932535109106596, 0.11263141688005984, 0.0013959431132297695, 0.06645381846795795, 0.05887927716863506, 0.04043746493748224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021191990411408845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045827783050059745, 0.004468336369449433, 0.0013968861429503043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18562881891602934, 0.18592615585355687, 0.17827883410928647, 0.15388230932928004, 0.22305752633876796, 0.1666597853393028, 0.21782229128856, 0.1621198329409853, 0.1966092738154369, 0.05854056292800813, 0.03582283487684146, 0.04711190228983264, 0.038749081643729144, 0.05647220844622902, 0.058292397725287604, 0.027520092915273353, 0.027403950788391196, 0.07011337106218651, 0.128662049908852, 0.16790319134251264, 0.1346380253919931, 0.1852347677794567, 0.11124830116751327, 0.1469387987932378, 0.12052416822347678, 0.13198564353319997, 0.10043356037663576, 0.1492785912853678, 0.17347722509679864, 0.16491149618318446, 0.16038001483626252, 0.17247110735602567, 0.15479472913743997, 0.1503408084341321, 0.15097324189474925, 0.16749489949318574, 0.07703440626162916, 0.09298133209822079, 0.11228223092882272, 0.09612706107789504, 0.14360859775498536, 0.087151947981289, 0.09670002387905774, 0.09329522306507099, 0.09079383133667485, 0.3034609166313329, 0.15920559525678202, 0.15315762933669053, 0.16648148987518196, 0.14634104250935964, 0.1524235204617509, 0.15629464880676824, 0.17089083326665955, 0.15577358318098, 0.08822330388461797, 0.08511896943334829, 0.1318036174332401, 0.11818101493081468, 0.1225207254494719, 0.08908976817978287, 0.08954886242496085, 0.09981552096622293, 0.1076692423211898, 0.11491419398164604, 0.13216960391089783, 0.11716494192261906, 0.1182306508414418, 0.5464770994465316, 0.1637242645796414, 0.15423964390257383, 0.25139121008950593, 0.11512888112078778, 0.16453710733736748, 0.10054220361764732, 0.13334763981456177, 0.13780593450793255, 0.12894338692011187, 0.14230022141443155, 0.12695902634071976, 0.12460612297780405, 0.11518076712060321, 0.18774316638581345, 0.188284953499521, 0.18818108323695537, 0.19380455278751052, 0.19488441348720553, 0.19031306752924793, 0.18087767463381044, 0.20293655451639248, 0.18689378265018686, 0.07759068879914521, 0.06039199052407551, 0.05999749839208712, 0.06565704465804556, 0.06433093658669842, 0.044382072249322335, 0.0481413521351477, 0.04886608347228483, 0.05991610486557242]}, "mutation_prompt": null}
{"id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 15, "fitness": 0.11927287284342736, "feedback": "The algorithm EnhancedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "428a223f-8247-46b2-9758-25d32599c891", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "f4cdd3d1-b959-4b47-be8b-19128ca3c560", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "d021eaae-e8a3-4bc7-b486-a9196d517bfe", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "213d4ac2-6bb7-4f04-a8b8-e55088846fcc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "ad78da66-cfb9-41d5-9145-0e0c1c0dd777", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "f83279c3-786a-4619-b46f-29c625a87ed9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "defcac23-75e0-4b1e-8a90-46740a8d58d3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "839a1509-5bbc-405e-a0a3-b8fe0490f456", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "34c3f869-d1d5-4cce-a45b-1ac6ee4a531a", "solution": "import numpy as np\n\nclass DynamicStepSizeEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n                self.alpha *= 0.99  # Dynamic step size adaptation\n        return self.best_solution", "name": "DynamicStepSizeEnhancedCuckooSearchAlgorithm", "description": "Improving Enhanced Cuckoo Search Algorithm by incorporating a dynamic learning rate adaptation mechanism to enhance convergence speed and solution quality.", "configspace": "", "generation": 23, "fitness": 0.11927287284342736, "feedback": "The algorithm DynamicStepSizeEnhancedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "3fbe9e0f-325a-4ce0-81ac-009187a7c516", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "56c8ec5b-c6e6-4771-9d68-34d1cd421889", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "7785aab3-f761-4289-830e-17898f5da84c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "adcfa3a2-5efd-47fe-b6aa-488ab9d89036", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "b62945df-facd-43dd-ba7b-9dee6aa6f795", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "193a59d3-2304-44e2-92e2-d708ab88d10b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "4aede8a5-bb34-4f40-afdf-87f446db96a5", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "b97d2ee6-cb1a-4391-a3e8-36561ad44c96", "solution": "import numpy as np\n\nclass ImprovedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "ImprovedCuckooSearchAlgorithm", "description": "Improved Cuckoo Search Algorithm with dynamic step size adaptation and Levy flight for enhanced exploration and exploitation balance in optimization.", "configspace": "", "generation": 31, "fitness": 0.11927287284342736, "feedback": "The algorithm ImprovedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "7f6c5426-4b86-436c-99ab-408f9a270d6c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "3bdf7d70-2ec5-4ee5-8be0-f528452c5aa7", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "32f02bf8-7769-41a4-8c57-d67123a5256e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "91cfaeec-e1f9-41fe-999c-e0c044ad04e2", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "6b64952a-c52a-46fc-b504-67ef109290b7", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "ba16dec7-9f67-4e63-a903-2b770b8f2665", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "7884cd1a-d42a-48fb-bc78-a222c0ed22b8", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "0ce906b8-c943-4ccf-90bd-5976756e9930", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "6301ce37-7e82-45cf-b2e9-a63b672afb0a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "4f63abbe-41bd-4e2a-bb80-0ac0b06a0f68", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "c91641d7-8835-4bff-924d-c3595a341a6c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "6c66ec28-991b-49d6-bcb2-5f9dc2178292", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "131144f8-1b66-402f-b93d-a5e04d379807", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "54742738-7276-417f-b50c-f70ebd8ee047", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def adaptive_levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.adaptive_levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Enhancing Cuckoo Search Algorithm with adaptive levy flight step size and dynamic population update for better exploration-exploitation trade-off.", "configspace": "", "generation": 45, "fitness": 0.11927287284342736, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "4253d271-9294-4892-9479-d5d3e75498d3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "89cb7f3b-8151-4d21-acd4-2849ade118c3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "c1fa8a1e-cdf1-466b-ac78-b26da33f6436", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "b50acc54-3a5d-4141-9de7-cb220bd9f033", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "d8e73178-270d-44b2-8fda-d725832a1571", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "d88c10fa-1a9e-4ab1-8fe8-2029d916ca49", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "8034b872-eb94-43e2-ba40-327118feba4f", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "9d87b2e0-6e6e-47d0-b0da-85f5e18cf943", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "e168dc88-18ba-4540-8e09-2e91845654e9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "039633e4-a3a2-4aa3-a82f-75555e8d46c6", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "704b1a44-4068-4a60-a8e1-d52aad5db51d", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "b8bb0848-c721-4be9-8254-b987a94be727", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "34e008fb-d8cf-43a2-a2e5-b280bb9beb98", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhanced Cuckoo Search Algorithm with enhanced step size adaptation and dynamic population diversity maintenance.", "configspace": "", "generation": 58, "fitness": 0.11927287284342736, "feedback": "The algorithm RefinedEnhancedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "41eb6fd1-819e-4c66-b39a-7ad7e6a53730", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "f3eca727-a662-4aa1-8c8f-c9973b2b2bce", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "106a8120-a4d3-438d-86b8-227d4fc2562b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "a9e4599e-bbc8-4068-a33a-4db2cdb90dfc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "d5b3d7db-06a8-45a5-b1b1-8a7bc5764f56", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "09aa75c8-21dd-4e58-8c58-8c6c60b480c6", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "b9870d4b-223d-4118-86cd-fd17f11ae3fe", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "ae3de530-3d2e-496f-acbc-1fc55195ef8e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "76f29ad1-9553-451a-b299-f32bf8e57b18", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "170f0697-8ecc-4c43-948c-53f4a95ba31c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "c8f06056-5523-44c6-b37a-47a218cd1e06", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "c8024e60-38ed-45ec-845c-a48a3b7a2a69", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "5d75a51b-bca9-4711-8d95-372d7c065a91", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "6ba492f3-52a2-437c-9e06-9362c461326a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "d59936e5-4b35-4f25-9fb4-fe6d49e4ca67", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "ea70a17a-ccc1-49f2-9ae5-d92b95e496e1", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "45761f7c-0033-4f64-968c-a1f3af41731c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "d22f1e65-14a1-44b6-bf37-293eb332837b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "3bea93a2-bcb8-4019-ab01-1de6e17d4e2a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "fbca1948-4abb-45f3-aaf1-84efac4bd508", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "5aaef5cf-1ec5-4c95-b0b3-a6052b5b3c8f", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "eeb90126-50cd-422d-8d3c-de66cf9fc096", "solution": "import numpy as np\n\nclass RefinedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedCuckooSearchAlgorithm", "description": "Refining Cuckoo Search Algorithm by incorporating adaptive step size mechanism and elitism strategy to enhance convergence towards optimal solutions.", "configspace": "", "generation": 80, "fitness": 0.11927287284342736, "feedback": "The algorithm RefinedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "70ca6c9c-0410-4e45-b76e-dbdc3f942298", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "ee812a3a-a490-4f33-b9c8-277ad311a8a4", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "f0b5ad4d-1c93-46e6-9d3a-a10564313a06", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "182e1f71-a890-4f62-b13a-0a5e486484fc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            if func(new_nest) < func(self.population[nest_idx]):\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            if func(new_nest) < func(self.population[replace_idx]):\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            if func(self.population[0]) < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "EnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.284756673770053, 0.32274977634653135, 0.29177340662632945, 0.30978446469243204, 0.3539152753676964, 0.33017776586009673, 0.2491692053141379, 0.2805860575386896, 0.2603569752870213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326931726692764, 0.04312492327759698, 0.0296127492070013, 0.04158560984051196, 0.06954674669492811, 0.0304572313925493, 0.03295415090435294, 0.08462226678698626, 0.11062126246039339, 0.05738586532330847, 0.02020744215661674, 0.055633489050903484, 0.07756874372310252, 0.04745085899176482, 0.037212756785139356, 0.029045259115008437, 0.050907616180172366, 0.042142663455775775, 0.562164503685867, 0.10800178202910682, 0.08857941782237044, 0.480996368294037, 0.11074627929376368, 0.0822217478612185, 0.10025745307448941, 0.723432825641159, 0.12490755048780178, 0.09654160552954871, 0.15297173949758724, 0.13809473610686618, 0.10191760731562716, 0.12884331136972682, 0.05353224557760572, 0.06929522525747833, 0.06456407094996797, 0.041710103132086784, 0.16544710797943918, 0.11612484430684855, 0.08520424995705145, 0.15476087817066364, 0.13157677843235382, 0.08122573404908784, 0.08087235737949017, 0.15837822667183987, 0.13700192742192407, 0.10911535305092457, 0.051920356448742155, 9.999999999998899e-05, 0.07209808323736155, 0.07766439358783062, 0.01305047182322383, 0.0949863400411235, 0.07560831654362077, 0.12858019249127706, 0.10122721268264212, 0.09017013392181694, 0.07378565459234776, 0.06456400629961523, 0.08794972642853771, 0.09432994830903352, 0.10779473227478598, 0.014585349624831712, 0.1003895740442109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012223904980731115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629599792768821, 0.06647329559828963, 0.041728074197900034, 0.05524337170895377, 0.022821468257654076, 0.01771403118537651, 0.05754519655372481, 0.09646190785499109, 0.02594614620264657, 0.03524443841297431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022094598628573103, 0.03500259364482794, 0.015324502590959077, 0.05992762273332264, 0.015408406663666718, 0.03249849367204993, 0.01952658319253664, 0.028581479467890913, 0.07171134321337014, 0.32585351684333974, 0.28212657263801644, 0.2967458615104587, 0.23560574544991364, 0.2768871203829536, 0.28697819745249853, 0.2841084130474163, 0.31238392408144466, 0.3062754846152791, 0.04163750525233423, 0.04661021207196048, 0.06665228750331587, 0.03535535830322423, 0.035037952432918296, 0.08694099676342482, 0.06539021734419181, 0.06520095411574, 0.06382837127932706, 0.15499376418987343, 0.2076453682118632, 0.20326154811884423, 0.16839914979597292, 0.1726912199064905, 0.19037102851528176, 0.13821066342403443, 0.1527463186454293, 0.13904390281852352, 0.1523428473317885, 0.15391183640770578, 0.16776909471767454, 0.18254143584242088, 0.1578210162015381, 0.17234695846592274, 0.17227951946294617, 0.15730017270943641, 0.14748712773061456, 0.13819745649795567, 0.09580954960558608, 0.08967734753445933, 0.09347948273677664, 0.15906726982127462, 0.0929538344767239, 0.12852159726302015, 0.10420108866440458, 0.10443051078441512, 0.15540668886673992, 0.15337990863641482, 0.1548316351416863, 0.15183879240509668, 0.15089142608428607, 0.15977019084183264, 0.14996232907431983, 0.17504816822029357, 0.2067048633942562, 0.15091962250016222, 0.1432400795756935, 0.16520675156458509, 0.1580361083818158, 0.13854728936819483, 0.12639233804800276, 0.15459741939234395, 0.1368403478699438, 0.13622258094536155, 0.4158418821160548, 0.1771150112791121, 0.13765500176128043, 0.1759931512678239, 0.18768564280477695, 0.1529193964240958, 0.26641678135452573, 0.16746217722534462, 0.14231164540634478, 0.2459733146437012, 0.19909577469195883, 0.3680913380012174, 0.3357435037594654, 0.18074393443650805, 0.1256402301431181, 0.14940142211944607, 0.24466139774210716, 0.14152860382275945, 0.17757699037150665, 0.17010927430258693, 0.17425608668138481, 0.14547222797897807, 0.20152452644448549, 0.16568608255142558, 0.1694789006307883, 0.17050650185294292, 0.15468804468882413, 0.060002659755815535, 0.05855921944878806, 0.046430202076088944, 0.06378824207396916, 0.04484098938375902, 0.05384167765613235, 0.047481621801528706, 0.0715811512809722, 0.039697052119840426]}, "mutation_prompt": null}
{"id": "4acab9e9-18dd-4492-947d-a1134ce25365", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 85, "fitness": 0.12244394595443497, "feedback": "The algorithm RefinedEnhancedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "822d0b54-c0fa-4c69-8b79-63c47e16c501", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "094bb672-3cdd-42a5-9e18-8d35be6a26df", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "e7a1ed72-5e65-432f-875f-1f81818b6e1b", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "61dda4f5-49aa-417d-84cc-6093dc3138cb", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "8b3a601d-6158-446d-99a4-52d79c89b554", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "167f8f75-72e5-409f-89df-49ec0988d50f", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "5df2ab5b-3430-4876-bb87-8907653a6e44", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "b75cbf6a-5bd0-42ce-b339-a1909c47c017", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "eae15226-b2e6-457c-bac8-8c800956fcf0", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "e404b8da-71c4-4c58-bd9f-d6e11d40c940", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "29843afa-7098-41bd-967f-f7774e9c60bc", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with further refinement in the update strategy.", "configspace": "", "generation": 95, "fitness": 0.12244394595443497, "feedback": "The algorithm RefinedEnhancedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "bf7ae0ab-5661-4ad5-8b60-4734db7f2ce8", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "0794618a-b814-4763-b04a-b5e0e7edacee", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
{"id": "91fde33a-952f-434e-9fd8-cdf5ba273c04", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            if np.random.rand() < 0.02631578947368421:  # Probabilistic individual line refinement\n                self.population[nest_idx] += np.random.uniform(-0.1, 0.1, self.dim)\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "ProbabilisticRefinedEnhancedCuckooSearchAlgorithm", "description": "Improving Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism combined with a probabilistic approach to refine individual lines for enhanced exploration-exploitation balance during optimization.", "configspace": "", "generation": 98, "fitness": 0.11874305658152869, "feedback": "The algorithm ProbabilisticRefinedEnhancedCuckooSearchAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.3210482316721782, 0.3001663010779183, 0.320607825581276, 0.2488973274985763, 0.3558870248287832, 0.2773373239649686, 0.3317674734296414, 0.30026016627988517, 0.33017338787773476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038741354297726294, 0.05906544955515147, 0.042436023634358166, 0.06942246944781327, 0.08944739417040948, 0.052651948466098886, 0.07939729943618223, 0.04866334700051844, 0.08181317122493204, 0.038461584448582276, 0.03490527300503532, 0.025296236360551116, 0.05297968831423727, 0.024834867418000117, 0.02956601493308897, 0.03135100568571347, 0.06779487526634587, 0.039130455846987156, 0.08340202893628523, 0.11431573219262392, 0.1893121637254349, 0.4054787892550554, 0.0810308757489252, 0.09374141791559709, 0.0960413711664947, 0.08672801083301906, 0.09576648282066269, 0.14835508037047362, 0.10301222377062291, 0.10898261242116591, 0.06899113189786998, 0.10511192829156368, 0.1080098932924548, 0.15545629822246865, 0.1596815338108576, 0.17452108363599195, 0.15846655259457698, 0.16288505507558115, 0.09021018809286485, 0.08396418360433655, 0.3311256884821264, 0.2183761377224378, 0.29884289127993724, 0.14823755384497794, 0.10209001098359549, 0.053408145812312235, 0.11564642357782373, 0.08712511350855401, 0.10161077952450959, 0.12040033224483881, 0.16244767987742847, 0.08778550590678658, 0.007365114426011843, 0.10970825503269166, 0.10358859484453298, 0.07153865860333952, 0.16395686827956013, 0.06764752458356504, 0.07982987475110037, 0.10072695245806063, 0.1097284705740944, 0.12950348543667112, 0.10461075487178062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03394691211372469, 0.023093904387031405, 0.056398472440656766, 0.022778706378219105, 0.013913759989759855, 0.025116038291050247, 0.04190930933648507, 0.031139852999192197, 0.03143455983279242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03315104599809782, 0.029578465270190257, 0.0375047547909908, 0.05532936141212996, 0.03143023800312983, 0.07430689422539127, 0.0380340284805476, 0.04109544304778934, 0.01731088402095371, 0.3227631284197331, 0.30457103519097506, 0.3086949575758535, 0.30030852997270996, 0.2915405952399579, 0.2316771343064058, 0.26932750099775615, 0.29165660119165027, 0.31408583264138834, 0.014692615303752099, 0.046083525473098796, 0.06434365624493987, 0.043741352782650234, 0.04929262771921261, 0.056467786401171005, 0.061465172934306644, 0.07622054523313959, 0.06013537169382144, 0.15306384214926805, 0.15848664227480236, 0.13643055651387603, 0.20034505960168758, 0.1640509573341956, 0.18373160124519294, 0.14394742709572272, 0.14786237187637397, 0.19455977608392216, 0.15062608005198108, 0.15389517270136965, 0.19120222085939864, 0.1970378274718454, 0.24125631797829328, 0.16193669051534343, 0.1797222909947852, 0.23776691103038594, 0.16310249722921566, 0.10572679589861367, 0.08502910413584419, 0.14300142166537355, 0.14325025387573476, 0.15633071223950534, 0.09275512524103724, 0.11742320407400053, 0.13565167554981616, 0.12502429107312707, 0.14657057583123112, 0.13943997368536498, 0.1582634467533064, 0.16273951342032578, 0.14901699906700705, 0.17269972463983008, 0.1533811243981219, 0.14963189897327067, 0.14904372897426843, 0.1516275020440404, 0.14953032728543836, 0.17360016464665518, 0.14156661938505544, 0.13175263214436905, 0.17003899510939413, 0.1401920714895898, 0.15231050544282299, 0.15834070101263353, 0.16642688278585616, 0.14621353713050578, 0.2840222680460982, 0.1766285024309292, 0.19706486820385627, 0.1799747297901957, 0.11801877377259484, 0.510519161353731, 0.15934931476458059, 0.13087054233952444, 0.29813014483023714, 0.14037833658502785, 0.11681958010477633, 0.10320116610878927, 0.19010321808016195, 0.21464948974515397, 0.1575203216055837, 0.1766349993781452, 0.1589783594365508, 0.1608362970996874, 0.17901851047204187, 0.15917786468395, 0.1565572201638208, 0.15925272643782495, 0.1547445825499233, 0.15680984080173765, 0.15929099979622152, 0.04684422529998866, 0.04415834039072364, 0.06861371444003439, 0.05843747545947098, 0.06784717030848386, 0.0544091591575141, 0.08794442343691922, 0.05557767720640183, 0.0524028909847033]}, "mutation_prompt": null}
{"id": "98430174-f061-4d7b-8ec6-dc41573e2311", "solution": "import numpy as np\n\nclass RefinedEnhancedCuckooSearchAlgorithm:\n    def __init__(self, budget, dim, population_size=10, alpha=0.9, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.pa = pa\n        self.population = np.random.uniform(-5.0, 5.0, (population_size, dim))\n        self.best_solution = np.copy(self.population[0])\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step + 0.1 * np.random.normal(0, 1, size=self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            nest_idx = np.random.randint(self.population_size)\n            new_nest = self.population[nest_idx] + self.levy_flight()\n            new_nest_fitness = func(new_nest)\n            nest_fitness = func(self.population[nest_idx])\n            if new_nest_fitness < nest_fitness:\n                self.population[nest_idx] = new_nest\n            replace_idx = np.random.randint(self.population_size)\n            replace_fitness = func(self.population[replace_idx])\n            if new_nest_fitness < replace_fitness:\n                self.population[replace_idx] = new_nest\n            self.population = self.population[np.argsort([func(x) for x in self.population])]\n            self.population[-1] = np.random.uniform(-5.0, 5.0, self.dim)\n            best_fitness = func(self.population[0])\n            if best_fitness < func(self.best_solution):\n                self.best_solution = np.copy(self.population[0])\n        return self.best_solution", "name": "RefinedEnhancedCuckooSearchAlgorithm", "description": "Enhancing Cuckoo Search Algorithm by incorporating a dynamic step size adaptation mechanism to improve exploration-exploitation balance during the search process with refined individual lines.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4acab9e9-18dd-4492-947d-a1134ce25365", "metadata": {"aucs": [0.2946325356538586, 0.32930158284962785, 0.30196656504188235, 0.3165448317714711, 0.35864391917261107, 0.336905273406521, 0.2607914657104431, 0.2897152674380049, 0.2706375170203791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06371861837925485, 0.04359156065332337, 0.03224866815850924, 0.042580946124095354, 0.07061002769002989, 0.03134048521995414, 0.033367543288501667, 0.08582723181370455, 0.11150606239418936, 0.059329219873469285, 0.0220774489223049, 0.05819877757838998, 0.0784176394529279, 0.048421525069115345, 0.03743465133461055, 0.02966549278050057, 0.05157515422653214, 0.0427752562203223, 0.5895322404119232, 0.1140369184277995, 0.0930468656713922, 0.5134363230765159, 0.1141413313083669, 0.08422236294722785, 0.10892886837644622, 0.7407222004814615, 0.15988027496391, 0.10663607218682969, 0.16277378072064785, 0.14630836921400237, 0.10920442938367947, 0.1386640185935919, 0.060273609919440974, 0.07624633627903443, 0.06902135510751728, 0.044785285947729014, 0.16696248897705424, 0.11667177911840987, 0.08552578485332729, 0.16179938613067357, 0.13325674565277967, 0.08636717421379614, 0.0837087324215594, 0.1598188910447107, 0.14035401282888893, 0.11213392042194159, 0.057310934759779775, 9.999999999998899e-05, 0.07612839244907932, 0.08181359875673533, 0.021305195793700493, 0.0995941826325516, 0.08204116268148332, 0.1344672821556009, 0.10894569752698902, 0.09136703315303296, 0.07688897693480501, 0.06839634024870489, 0.09213028405755974, 0.09776402229740111, 0.11175960203015634, 0.02187082933836082, 0.10310928989786394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506590612007874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017632926632561663, 0.06709369004709664, 0.04261671370345266, 0.055767355178097056, 0.023028198954157975, 0.018185370387655664, 0.057699025120938496, 0.09770416743918542, 0.026134096026710907, 0.038004276868578435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02370958639947729, 0.03719480358743821, 0.019552779365963557, 0.0630459529103422, 0.016415679713788323, 0.03521835327897971, 0.021698166757431525, 0.03047483185404476, 0.07397736971325852, 0.331060579004279, 0.28873677671859055, 0.3016255144147615, 0.24396345741749503, 0.28378583926393985, 0.29324412330698246, 0.29382365708772873, 0.3174363140846578, 0.3142587627262031, 0.042163331255517744, 0.047143678594196214, 0.06746422815698239, 0.036398537858659985, 0.035588021198107556, 0.08815393528242821, 0.06654080414085506, 0.06575551187309414, 0.06417104426768838, 0.15675754037481615, 0.2106712737331321, 0.20558344881656376, 0.17058090823258576, 0.177342126365427, 0.19165458382581269, 0.14428541023338404, 0.15450899912687965, 0.14521791803363393, 0.15325830618746272, 0.1562083334291825, 0.16889390630485956, 0.18433659189668639, 0.15919374694118127, 0.17418855628367036, 0.1738421942969144, 0.1583002436049823, 0.14794137298909993, 0.13917295995681123, 0.09871600278155779, 0.09042514631338505, 0.09527102823270794, 0.16218809852778482, 0.09388748371347633, 0.13194963979466645, 0.10539599352277351, 0.105585287742057, 0.15584722356629577, 0.15391298577114043, 0.1552349038230585, 0.15348172215458378, 0.1536553913065576, 0.16116728340763098, 0.15106771225051485, 0.17563367715878397, 0.20764056024791, 0.15400689447546556, 0.14453113257476302, 0.16709854082755626, 0.15974154968661491, 0.14114920470556647, 0.128406423931398, 0.15674159709302127, 0.13928511117831555, 0.1400532319636304, 0.4263730270510402, 0.17794214802128006, 0.13939180820043073, 0.176878208896743, 0.18864417465742656, 0.15382568505915528, 0.28318486656495645, 0.16960316326759106, 0.1439988673567275, 0.25694594519769953, 0.2057924682995399, 0.3764657751453202, 0.33759233066157734, 0.1884924079764242, 0.13085569229891825, 0.15069938493399115, 0.24900576025169985, 0.14450431609716763, 0.1776434208207407, 0.17074429184992024, 0.174835415570049, 0.14604689887616662, 0.20264088817093373, 0.1664845861982419, 0.17002082554131126, 0.171237388382535, 0.15554169103578896, 0.06031022865953106, 0.059020461307585204, 0.04659242292729848, 0.0645067275352249, 0.04544267526078516, 0.05419018614793636, 0.048148618403219046, 0.07207786850130338, 0.04044775180506255]}, "mutation_prompt": null}
