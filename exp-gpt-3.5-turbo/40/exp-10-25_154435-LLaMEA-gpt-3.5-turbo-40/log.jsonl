{"id": "82a9ce10-1392-4adc-9836-1663744c52b6", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.23250551987768986, "feedback": "The algorithm PSO_DIW got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "08e11735-abe5-4253-b9b0-c3c913edaa1d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "0b6f2275-e917-4067-85fd-511e2b4deec1", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "0cbe85f9-0a3b-41f9-99de-3cc0991c58b7", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "9360e225-73ee-4622-8231-a3af8b2aa7a1", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "76472d27-b4f3-4ec0-ad90-2baccb73abe5", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "b21b8b3e-c440-47ab-b015-a731ed7f5aeb", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "cd546aba-eb13-4c16-8471-9fbd4b7573cb", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "453b434b-0ed4-4be3-b890-e3ea0b136a65", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "b7e8969e-b5c6-46f4-b791-fa3a6085f51d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "d022558a-8531-46b7-9613-73a950ed2df5", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "7f051f65-3d36-4988-8ff6-b526468da089", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "88143ca9-252a-46c0-889e-0ca6a94e908c", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "c2f30d27-c3ef-42d8-9d8d-c925d22815f0", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "dd9f4882-7d31-4adc-a10e-2b5406e55b18", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "1ce3e519-9683-4d0e-b8a5-1d222c1da0c0", "solution": "import numpy as np\n\nclass PSO_DE_Hybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n                \n            # Differential Evolution (DE) component\n            for i in range(self.swarm_size):\n                idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                crossover = np.random.rand(self.dim) < 0.5\n                self.particles[i] = np.where(crossover, mutant, self.particles[i])\n\n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DE_Hybrid", "description": "Implement a Hybrid Particle Swarm Optimization with Differential Evolution (PSO-DE) algorithm that combines the exploration capability of DE with the exploitation ability of PSO to enhance convergence performance.", "configspace": "", "generation": 15, "fitness": 0.0913748389889281, "feedback": "The algorithm PSO_DE_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.10221993636761695, 0.11233710489109394, 0.126461959436319, 0.1465558449365102, 0.08484762863004947, 0.11297219100511469, 0.10630728406221734, 0.11305401931600068, 0.1315279474757608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035875696719150585, 0.02382765446421853, 0.005375109906600173, 0.02925920780123903, 0.01645258320197318, 0.006669962766643223, 0.018248263482334326, 0.003911755796125127, 0.011305069403718004, 0.030953637890647534, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.013686673387209747, 0.008772981944242586, 0.017375739432451298, 9.999999999998899e-05, 0.003964751342023898, 0.9390545724995745, 0.958150850028875, 0.9290750702426404, 0.9611472087176872, 0.9706292988840602, 0.925272069579311, 0.9561622650606031, 0.9423768764725056, 0.940299203061664, 0.038720504311639314, 0.0030693937181178743, 0.006083811752796597, 0.031144152846465323, 0.06140526413563052, 0.006446646485351648, 0.027026989749444286, 0.03339342865753858, 0.05173546640499538, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.05080046794512072, 0.038894739192316785, 0.11270943162220737, 0.05931056463008866, 0.10279166856697008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013949943976265922, 9.999999999998899e-05, 9.999999999998899e-05, 0.009384297796828145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16848474339340425, 0.13879659513922615, 0.16293573958061225, 0.12368658141240407, 0.12223388868152907, 0.09580441870675127, 0.16112956940342849, 0.10350983433258809, 0.12708499872362378, 0.02925959799843092, 0.00823117101469073, 9.999999999998899e-05, 0.01235534573078656, 0.013913281718198611, 0.01759993274736349, 0.00203636289482112, 0.028139879926859068, 0.0267656688986897, 0.1072042639216726, 0.08609370886951495, 0.1109015490765709, 0.10598960854547201, 0.10852972522114013, 0.08447720027659456, 0.08808199726801991, 0.0934881431673753, 0.10575375279868715, 0.13963914861486115, 0.11520816104705589, 0.14352810184653642, 0.15387037737192222, 0.11415894518276415, 0.11348036623118041, 0.13837435673155418, 0.17377774300845283, 0.11363346445524236, 0.0693475386686232, 0.06409992399680464, 0.06660545331207757, 0.08196392157717691, 0.06677841020155084, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.1311305596637814, 0.11022350493104771, 0.13345086981233123, 0.12761956863376778, 0.08942506210199486, 0.09774996135806846, 0.16392208955688625, 0.12155810242986786, 0.1261963614278906, 0.13092214613208708, 9.999999999998899e-05, 9.999999999998899e-05, 0.13909824689405892, 9.999999999998899e-05, 0.01799508567495578, 0.12819090098857888, 9.999999999998899e-05, 9.999999999998899e-05, 0.13618594623354552, 0.1201873007709866, 0.16211178196296494, 0.17613916826096643, 0.1207914665021157, 0.07779958571518786, 0.07764970509952696, 0.10815229516784897, 0.07187491815371871, 0.11040265245322212, 0.10051730792859848, 0.07448998541449492, 0.0776840996870255, 0.07772750103385972, 0.0751368507739184, 0.09984989988683046, 0.05961088120268432, 0.050192104454148234, 0.15224251982966286, 0.13566074628586244, 0.14763022729669195, 0.13282557732640032, 0.14243178845406068, 0.13592465950408683, 0.14969714796693134, 0.1438782579950164, 0.15720035605421168, 0.03829316765837465, 0.04353983627464564, 0.031393493129599714, 0.04748249313128794, 0.03425093938292756, 0.023987024871370388, 0.04238215267025569, 0.03613626143330928, 0.0354381771573653]}, "mutation_prompt": null}
{"id": "c28df7b2-f27b-4ed3-8151-c4c1a64bb22c", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "40a7ae27-04e3-4b28-8297-6432952c803a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "f74dc914-e3f2-4a76-a89e-c2370a96c47a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "e830e68c-b86f-4a7d-a395-53d70ca0a30b", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "31c1e052-1b27-4413-b137-2b1408f3ba50", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "4ce53ff5-059f-4fa6-90a7-8a686d2698a8", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "3c8e1c50-e1f0-44a8-a471-50b20540662b", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "71da06ac-1e9e-498b-9c00-fe1f46145cc6", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "9323039e-771e-4842-9a86-528a7056127a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "3bcde4e9-22c5-4517-a3f5-01f9242457b3", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "c10fab97-2d5b-4ddc-97bd-e52e7f6b5946", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "1cc378b4-0ef6-484f-ad9f-eadc1a6e75d1", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "7b6bd63b-fb7e-4088-95fb-d4d98df250d2", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "314cf50c-26cd-4049-b568-32979c95da78", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "8969cb59-b4ff-4e36-8d9b-5999256d6775", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "1b501f36-cba2-4b57-a434-e409a7cfa1eb", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "c533fcbe-fb1a-46d3-835b-6efe960be6d8", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "be48c570-74a4-42a7-84c3-18e434222ef1", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "c8f9b845-731d-43c2-bdac-3e0ae36e9b3a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "e31f4a49-a612-4c70-bf81-5f07833b4540", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "69560014-ee43-45d0-a02d-8d386e0aed1d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "5777134c-230a-4494-bca6-d3a930cafa6d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "0fbe700e-0a57-48d8-8c58-33f13b21dcb7", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "a86f76c7-8586-4411-89a7-ee8baff04060", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "b677db26-bafd-4aa9-b9f3-baeef266c15a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "522f5856-55eb-4924-8bc6-b48d6b0aacfe", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "49df39f9-b8eb-444e-a585-eee324e70af3", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "6588e676-63c3-466a-9a2a-e5b2f5519223", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "17a92c11-33be-4213-9c4f-785f589faa68", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "789fd8cd-627d-43bc-812c-97d796dde2f9", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "dd485630-86d5-4fd8-9942-d89a14cb9b60", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "36a04068-7dcd-40b6-a758-91fe55893d4b", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "b36798cb-00c2-462d-a75e-cc574e69b6f2", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "f694b383-77c8-42af-9ac1-6f85d317c8a6", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "6c711d7c-2996-49d4-9bcf-f647ab48bcfc", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "930848db-351d-429f-898e-b1bbab2e170b", "solution": "import numpy as np\n\nclass Enhanced_PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n\n                if np.random.rand() < 0.35:\n                    self.particles[i] += np.random.uniform(-0.1, 0.1, self.dim)  # Introduce random perturbation\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "Enhanced_PSO_DIW", "description": "Enhance the PSO-DIW algorithm by incorporating a mutation operator that randomly perturbs particles to introduce additional exploration.", "configspace": "", "generation": 51, "fitness": 0.21399477610906695, "feedback": "The algorithm Enhanced_PSO_DIW got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.5046845419662416, 0.5160256946492073, 0.5157293793622695, 0.5551636597983061, 0.49158676883262387, 0.49336258523587406, 0.5011597531600913, 0.4882148089036259, 0.5292270769717624, 0.07730483837399404, 0.0732899213065461, 0.0004882016933995814, 0.005992740264969876, 0.03620729527686961, 0.031369795002949674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1004199844853998, 0.1128531360351015, 0.08619164774298516, 0.10749193703638704, 0.13057629559002892, 0.0916085983573135, 0.07203659324451406, 0.06928243279145208, 0.09264910117690306, 0.11270634444627592, 0.057156980857887896, 0.0787065860511017, 0.11370485420975185, 0.08987856732011112, 0.06779168774758837, 0.03480180683314904, 0.022887889857099775, 0.07872647552334588, 0.7814316215298206, 0.7709436762728552, 0.7166193581817779, 0.693678854164883, 0.7575204125119207, 0.7154248977082415, 0.7099357215879591, 0.7189131852984727, 0.730530516709224, 0.34274938686862544, 0.3054452103401064, 0.2817612259254467, 0.35917961342565685, 0.3249311861123966, 0.3655873923573614, 0.3335381843039775, 0.3156809852562127, 0.3152605536243084, 0.15470228086878435, 0.14831789923730743, 0.13388029258497247, 0.1879212168277875, 0.16262076375674228, 0.13793908144406364, 0.12635849674882915, 0.1419925092958796, 0.16347181189096227, 0.17791828074639437, 0.12262589459699136, 0.13705623050069093, 0.17020061250523288, 0.20888378882418424, 0.14972429225724193, 0.20568152475305468, 0.11576560633444422, 0.2242369297269876, 0.11994396832153964, 0.13339005302172469, 0.19245328593893696, 0.16949025043700872, 0.1551661524862351, 0.12589150952371164, 0.20412183510348036, 0.00017272251079081258, 0.18318378441188043, 0.0328896798207472, 0.029572338235733464, 0.09258409272677726, 0.004115230082301968, 0.009175821554773922, 0.027876624035081843, 0.02027519549991097, 9.999999999998899e-05, 0.05614259844032787, 0.15010536740724745, 0.1035093956305917, 0.09821273365465732, 0.042145813835315904, 0.012398185835025055, 0.04914020312211831, 0.08531898864177634, 0.07145328315638422, 0.14126498094318451, 0.021802882432864545, 0.04932039572574598, 0.05269716765295962, 0.03224232491939838, 0.04235472749243874, 0.02435327046272373, 0.004860209701395113, 0.001211644435143211, 0.0028677842516293683, 0.1411210737004701, 0.06089317572262554, 0.13664560411387117, 0.05332712615873003, 0.13353210221465361, 0.10890360287142753, 0.10877375023639757, 0.07396536383612728, 0.0848071726568802, 0.4510947811662168, 0.445652468141539, 0.46500092861071185, 0.44898668762714855, 0.42892744964292395, 0.4429287475747353, 0.4558759075410541, 0.4235765016755165, 0.4331393059633165, 0.0481998328826061, 0.05864664094903349, 9.999999999998899e-05, 0.10070859869231319, 0.10200697646330936, 0.09962156586330928, 0.1478258189766597, 0.11307131368687151, 0.06861461982911166, 0.18427010577815728, 0.3142117227634398, 0.17553744715313202, 0.13864421800907678, 0.2364313753843157, 0.17871566298170727, 0.18737842046449993, 0.15442064084739981, 0.2878038102844006, 0.16512058853533496, 0.24778344409689324, 0.19105808618999442, 0.2741691012817784, 0.2550027433909745, 0.3269792222991733, 0.2108750193320046, 0.3343900851743338, 0.15005065287792563, 0.19220868509470057, 0.1524358700728864, 0.15382167105258593, 0.20636626906563516, 0.2090486163978459, 0.1503266739627921, 0.18964901480838103, 0.15464536256127936, 0.12686971050786144, 0.18878637074237736, 0.22708627745267174, 0.28640968101058584, 0.20533794375334724, 0.2039739629769044, 0.19838982837972985, 0.22965919421180125, 0.22200843267749626, 0.1959464336410267, 0.17395844621287904, 0.20108742177043548, 0.16840013465384385, 0.1816620783662608, 0.19305620255677503, 0.20262064797640722, 0.17264923642086683, 0.19134156251494883, 0.1891101808929153, 0.12296085585090455, 0.12587457675220048, 0.12841312288162954, 0.7512870091475425, 0.19939107065288508, 0.8529525964358813, 0.1077465716999142, 0.7667490177532991, 0.7836288682872634, 0.5772399688803211, 0.15363377876041073, 0.6018440298288785, 0.6666515484056601, 0.19784885925678108, 0.6449104139942042, 0.29621307661984275, 0.4311398610616717, 0.34796158926965304, 0.17847682830740996, 0.18303381793638618, 0.2007378377429494, 0.18837372979644473, 0.17707775410064353, 0.1803832964559886, 0.17075532908145197, 0.20490296885370007, 0.19815022095729384, 0.07759288780831097, 0.07920982089296036, 0.06775616002363949, 0.07786317100057571, 0.08248221605524109, 0.06444386366213128, 0.07630644291601585, 0.07363030177890773, 0.07979082663563897]}, "mutation_prompt": null}
{"id": "44be0138-8528-47af-ae15-55bfe3830396", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "948efe5c-ffab-497d-a4cc-db5d167e1ece", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "648c96ba-40b0-4725-93b0-e891ac4314a2", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "0282cb2e-291b-40ea-9145-d19f991dfeb9", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "f3d2450a-064d-4b30-83aa-8e7ba52258c4", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "1017b85e-4a58-433a-a0e9-c56cfb03d73a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "539fcfb0-1b5c-4f78-949b-5ae54719a59f", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "15842214-0e28-4177-8478-c6ab3469237c", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "1c09269e-8e94-4265-ba7b-c25863ca93fb", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "2fec626d-2d39-426b-a15e-5d80f2ec08a8", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "8597d531-a954-4bdc-88cf-512aca9c5264", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "df258784-95de-43fb-9a0a-541053330e1d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "13c3eaf5-c88a-4337-8d7c-24cd0856530a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "6589c8b7-2594-48b1-854c-5b817955b9e4", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "92016494-f7a3-43e3-bd6b-5a1080d6bff5", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "7ce138e2-5ef4-43a8-84d6-586abda6068e", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "9a438c06-a369-43e9-8458-a26e90fb455b", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "d7d1d027-3d9e-480b-8c57-e9af3b0e6554", "solution": "import numpy as np\n\nclass PSO_DIW_Levy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                levy = self.levy_flight()\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i]) + levy\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW_Levy", "description": "Enhancing PSO-DIW algorithm by integrating Levy flights for enhanced exploration capabilities", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {}, "mutation_prompt": null}
{"id": "db61dda6-7aed-4b71-941f-7d343c404308", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "b5a1b6dc-560d-434d-a4b2-960d06e7fa93", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "67ed89fd-78f8-46f3-8795-d058eec1d2ff", "solution": "import numpy as np\n\nclass Enhanced_PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n            \n            # Dynamic population size adjustment\n            self.swarm_size = int(30 + 20 * np.exp(-5 * _ / self.budget))\n            if self.swarm_size < 5:\n                self.swarm_size = 5\n\n            self.particles = np.vstack((self.particles, np.random.uniform(-5.0, 5.0, (self.swarm_size - self.particles.shape[0], self.dim))))\n            self.velocities = np.vstack((self.velocities, np.zeros((self.swarm_size - self.velocities.shape[0], self.dim)))\n            self.pbest_positions = np.vstack((self.pbest_positions, np.zeros((self.swarm_size - self.pbest_positions.shape[0], self.dim)))\n            self.pbest_values = np.concatenate((self.pbest_values, np.full(self.swarm_size - len(self.pbest_values), np.inf)))\n            \n        return self.gbest_value", "name": "Enhanced_PSO_DIW", "description": "Enhancing PSO-DIW by incorporating a dynamic population size adjustment strategy.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 45, 13, '            self.pbest_positions = np.vstack((self.pbest_positions, np.zeros((self.swarm_size - self.pbest_positions.shape[0], self.dim)))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 45, 13, '            self.pbest_positions = np.vstack((self.pbest_positions, np.zeros((self.swarm_size - self.pbest_positions.shape[0], self.dim)))\\n'))", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {}, "mutation_prompt": null}
{"id": "013201c0-7ec6-4e9c-a563-85de14003936", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "b4e14a99-11be-4427-8a97-b1a1788f39d0", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "9cc17274-c84f-41de-996a-b3e953562f2d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "dfffe0d3-6fc6-4031-b8a0-1cad94b814c6", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "9c85ee8c-e48f-48e8-afa4-dc6b481c560a", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "6ccad230-dac0-4fd8-bd5a-52b9974af3fa", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "3d664138-bdf6-436c-bb03-f8785349478f", "solution": "import numpy as np\n\nclass PSO_DIW_Enhanced(PSO_DIW):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.max_vel = 0.2\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n            self.c1 = 2.0 + 0.8 * np.exp(-6.0 * _ / self.budget)  # Update cognitive parameter\n            self.c2 = 2.0 - 1.0 * np.exp(-8.0 * _ / self.budget)  # Update social parameter\n        \n        return self.gbest_value", "name": "PSO_DIW_Enhanced", "description": "Enhancing PSO-DIW with a dynamic parameter adaptation for improved convergence speed and accuracy in optimization.", "configspace": "", "generation": 79, "fitness": 0.23040447422133942, "feedback": "The algorithm PSO_DIW_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6054901195292561, 0.576207449553347, 0.5996555382743053, 0.6230732174334894, 0.5498877963679628, 0.5496808509800862, 0.5847796001969758, 0.5893406371616858, 0.6096676235636009, 0.11542880556267443, 0.06182703950722701, 0.03586219902245702, 0.01813574442900756, 0.028806673053410337, 0.011421337765762152, 9.999999999998899e-05, 0.0005903532303170866, 0.000857642889069532, 0.10497489215071198, 0.10454983298448262, 0.0937422162820225, 0.09659632989700984, 0.13734877958307512, 0.10169729402014582, 0.09230449316262312, 0.10507809976160276, 0.11152904566856814, 0.0861600145947794, 0.09872390640375162, 0.08086361494028682, 0.10700485402340587, 0.10003053079293278, 0.05426438579904336, 0.03797063407090151, 0.029369174178516366, 0.07491522460239608, 0.8582649516445398, 0.8697984615995805, 0.8611738748921643, 0.8274214180530268, 0.8886599149166224, 0.778694535166631, 0.8701763866725899, 0.7915826347680701, 0.8768878318345708, 0.36444064649209496, 0.39118568971976886, 0.38398684672301875, 0.3830601772089529, 0.3700932587367636, 0.386491076186388, 0.36881299725122474, 0.3504519525288943, 0.3488633699289001, 0.22196880398301322, 0.16716638509076076, 0.13894199073987257, 0.2699399830775532, 0.20650881555889267, 0.18641142042488523, 0.13015039269333317, 0.14835041121709414, 0.1706786301219958, 0.218028499783942, 0.2746150381639364, 0.1184895404155224, 0.19870713964453668, 0.18286660834790158, 0.13075830096554075, 0.23436069388952518, 0.24652458190541915, 0.2030137069047605, 0.1301453185106578, 0.17035983135385724, 0.21097189266202632, 0.15854890673819322, 0.16910103585472824, 0.12966945439306832, 0.216922826695916, 0.15801314945515788, 0.16578933017228226, 0.020942379187623428, 0.0025078701183627317, 0.06289311291110244, 0.037323584297975554, 0.017766496452246816, 0.034928647096056364, 0.014703890366639327, 0.0028756541381868006, 0.006890931420830526, 0.15949272174886697, 0.14464469230862909, 0.11934390543790363, 0.053231899548462525, 0.017811040584553628, 0.0650813691040446, 0.10102431595521044, 0.0914299224662053, 0.13397185087485997, 0.06949222947614653, 0.08856452024452721, 0.0847703197583185, 0.06594751310671909, 0.058652077548260295, 0.06361028120555257, 0.05827127124959064, 0.06588787837430987, 0.041346756587747446, 0.11463929395996386, 0.05481298963452086, 0.15543191157189173, 0.05259541304110649, 0.07060219196537365, 0.05027048186128136, 0.13441535508509928, 0.08649782483237345, 0.08313675323182179, 0.49451268428824713, 0.5034942892850844, 0.5164746260577151, 0.5158493812119403, 0.4474943481457332, 0.45941621928572085, 0.4666879469525448, 0.5121616681725835, 0.46655923964347246, 0.05814949140370462, 0.04428880233658783, 0.016636103315597395, 0.09907512511675765, 0.06179178989381762, 0.10081013940679007, 0.11675146465613873, 0.10949628932445521, 0.07095668678097278, 0.18122637932535868, 0.24877906813925543, 0.1606098820387828, 0.14666086573896286, 0.26672333379188984, 0.12054279821566505, 0.13164709186258128, 0.213679021131979, 0.17669060485507693, 0.16650329973681166, 0.35373038337998175, 0.18885298910186965, 0.3616891009556036, 0.23354557747101012, 0.29967480054770834, 0.18501033108413145, 0.3390424795093515, 0.17741558635525123, 0.2092621416271393, 0.2007056751937749, 0.20757996674790247, 0.29255991191318986, 0.19936472220195345, 0.16632204893114944, 0.14185048762356145, 0.2619092175633604, 0.17462855557850632, 0.2247839692549013, 0.24908095599896762, 0.21151212581661472, 0.22274788196500606, 0.2004784334079237, 0.22659789708875966, 0.22664045498189933, 0.22854785425339474, 0.22314428625463967, 0.17375932364397306, 0.18894459211698145, 0.185501528200414, 0.18366544603142787, 0.20148781654397363, 0.16445948230273866, 0.1656267638096719, 0.20056169831093507, 0.17635287378864561, 0.12421435347806986, 0.11664910442104282, 0.1290685691799912, 0.8224240674015549, 0.16696797186915024, 0.8908793954026608, 0.10786691551282768, 0.6898528299863296, 0.16422018497524238, 0.5216564743759244, 0.15558516932018662, 0.6492274276900967, 0.7351026160257392, 0.16427640064764215, 0.6714024055798729, 0.2482725486108217, 0.40494015544478745, 0.4103818394607852, 0.17445553606958475, 0.1962170666130546, 0.1836235577855473, 0.19377588219559916, 0.20491935448294274, 0.19981110523603518, 0.20485251734423437, 0.1859557181724878, 0.1970358514712789, 0.09312499426306586, 0.07963172959396247, 0.08080675020209815, 0.0975823786979485, 0.07932135118518768, 0.07967703997836795, 0.07439340741341294, 0.07972308702666797, 0.0779706637471399]}, "mutation_prompt": null}
{"id": "2411d1d2-85b9-44b5-8672-1907119d523b", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "6b29e66a-f73f-4353-861d-effd0c7135cf", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "e01d8b41-8608-4e75-bfab-a56e75febbff", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "3bd7ee5f-e854-4619-bded-b39270a63921", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "3840c91a-ee63-44a9-8990-319a992f9bca", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "cb6393c3-7d51-4252-be74-e27196f5d051", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "acb81d33-b67c-432e-990f-281d68ec6300", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "756c1621-65c7-4fdf-b6c3-6949dc84571f", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "9b8ee80e-d835-4780-b8ae-f6124e312f0d", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "f8a00460-1845-498b-9cc8-93f376e1bce1", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "2eb1182e-56fd-48a8-bca3-f98213f0968f", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "a292072d-fb9b-49d2-970a-9096ddf31a8b", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "02ddc81d-7067-49b4-8338-10a17854fd03", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "2eac7786-e23e-49b3-a6ad-e1a1ca3c5d65", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "fe8782c3-8d4f-4551-b5b2-d85e4143caf7", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "7185cb41-fe4d-48a0-a07d-0bc8bb34e3f9", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "ced2d679-d3ff-4b3a-bb8f-d9fea062a873", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "d9afb6a5-2831-402a-9444-04e480d70a92", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "77984312-0bae-4747-8351-97694f86b60c", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
{"id": "cc924ffe-d274-452c-8cd4-08c9c78b7e85", "solution": "import numpy as np\n\nclass PSO_DIW:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_vel = 0.1\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.zeros((self.swarm_size, self.dim))\n        self.pbest_positions = self.particles.copy()\n        self.pbest_values = np.full(self.swarm_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_value = np.inf\n        self.inertia = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest_position = self.particles[i].copy()\n\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia * self.velocities[i] + self.c1 * r1 * (self.pbest_positions[i] - self.particles[i]) + self.c2 * r2 * (self.gbest_position - self.particles[i])\n                np.clip(self.velocities[i], -self.max_vel, self.max_vel, out=self.velocities[i])\n                self.particles[i] += self.velocities[i]\n            \n            self.inertia = 0.5 + 0.5 * np.exp(-10.0 * _ / self.budget)  # Update inertia weight\n\n        return self.gbest_value", "name": "PSO_DIW", "description": "Particle Swarm Optimization with Dynamic Inertia Weight (PSO-DIW) algorithm that adapts the inertia weight during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82a9ce10-1392-4adc-9836-1663744c52b6", "metadata": {"aucs": [0.6479221008081495, 0.6069979585184709, 0.6340235795143956, 0.5845729679286616, 0.5588091270682658, 0.5968071048873405, 0.6071741535146606, 0.6233852114660028, 0.5869999824934173, 0.21825045423490796, 0.07299814548102401, 0.0661879000984551, 0.0026677720542683803, 0.036692417587461, 0.060538704353099604, 9.999999999998899e-05, 9.999999999998899e-05, 0.008554152440752305, 0.12458186207305932, 0.10850288624312399, 0.07512980650130141, 0.0767927653882009, 0.1220204189263655, 0.13653256221372667, 0.08261669873723365, 0.1269783196923363, 0.11148677464649204, 0.10316057171332249, 0.08072201404186452, 0.06528673610263269, 0.10911215596408419, 0.1065372148660706, 0.0695788795806388, 0.0526809406736074, 0.06266276495493583, 0.07117394308618152, 0.7095116728115464, 0.6206201512389842, 0.6543799401693797, 0.6696626081717099, 0.7489846191642091, 0.7116974280660024, 0.7440618341440312, 0.7059563976765569, 0.7400240207664329, 0.3913763111152483, 0.3336497744778286, 0.41394164203821127, 0.42091956853212253, 0.3758248049958651, 0.38992057192725993, 0.40170022015748774, 0.3766374473979347, 0.3904093259876352, 0.2259872329826269, 0.12316617717493372, 0.11490647513540675, 0.20372047325346632, 0.38954222819122775, 0.08513159534360548, 0.14617530054971306, 0.14242406047854272, 0.14807699820235498, 0.19669301374990866, 0.22794631248983577, 0.17535751466865002, 0.21101106233337164, 0.1858062568072767, 0.1568250389879684, 0.3313825745643274, 0.11861301691683113, 0.19871512578929973, 0.2531597723693084, 0.19021682194630007, 0.2123981594620341, 0.19027072851411708, 0.17443578542864302, 0.2229524402849027, 0.20304220566039777, 0.13679455598475743, 0.17220545130024345, 0.005133066990193447, 0.08738184843869257, 0.044567945618329996, 0.07605564241133056, 0.009263490656706397, 0.03360068195815347, 0.00880886701997663, 0.005047554861092096, 0.006656767889295034, 0.2004286456194161, 0.08697393328603997, 0.09608069501595129, 0.051544808553147026, 0.012925776922003585, 0.029283910009804237, 0.09091514371162535, 0.08451541368876336, 0.15453758319380828, 0.10327276945529351, 0.1475943591588661, 0.08919225678454457, 0.06597867678544589, 0.0664222451063855, 0.08361335130442427, 0.05239210989950893, 0.10418382221182854, 0.0702352900427895, 0.18708394565908948, 0.047104892348771354, 0.15551555393400218, 0.08308836091985738, 0.08404768845608745, 0.07691610328224474, 0.09017412951506543, 0.19442079287551373, 0.10959319401442136, 0.4738559229080088, 0.4950635871590674, 0.48166938389669567, 0.45215847360026196, 0.46517361051289885, 0.4510830471286321, 0.4833592169937885, 0.4597496891748327, 0.4581358942968331, 0.03437477547279666, 0.025409618356175057, 9.999999999998899e-05, 0.06573260712104889, 0.08099525183272294, 0.08790153996137906, 0.11000683264663635, 0.13243355102674637, 0.0780794759626382, 0.15020418216750908, 0.20531541414470367, 0.17178204756042126, 0.14054724953944442, 0.24466183101612382, 0.2308189811380249, 0.1776908713365588, 0.151472622385184, 0.1900367712904103, 0.1571007502449684, 0.29754403357771575, 0.1774258282122888, 0.342550379794871, 0.20738506931197498, 0.2581906700520482, 0.18112866409008344, 0.30538182480313014, 0.15500956313088576, 0.1433366382496568, 0.1306503246882076, 0.11446876017163499, 0.20904095879892726, 0.17225725370229705, 0.20676831387944183, 0.15173697343568004, 0.15738488945533213, 0.13071736070019235, 0.2271727699931746, 0.21343950865942585, 0.18392423407321334, 0.2267439715380658, 0.19368297665722323, 0.27788450467375914, 0.23901915319667677, 0.2223536072254505, 0.22611091227093272, 0.16547854268873252, 0.19060162868010488, 0.18977148866369775, 0.18596482727523722, 0.19907748563819905, 0.17572696192619042, 0.1906724405704041, 0.18902641978809653, 0.17185459567440997, 0.12368494917099415, 0.11791098262563249, 0.1262148190424367, 0.8293743387600704, 0.19564711722297978, 0.8493073937728677, 0.7015965953633052, 0.7855037595163452, 0.8562831384701337, 0.7192334321557479, 0.1531682152905729, 0.6088594516761109, 0.6996118321233165, 0.1962186281556525, 0.583964079703053, 0.09153455757687956, 0.4462910673701269, 0.46248923545207077, 0.18752346035335887, 0.18277779791958793, 0.18424586421833833, 0.19370116412534633, 0.1869351423129565, 0.18934318064732414, 0.1921649895001244, 0.19083155148263575, 0.2241321896199564, 0.09959455788344529, 0.0833134078998573, 0.08102661845461501, 0.08356115353568772, 0.08793686223391084, 0.1410472734336281, 0.09173893957406876, 0.08222562619794915, 0.09867710375657623]}, "mutation_prompt": null}
