{"id": "9be4b63c-61bd-4603-bcbd-e358db1dc4b0", "solution": "import numpy as np\n\nclass FireflyHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.harmony_memory_size = 10\n        self.iterations = budget // (self.population_size + self.harmony_memory_size)\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n        \n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                new_solution = firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0)\n                if objective_function(new_solution) < objective_function(best_solution):\n                    best_solution = new_solution\n            best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "FireflyHarmonySearch", "description": "Novel Hybrid Firefly Harmony Search Algorithm that combines the exploration capability of firefly algorithm with the exploitation ability of harmony search for effective black box optimization.", "configspace": "", "generation": 0, "fitness": 0.07081727142612335, "feedback": "The algorithm FireflyHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": null, "metadata": {"aucs": [0.19973523309937513, 0.13638322610744325, 0.1775190740108088, 0.11261647948109166, 0.15184361857281725, 0.19420133141379747, 0.11861092010933894, 0.1352254360688252, 0.09529971612879384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020114029789248145, 0.036779500711294544, 0.022658475112867005, 0.03305745729585907, 0.025327890803146458, 0.044538473146337854, 0.024346048500635376, 0.03433272550144606, 0.030652246519374926, 0.025675787425499808, 0.02813103833237851, 0.017795195334442515, 0.021395457811119067, 0.019250314036223792, 0.021136220113696758, 0.0285599155861066, 0.029763493298165633, 0.011696202564624225, 0.042771089948253405, 0.055232834037358014, 0.05107820872524116, 0.035295389714557146, 0.04584466084417804, 0.04716375847383081, 0.03375839752252541, 0.04914420883354109, 0.04122632421427752, 0.04931944326691251, 0.009958447310825957, 0.02146905741813976, 0.031636001080093235, 0.033335656787182644, 0.019734115153941634, 0.004982416515228905, 0.020139505592027485, 0.04671368067977488, 0.1089113798621838, 0.11612186551646497, 0.08655503335483694, 0.047806268263554164, 0.05429823859321237, 0.023248115719063045, 0.06052101929793574, 0.07129114362269684, 0.03760837902086589, 9.999999999998899e-05, 0.03996042300009994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026059911146834036, 0.0009626586680826499, 0.01164500465096241, 0.003939318636547617, 9.999999999998899e-05, 0.01487426280113957, 0.005722583862690422, 0.005647999930659009, 0.0025840894887705357, 0.01794541479915024, 9.999999999998899e-05, 0.015293507940653983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06844119205149779, 0.04664497511960708, 0.035074916718060956, 0.018725334202144728, 0.06107594424682117, 0.01776028233805116, 0.03662076694695937, 0.07804886295412672, 0.02861673570794987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025835441891532973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023158892928076824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19453150010065368, 0.20672797321911973, 0.18047009237944023, 0.15046440340639133, 0.15208635905676404, 0.1423317133022941, 0.17886592734941076, 0.19931732373187028, 0.16587222130229462, 0.02271277609668032, 0.022980381674960526, 0.039719355065368056, 0.01779832345230148, 0.03808722280597654, 0.025614612661303493, 0.029030447867903653, 0.019943459556366006, 0.030672449064359508, 0.10780507412677676, 0.10256778483024687, 0.08848875570434489, 0.15731016704937373, 0.10046027712299854, 0.15346418633009473, 0.08672544099321167, 0.10641641779133992, 0.09661208707851188, 0.15883609952054412, 0.11473791407440093, 0.16597104542999663, 0.16279885010199646, 0.17858868530890704, 0.15287264765630826, 0.13889856635854014, 0.1432318418807137, 0.1349981667289607, 0.07947520812913023, 0.05635649963276723, 0.11019622718963218, 0.10927694331176552, 0.1058257782619505, 0.09200347070067005, 0.08745062495580491, 0.09807626945024095, 0.0695986387172729, 0.14391402941634535, 0.15767304030087015, 0.14572737344152664, 0.20482199801481038, 0.15281329356051843, 0.15136594650844248, 0.13752743087887576, 0.14699454437896076, 0.1256608468274355, 0.1323277234946727, 0.16339883136861166, 0.11740728403929801, 0.15670301380697582, 0.04294075095558869, 0.1501681328440655, 0.151791357304897, 0.17106628236520827, 0.15742485820190466, 0.1018797880176231, 0.13274306207188147, 0.16747384804734355, 0.12428310736236037, 0.10700837820966047, 0.14120926897617336, 0.10194252047325081, 0.12375912002293699, 0.0850929628147794, 0.1429952534588328, 0.0832170776568224, 0.14989554879733802, 0.09425095103324022, 0.101239149658092, 0.0994958769115043, 0.07694802432808068, 0.10380049580567052, 0.08227918722961947, 0.1835476409563751, 0.17192323683194155, 0.17770372319597316, 0.17714413502894022, 0.19364454265544606, 0.19596729051515593, 0.16708650100413835, 0.20831723252856926, 0.22686701833539313, 0.04128706889436906, 0.053806232860989955, 0.03932777079838434, 0.052528646166180804, 0.04753632261451679, 0.0395223131946314, 0.03368283539140515, 0.06815236560198812, 0.049975337449984725]}, "mutation_prompt": null}
{"id": "82691e71-2abd-469c-b1dc-86fa5e2578d3", "solution": "import numpy as np\n\nclass FireflyHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.harmony_memory_size = 10\n        self.iterations = budget // (self.population_size + self.harmony_memory_size)\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n        \n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                new_solution = firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0)\n                if objective_function(new_solution) < objective_function(best_solution):\n                    best_solution = new_solution\n            best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "FireflyHarmonySearch", "description": "Novel Hybrid Firefly Harmony Search Algorithm that combines the exploration capability of firefly algorithm with the exploitation ability of harmony search for effective black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9be4b63c-61bd-4603-bcbd-e358db1dc4b0", "metadata": {"aucs": [0.19973523309937513, 0.13638322610744325, 0.1775190740108088, 0.11261647948109166, 0.15184361857281725, 0.19420133141379747, 0.11861092010933894, 0.1352254360688252, 0.09529971612879384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020114029789248145, 0.036779500711294544, 0.022658475112867005, 0.03305745729585907, 0.025327890803146458, 0.044538473146337854, 0.024346048500635376, 0.03433272550144606, 0.030652246519374926, 0.025675787425499808, 0.02813103833237851, 0.017795195334442515, 0.021395457811119067, 0.019250314036223792, 0.021136220113696758, 0.0285599155861066, 0.029763493298165633, 0.011696202564624225, 0.042771089948253405, 0.055232834037358014, 0.05107820872524116, 0.035295389714557146, 0.04584466084417804, 0.04716375847383081, 0.03375839752252541, 0.04914420883354109, 0.04122632421427752, 0.04931944326691251, 0.009958447310825957, 0.02146905741813976, 0.031636001080093235, 0.033335656787182644, 0.019734115153941634, 0.004982416515228905, 0.020139505592027485, 0.04671368067977488, 0.1089113798621838, 0.11612186551646497, 0.08655503335483694, 0.047806268263554164, 0.05429823859321237, 0.023248115719063045, 0.06052101929793574, 0.07129114362269684, 0.03760837902086589, 9.999999999998899e-05, 0.03996042300009994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026059911146834036, 0.0009626586680826499, 0.01164500465096241, 0.003939318636547617, 9.999999999998899e-05, 0.01487426280113957, 0.005722583862690422, 0.005647999930659009, 0.0025840894887705357, 0.01794541479915024, 9.999999999998899e-05, 0.015293507940653983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06844119205149779, 0.04664497511960708, 0.035074916718060956, 0.018725334202144728, 0.06107594424682117, 0.01776028233805116, 0.03662076694695937, 0.07804886295412672, 0.02861673570794987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025835441891532973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023158892928076824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19453150010065368, 0.20672797321911973, 0.18047009237944023, 0.15046440340639133, 0.15208635905676404, 0.1423317133022941, 0.17886592734941076, 0.19931732373187028, 0.16587222130229462, 0.02271277609668032, 0.022980381674960526, 0.039719355065368056, 0.01779832345230148, 0.03808722280597654, 0.025614612661303493, 0.029030447867903653, 0.019943459556366006, 0.030672449064359508, 0.10780507412677676, 0.10256778483024687, 0.08848875570434489, 0.15731016704937373, 0.10046027712299854, 0.15346418633009473, 0.08672544099321167, 0.10641641779133992, 0.09661208707851188, 0.15883609952054412, 0.11473791407440093, 0.16597104542999663, 0.16279885010199646, 0.17858868530890704, 0.15287264765630826, 0.13889856635854014, 0.1432318418807137, 0.1349981667289607, 0.07947520812913023, 0.05635649963276723, 0.11019622718963218, 0.10927694331176552, 0.1058257782619505, 0.09200347070067005, 0.08745062495580491, 0.09807626945024095, 0.0695986387172729, 0.14391402941634535, 0.15767304030087015, 0.14572737344152664, 0.20482199801481038, 0.15281329356051843, 0.15136594650844248, 0.13752743087887576, 0.14699454437896076, 0.1256608468274355, 0.1323277234946727, 0.16339883136861166, 0.11740728403929801, 0.15670301380697582, 0.04294075095558869, 0.1501681328440655, 0.151791357304897, 0.17106628236520827, 0.15742485820190466, 0.1018797880176231, 0.13274306207188147, 0.16747384804734355, 0.12428310736236037, 0.10700837820966047, 0.14120926897617336, 0.10194252047325081, 0.12375912002293699, 0.0850929628147794, 0.1429952534588328, 0.0832170776568224, 0.14989554879733802, 0.09425095103324022, 0.101239149658092, 0.0994958769115043, 0.07694802432808068, 0.10380049580567052, 0.08227918722961947, 0.1835476409563751, 0.17192323683194155, 0.17770372319597316, 0.17714413502894022, 0.19364454265544606, 0.19596729051515593, 0.16708650100413835, 0.20831723252856926, 0.22686701833539313, 0.04128706889436906, 0.053806232860989955, 0.03932777079838434, 0.052528646166180804, 0.04753632261451679, 0.0395223131946314, 0.03368283539140515, 0.06815236560198812, 0.049975337449984725]}, "mutation_prompt": null}
{"id": "9fa7f487-9192-4c9c-a365-e98eb22e0382", "solution": "import numpy as np\n\nclass FireflyHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.harmony_memory_size = 10\n        self.iterations = budget // (self.population_size + self.harmony_memory_size)\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n        \n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                new_solution = firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0)\n                if objective_function(new_solution) < objective_function(best_solution):\n                    best_solution = new_solution\n            best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "FireflyHarmonySearch", "description": "Novel Hybrid Firefly Harmony Search Algorithm that combines the exploration capability of firefly algorithm with the exploitation ability of harmony search for effective black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9be4b63c-61bd-4603-bcbd-e358db1dc4b0", "metadata": {"aucs": [0.19973523309937513, 0.13638322610744325, 0.1775190740108088, 0.11261647948109166, 0.15184361857281725, 0.19420133141379747, 0.11861092010933894, 0.1352254360688252, 0.09529971612879384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020114029789248145, 0.036779500711294544, 0.022658475112867005, 0.03305745729585907, 0.025327890803146458, 0.044538473146337854, 0.024346048500635376, 0.03433272550144606, 0.030652246519374926, 0.025675787425499808, 0.02813103833237851, 0.017795195334442515, 0.021395457811119067, 0.019250314036223792, 0.021136220113696758, 0.0285599155861066, 0.029763493298165633, 0.011696202564624225, 0.042771089948253405, 0.055232834037358014, 0.05107820872524116, 0.035295389714557146, 0.04584466084417804, 0.04716375847383081, 0.03375839752252541, 0.04914420883354109, 0.04122632421427752, 0.04931944326691251, 0.009958447310825957, 0.02146905741813976, 0.031636001080093235, 0.033335656787182644, 0.019734115153941634, 0.004982416515228905, 0.020139505592027485, 0.04671368067977488, 0.1089113798621838, 0.11612186551646497, 0.08655503335483694, 0.047806268263554164, 0.05429823859321237, 0.023248115719063045, 0.06052101929793574, 0.07129114362269684, 0.03760837902086589, 9.999999999998899e-05, 0.03996042300009994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026059911146834036, 0.0009626586680826499, 0.01164500465096241, 0.003939318636547617, 9.999999999998899e-05, 0.01487426280113957, 0.005722583862690422, 0.005647999930659009, 0.0025840894887705357, 0.01794541479915024, 9.999999999998899e-05, 0.015293507940653983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06844119205149779, 0.04664497511960708, 0.035074916718060956, 0.018725334202144728, 0.06107594424682117, 0.01776028233805116, 0.03662076694695937, 0.07804886295412672, 0.02861673570794987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025835441891532973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023158892928076824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19453150010065368, 0.20672797321911973, 0.18047009237944023, 0.15046440340639133, 0.15208635905676404, 0.1423317133022941, 0.17886592734941076, 0.19931732373187028, 0.16587222130229462, 0.02271277609668032, 0.022980381674960526, 0.039719355065368056, 0.01779832345230148, 0.03808722280597654, 0.025614612661303493, 0.029030447867903653, 0.019943459556366006, 0.030672449064359508, 0.10780507412677676, 0.10256778483024687, 0.08848875570434489, 0.15731016704937373, 0.10046027712299854, 0.15346418633009473, 0.08672544099321167, 0.10641641779133992, 0.09661208707851188, 0.15883609952054412, 0.11473791407440093, 0.16597104542999663, 0.16279885010199646, 0.17858868530890704, 0.15287264765630826, 0.13889856635854014, 0.1432318418807137, 0.1349981667289607, 0.07947520812913023, 0.05635649963276723, 0.11019622718963218, 0.10927694331176552, 0.1058257782619505, 0.09200347070067005, 0.08745062495580491, 0.09807626945024095, 0.0695986387172729, 0.14391402941634535, 0.15767304030087015, 0.14572737344152664, 0.20482199801481038, 0.15281329356051843, 0.15136594650844248, 0.13752743087887576, 0.14699454437896076, 0.1256608468274355, 0.1323277234946727, 0.16339883136861166, 0.11740728403929801, 0.15670301380697582, 0.04294075095558869, 0.1501681328440655, 0.151791357304897, 0.17106628236520827, 0.15742485820190466, 0.1018797880176231, 0.13274306207188147, 0.16747384804734355, 0.12428310736236037, 0.10700837820966047, 0.14120926897617336, 0.10194252047325081, 0.12375912002293699, 0.0850929628147794, 0.1429952534588328, 0.0832170776568224, 0.14989554879733802, 0.09425095103324022, 0.101239149658092, 0.0994958769115043, 0.07694802432808068, 0.10380049580567052, 0.08227918722961947, 0.1835476409563751, 0.17192323683194155, 0.17770372319597316, 0.17714413502894022, 0.19364454265544606, 0.19596729051515593, 0.16708650100413835, 0.20831723252856926, 0.22686701833539313, 0.04128706889436906, 0.053806232860989955, 0.03932777079838434, 0.052528646166180804, 0.04753632261451679, 0.0395223131946314, 0.03368283539140515, 0.06815236560198812, 0.049975337449984725]}, "mutation_prompt": null}
{"id": "2b7788eb-4c35-419c-ab9b-cdf9a0e8276a", "solution": "import numpy as np\n\nclass EnhancedFireflyHarmonySearch(FireflyHarmonySearch):\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n        \n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                new_solution = firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0)\n                if objective_function(new_solution) < objective_function(best_solution):\n                    best_solution = new_solution\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "EnhancedFireflyHarmonySearch", "description": "Enhancing the exploration-exploitation balance of the Firefly Harmony Search algorithm through targeted line modifications based on a specified probability.", "configspace": "", "generation": 3, "fitness": 0.08263786672670266, "feedback": "The algorithm EnhancedFireflyHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "9be4b63c-61bd-4603-bcbd-e358db1dc4b0", "metadata": {"aucs": [0.19733545206805359, 0.19022841866877094, 0.19867946134146008, 0.12236318593316031, 0.10370068608218641, 0.13908806084044734, 0.11857083812541513, 0.13888953503574175, 0.17601482073264219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0265156607569208, 0.035352180764073426, 0.053159567581349765, 0.040006545038903996, 0.02738766663123149, 0.05957267323836646, 0.03126376092834893, 0.030006430977763343, 0.052959411001409884, 0.025675787425499808, 0.04040391447237057, 0.04376289935381805, 0.04657390526610927, 0.023035312259477192, 0.02253778412226637, 0.028724991338338945, 0.029763493298165633, 0.046606257651846006, 0.08221374663621883, 0.029117677466251712, 0.04871561822047166, 0.05064718287626058, 0.03928690814388769, 0.08715344934507085, 0.047185197333425966, 0.05001619976877669, 0.07460353145263021, 0.04967617366724841, 0.025217823369486858, 0.05583091181022226, 0.0683351485776289, 0.043423305046367044, 0.08855041263932983, 0.03725858222811074, 9.999999999998899e-05, 0.08101943725971827, 0.12587531685757003, 0.1587713046975645, 0.1500010423558773, 0.05489489754330734, 0.07172097223318075, 0.10840958798926836, 0.11550386846577443, 0.08804328991158905, 0.11240156838128312, 0.06576701245489713, 0.04462800317402438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02249996073524707, 0.013391996825419139, 0.14716340185729038, 0.06117159332075839, 0.007481203268053793, 9.999999999998899e-05, 0.05437924988183129, 0.013770718615485067, 0.008970228532887758, 0.014663869880718106, 0.01794541479915024, 0.013774249638927372, 0.12252580773877575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045640486738917074, 0.03737542272454519, 0.04235486392921628, 0.04413249460378754, 0.11929932889327632, 0.03315124538477121, 0.05679768649787542, 0.04497081349986931, 0.070134144022729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00853931501814209, 9.999999999998899e-05, 0.000804189445972936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18475227270171957, 0.21458276972144763, 0.23929533523156987, 0.16485181096271884, 0.14139184370945823, 0.15662400268345833, 0.2070107883575506, 0.22406050318800919, 0.20626655764180446, 0.015287385363803918, 0.003595989676217104, 0.04034989685649504, 0.06012122071921999, 0.04450645111131235, 0.05169427375194968, 0.033049850540003756, 0.02630882696351, 0.06145993402404493, 0.07615772239101859, 0.10230890390906167, 0.10016697797058693, 0.07971206229376326, 0.12528147036428783, 0.11890616681179966, 0.07902637864528694, 0.0881489459616338, 0.10035365162390497, 0.15305750577360233, 0.14837211602714273, 0.16725076088703894, 0.1585307314712462, 0.17858868530890704, 0.18529398992516466, 0.1357773919546309, 0.13847860994645322, 0.16211685319117675, 0.07247207788368237, 0.07737823268552424, 0.1023424020775785, 0.10927694331176552, 0.1058257782619505, 0.10121686061249369, 0.0791914751947339, 0.09315330818530365, 0.1046956593179289, 0.16438170678635344, 0.16863097175725106, 0.1653636071709732, 0.1425244730699189, 0.17539059813040525, 0.1698166237616351, 0.18408815050681204, 0.15828645454506263, 0.18215375519692467, 0.10828602410577381, 0.15338518972035053, 0.1666318856907345, 0.15628492107421565, 0.15038079132871374, 0.15676796346783362, 0.17050663079925343, 0.15678464295876693, 0.1552301193720239, 0.10763798981989181, 0.1144768963942252, 0.1498785610377108, 0.1493794395363106, 0.12945268359153161, 0.17784718916763576, 0.12073498058265086, 0.16809632547566522, 0.13985838726417388, 0.15579353851798072, 0.0895625421458941, 0.10916653853074443, 0.16259369105933197, 0.10110415413881202, 0.09592964058583298, 0.07467161887772689, 0.1359253023955942, 0.13193497190956127, 0.19683190566567743, 0.19248628982387517, 0.1912970261839736, 0.19985727690876476, 0.195509781029779, 0.20930051637325509, 0.21033507138012764, 0.1757200291220382, 0.22014692212057152, 0.08835539903769785, 0.046468669015601205, 0.06664539271534431, 0.04970335822651073, 0.06922279400036169, 0.06099611032116026, 0.05329732226151751, 0.03811825208022068, 0.0609722043418327]}, "mutation_prompt": null}
{"id": "4cc36ed0-2a82-42df-86e2-fc831b29e963", "solution": "import numpy as np\n\nclass EnhancedFireflyHarmonySearch(FireflyHarmonySearch):\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n        \n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                new_solution = firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0)\n                if objective_function(new_solution) < objective_function(best_solution):\n                    best_solution = new_solution\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "EnhancedFireflyHarmonySearch", "description": "Enhancing the exploration-exploitation balance of the Firefly Harmony Search algorithm through targeted line modifications based on a specified probability.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b7788eb-4c35-419c-ab9b-cdf9a0e8276a", "metadata": {"aucs": [0.19733545206805359, 0.19022841866877094, 0.19867946134146008, 0.12236318593316031, 0.10370068608218641, 0.13908806084044734, 0.11857083812541513, 0.13888953503574175, 0.17601482073264219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0265156607569208, 0.035352180764073426, 0.053159567581349765, 0.040006545038903996, 0.02738766663123149, 0.05957267323836646, 0.03126376092834893, 0.030006430977763343, 0.052959411001409884, 0.025675787425499808, 0.04040391447237057, 0.04376289935381805, 0.04657390526610927, 0.023035312259477192, 0.02253778412226637, 0.028724991338338945, 0.029763493298165633, 0.046606257651846006, 0.08221374663621883, 0.029117677466251712, 0.04871561822047166, 0.05064718287626058, 0.03928690814388769, 0.08715344934507085, 0.047185197333425966, 0.05001619976877669, 0.07460353145263021, 0.04967617366724841, 0.025217823369486858, 0.05583091181022226, 0.0683351485776289, 0.043423305046367044, 0.08855041263932983, 0.03725858222811074, 9.999999999998899e-05, 0.08101943725971827, 0.12587531685757003, 0.1587713046975645, 0.1500010423558773, 0.05489489754330734, 0.07172097223318075, 0.10840958798926836, 0.11550386846577443, 0.08804328991158905, 0.11240156838128312, 0.06576701245489713, 0.04462800317402438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02249996073524707, 0.013391996825419139, 0.14716340185729038, 0.06117159332075839, 0.007481203268053793, 9.999999999998899e-05, 0.05437924988183129, 0.013770718615485067, 0.008970228532887758, 0.014663869880718106, 0.01794541479915024, 0.013774249638927372, 0.12252580773877575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045640486738917074, 0.03737542272454519, 0.04235486392921628, 0.04413249460378754, 0.11929932889327632, 0.03315124538477121, 0.05679768649787542, 0.04497081349986931, 0.070134144022729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00853931501814209, 9.999999999998899e-05, 0.000804189445972936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18475227270171957, 0.21458276972144763, 0.23929533523156987, 0.16485181096271884, 0.14139184370945823, 0.15662400268345833, 0.2070107883575506, 0.22406050318800919, 0.20626655764180446, 0.015287385363803918, 0.003595989676217104, 0.04034989685649504, 0.06012122071921999, 0.04450645111131235, 0.05169427375194968, 0.033049850540003756, 0.02630882696351, 0.06145993402404493, 0.07615772239101859, 0.10230890390906167, 0.10016697797058693, 0.07971206229376326, 0.12528147036428783, 0.11890616681179966, 0.07902637864528694, 0.0881489459616338, 0.10035365162390497, 0.15305750577360233, 0.14837211602714273, 0.16725076088703894, 0.1585307314712462, 0.17858868530890704, 0.18529398992516466, 0.1357773919546309, 0.13847860994645322, 0.16211685319117675, 0.07247207788368237, 0.07737823268552424, 0.1023424020775785, 0.10927694331176552, 0.1058257782619505, 0.10121686061249369, 0.0791914751947339, 0.09315330818530365, 0.1046956593179289, 0.16438170678635344, 0.16863097175725106, 0.1653636071709732, 0.1425244730699189, 0.17539059813040525, 0.1698166237616351, 0.18408815050681204, 0.15828645454506263, 0.18215375519692467, 0.10828602410577381, 0.15338518972035053, 0.1666318856907345, 0.15628492107421565, 0.15038079132871374, 0.15676796346783362, 0.17050663079925343, 0.15678464295876693, 0.1552301193720239, 0.10763798981989181, 0.1144768963942252, 0.1498785610377108, 0.1493794395363106, 0.12945268359153161, 0.17784718916763576, 0.12073498058265086, 0.16809632547566522, 0.13985838726417388, 0.15579353851798072, 0.0895625421458941, 0.10916653853074443, 0.16259369105933197, 0.10110415413881202, 0.09592964058583298, 0.07467161887772689, 0.1359253023955942, 0.13193497190956127, 0.19683190566567743, 0.19248628982387517, 0.1912970261839736, 0.19985727690876476, 0.195509781029779, 0.20930051637325509, 0.21033507138012764, 0.1757200291220382, 0.22014692212057152, 0.08835539903769785, 0.046468669015601205, 0.06664539271534431, 0.04970335822651073, 0.06922279400036169, 0.06099611032116026, 0.05329732226151751, 0.03811825208022068, 0.0609722043418327]}, "mutation_prompt": null}
{"id": "1afb6972-3bda-45e5-b97a-dea159226a64", "solution": "import numpy as np\n\nclass CustomMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            for _ in range(self.population_size):\n                new_solution = firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0)\n                if objective_function(new_solution) < objective_function(best_solution):\n                    best_solution = new_solution\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomMetaheuristicAlgorithm", "description": "A metaheuristic algorithm that combines Firefly Harmony Search with a line modification strategy to balance exploration and exploitation in optimization problems.", "configspace": "", "generation": 5, "fitness": 0.08478233325113572, "feedback": "The algorithm CustomMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "2b7788eb-4c35-419c-ab9b-cdf9a0e8276a", "metadata": {"aucs": [0.19865613504260438, 0.20278445852442606, 0.2182996771372968, 0.1977397581943765, 0.12058075837329763, 0.15298166470353625, 0.1723434862329697, 0.13858346482346096, 0.1720696494614835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04780369648378324, 0.04760198044428632, 0.04578540185809321, 0.0436649105774668, 0.05205854946501243, 0.06435543463397264, 0.06714274032445933, 0.05742147995372848, 0.036814797131548005, 0.04325697093847358, 0.027467157547507504, 0.030588080569102893, 0.02747818501172583, 0.027050246046357973, 0.03927693551522915, 0.03876693298908451, 0.023002447929064695, 0.03887218800171088, 0.0480924303527428, 0.04786296998027029, 0.03492952629563828, 0.05128681180949368, 0.042314840627496575, 0.04382937285378352, 0.056325497421336745, 0.04681681081751665, 0.04360417761813007, 0.10281910464349642, 0.06277204744385834, 0.03755510249695848, 0.07800652337393765, 0.03800956979013248, 0.0696945136291397, 0.09421953467488098, 0.0051920308180313235, 0.020458130780395045, 0.1369261009907441, 0.11525608856527358, 0.11048211269376684, 0.12811607399428981, 0.10130450634251431, 0.0510479899595937, 0.1242438940228523, 0.09092375786152862, 0.0965778359744387, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012551087073705558, 0.007350460890024779, 0.006204304219833645, 0.040604168400193874, 9.999999999998899e-05, 9.999999999998899e-05, 0.053310331780885845, 0.031993184684682485, 0.027454226209577826, 0.0202493091538567, 0.03737167339006242, 0.030427518222886696, 0.0299937953713717, 0.03297363673390974, 0.04613907144691198, 0.036497396661867465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07186438033660691, 0.1112420723373696, 0.05581512811720202, 0.03663421808346612, 0.045111938015707675, 0.0394364118277154, 0.07075828376829685, 0.04648168414875942, 0.07246211953811221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01900931010388862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21090083970757068, 0.20209183317968615, 0.22862155502483184, 0.22556986778305188, 0.15063639259060824, 0.16879003487984046, 0.21479070454735982, 0.2100031447310604, 0.20681694968355147, 0.05265931493137921, 0.02435327598580439, 0.02173842692365724, 0.04561150136561498, 0.0581880951336845, 0.05038712225774744, 0.04985351413774952, 0.04167104039936442, 0.07674547609472415, 0.11089259872926338, 0.12420323126113875, 0.10104269592467063, 0.11240092933452017, 0.11091840842265066, 0.16094262967386153, 0.1247163339482733, 0.11227237585666794, 0.12626993457874636, 0.18298438551559582, 0.15998959975073535, 0.14304036161010403, 0.17962055831830837, 0.18028716724966143, 0.17798121261194433, 0.14266541699939972, 0.14261001479889146, 0.13138167274231105, 0.08478160686277147, 0.09560614935776979, 0.09328922071274415, 0.11528059465283191, 0.11024042811033052, 0.10750414278366205, 0.10120463639091415, 0.08486882325371148, 0.07983756915247431, 0.17027168239357393, 0.167691112124971, 0.16410585077778939, 0.1559304498613021, 0.15736838929359742, 0.1658381528645455, 0.1795089739251352, 0.15656958780490682, 0.1771046474517094, 0.1490857683946264, 0.1745537419684744, 0.14813799675222616, 0.15830004622124672, 0.15021965488727074, 0.1576792382437694, 0.1587145292860288, 0.1587998500606611, 0.141575761977207, 0.1637399696252665, 0.15391525364425418, 0.12611691104520473, 0.1322530318440831, 0.13211193437776014, 0.1013223193750975, 0.12612037908660112, 0.12315597056106431, 0.11170390633885541, 0.1600660820389076, 0.10748668133877581, 0.17333922986694728, 0.07603270105923565, 0.0823093311789811, 0.10898653575210226, 0.12457056956678991, 0.1477742340929803, 0.10323150931466096, 0.21979929242497365, 0.1884683041821067, 0.19709601466158166, 0.1951804400021654, 0.2046722509278437, 0.1849835184426667, 0.19476579717009446, 0.20213435098161026, 0.19670341729896157, 0.0724609976274242, 0.0526907585357399, 0.04877895485635364, 0.060159231635448895, 0.05335604471105049, 0.07123368079243031, 0.0627544487682049, 0.06445073019150438, 0.0756877007804454]}, "mutation_prompt": null}
{"id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 6, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomEnhancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "1afb6972-3bda-45e5-b97a-dea159226a64", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "3e0b1491-1c64-4326-987e-00c8053a43ce", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "NovelMetaheuristicAlgorithm", "description": "Incorporating a combination of Firefly Algorithm, Harmony Search, and Differential Evolution to optimize black box functions through exploration and exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.08516768438290664, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "0fee6c13-51fd-4b8e-a0b7-cdd57767e2c1", "solution": "import numpy as np\n\nclass CustomFireflyDEHSAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomFireflyDEHSAlgorithm", "description": "Combining Firefly Algorithm with Differential Evolution and Harmony Search for optimizing black box functions with exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomFireflyDEHSAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "47e1a70a-0797-41f0-87ee-25eb2cf07721", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "17d9a527-b254-4108-85a4-56c1573e486c", "solution": "import numpy as np\n\nclass CustomDynamicHybridAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def dynamic_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [dynamic_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = dynamic_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomDynamicHybridAlgorithm", "description": "Utilizing a hybrid approach combining firefly optimization, harmony search, and differential evolution with a dynamic adaptation strategy for enhanced black box function optimization.", "configspace": "", "generation": 10, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomDynamicHybridAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "a1d80c8d-641e-422a-9e84-f03f84295075", "solution": "import numpy as np\n\nclass MultiStrategyMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "MultiStrategyMetaheuristicAlgorithm", "description": "Combining Firefly Algorithm, Harmony Search, and Differential Evolution for multi-strategy optimization with a probabilistic switch mechanism.", "configspace": "", "generation": 11, "fitness": 0.08516768438290664, "feedback": "The algorithm MultiStrategyMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "bff5b6d2-519a-4cfd-abd7-ded44bd15d4b", "solution": "import numpy as np\n\nclass NovelHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "NovelHybridMetaheuristicAlgorithm", "description": "A novel hybrid metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search for black box function optimization with exploration and exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.08516768438290664, "feedback": "The algorithm NovelHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "1a055342-1864-4d43-bcde-3687b3e67c52", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.harmony_step_size = 0.01\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + self.harmony_step_size * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Integrating Firefly Algorithm, Differential Evolution, and Harmony Search to optimize black box functions efficiently by balancing exploration and exploitation.", "configspace": "", "generation": 13, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "d197d5ae-2359-46af-a097-ba0e065a7e9e", "solution": "# import numpy as np\n\nclass CustomFireDEHSAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomFireDEHSAlgorithm", "description": "Integrating Firefly Algorithm, Differential Evolution, and Harmony Search for efficient global optimization with exploration and exploitation balance.", "configspace": "", "generation": 14, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomFireDEHSAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "c22161ef-743d-4012-83e0-8bce4a627296", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "A hybrid metaheuristic algorithm combining firefly algorithm, harmony search, and differential evolution for global optimization with exploration and exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "5fc38aec-2df5-483f-95c5-c9d6009dc78f", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "dc9ddd14-4440-4325-bea7-ba3fbe5e7c71", "solution": "import numpy as np\n\nclass CustomFireflyDEHSAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomFireflyDEHSAlgorithm", "description": "Combining Firefly Algorithm, Differential Evolution, and Harmony Search for enhanced optimization of black box functions in a diverse search space.", "configspace": "", "generation": 17, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomFireflyDEHSAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "59a062c1-f5bd-4506-9574-7adf657c3f2d", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "f0fe7186-e1bb-414f-8119-c35abf8cc911", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "02d1a359-517c-4a51-8589-112a8c298b4f", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "541f474a-5f2c-4597-ad44-5799618c6641", "solution": "import numpy as np\n\nclass CustomFireflyDEHarmonyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomFireflyDEHarmonyAlgorithm", "description": "Combining Firefly Algorithm, Differential Evolution, and Harmony Search to optimize black box functions within a budget constraint.", "configspace": "", "generation": 21, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomFireflyDEHarmonyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "fe32c5f2-cf2f-49e6-933f-02fbb9a65bf6", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "de71375b-8408-4ea7-bfbd-8261a508d984", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "e02fbaad-4ee7-44bb-9a01-246fbcdafb0f", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "5b088756-3467-4d70-946f-c0cbb782cc76", "solution": "# import numpy as np\n\nclass CustomBalancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomBalancedMetaheuristicAlgorithm", "description": "Integrating Firefly Algorithm, Differential Evolution, and Harmony Search to dynamically balance exploration and exploitation in optimizing black box functions.", "configspace": "", "generation": 25, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomBalancedMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "15f60faf-b932-4f0d-90f5-e3526a788d70", "solution": "import numpy as np\n\nclass CustomFireflyHarmonyDEMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomFireflyHarmonyDEMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Harmony Search, and Differential Evolution for optimizing black box functions within a constrained budget.", "configspace": "", "generation": 26, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomFireflyHarmonyDEMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "e1228f31-592f-44b0-8b78-97a492319c33", "solution": "import numpy as np\n\nclass CustomEnhancedMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomEnhancedMetaheuristicAlgorithm", "description": "Enhancing the CustomMetaheuristicAlgorithm by incorporating a Differential Evolution strategy to improve exploration and exploitation balance in optimizing black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "07824340-2b13-45cb-9901-486d7458fd4e", "solution": "import numpy as np\n\nclass CustomNovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, attractiveness):\n            beta0 = 1.0\n            gamma = 0.1\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-attractiveness) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), 1.0) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), 0.0)\n        return best_solution", "name": "CustomNovelMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search for black box optimization in a balanced exploration-exploitation framework.", "configspace": "", "generation": 28, "fitness": 0.08516768438290664, "feedback": "The algorithm CustomNovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.19120556982431314, 0.21638450343239168, 0.17020474008499953, 0.12068531381342817, 0.13523516040402972, 0.14878810487618344, 0.14016513604944958, 0.18085483179843065, 0.17393547671533738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828526747612215, 0.06644179850273924, 0.04639684519119325, 0.04067593382874568, 0.04158730269938116, 0.05910263195832899, 0.043414496618515486, 0.04297067963698986, 0.04453675725299833, 0.026758253342838323, 0.04595343051912382, 0.03296847991962881, 0.05073003544155985, 0.04162354685730063, 0.013631715830106472, 0.028942728003913176, 0.02927807149801842, 0.037913885923359536, 0.05277336281219325, 0.05785422762893744, 0.05935127538389484, 0.05500306690695145, 0.046591182969185296, 0.042650803191123465, 0.04973770002772049, 0.04605068702483328, 0.046887954816013044, 0.08810252763564308, 0.05005258330780249, 0.05652092025001587, 0.051280612772683365, 0.08455592181978933, 0.04698217054606579, 0.03537040966279659, 0.05278723181358458, 0.0015650219308861457, 0.15839902571771947, 0.1259914914634801, 0.11239123163199916, 0.11694771525161107, 0.09045089300184539, 0.0883937096373355, 0.11297347456812079, 0.15371102956313276, 0.08572723084586598, 0.0015207603763783828, 0.011987175120577787, 9.999999999998899e-05, 0.01726335442793625, 0.009934664294679929, 9.999999999998899e-05, 0.0078051045368275895, 0.04206265142124688, 0.007517923364471768, 0.012622089212809828, 0.01647768430611718, 0.004029928130498073, 0.03566124136965754, 0.021033911209920708, 9.999999999998899e-05, 0.02955069205424188, 0.01933912307558061, 0.007954698983041242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0460943311244173, 0.05546610280041242, 0.0886080660734051, 0.01967893933239362, 0.048390111398444735, 0.00770431058442933, 0.06398519051833174, 0.07635520261542683, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1990164026640564, 0.21513206364770565, 0.2161877816311314, 0.18192203885685865, 0.18888590254396997, 0.17518505204058765, 0.1775734690665719, 0.2080946278346003, 0.19524251629278788, 0.01722641090268584, 0.04125066746045325, 0.023039341184285522, 0.048613316606939794, 0.0538379874003474, 0.05613748171554689, 0.03518671448144106, 0.07770303982070781, 0.03679139676942578, 0.112953103235504, 0.09735272485506707, 0.09440787504425352, 0.0946752439573263, 0.11517117860679027, 0.09300368978782914, 0.0948091179811178, 0.13773961810793012, 0.07792692249329791, 0.15216122633738183, 0.1893689365661747, 0.14702185019284242, 0.2108141300627443, 0.19152823382100237, 0.17744068248798817, 0.14032039542040275, 0.14611336022901544, 0.14122978039108036, 0.10684474609657812, 0.1330347817983386, 0.10968577319650008, 0.1474820355855696, 0.13683944215933042, 0.1193730652393149, 0.10018601931414273, 0.11057433503424674, 0.07838653224493752, 0.1585592572228557, 0.18066094593209092, 0.17553730166735115, 0.15885594412975368, 0.1969198536003356, 0.15966315299915457, 0.14344530601370242, 0.16487551998780636, 0.15521430484303178, 0.12845065235298647, 0.16452604292718442, 0.14981963061654313, 0.1497430526669319, 0.16082291988493103, 0.1487604730423524, 0.15782941864805655, 0.1656568900191755, 0.16305484811925886, 0.12163339816389107, 0.16610208515710423, 0.12314630953287087, 0.21409014837538964, 0.12499778596116451, 0.2005598453891977, 0.15926985546519956, 0.11277632792240488, 0.1135823622364569, 0.177752389135042, 0.15037411622879004, 0.14243778398669404, 0.14297877276510407, 0.23880153449779784, 0.10146094009602002, 0.10266451754783446, 0.12511189393851097, 0.13630979999344905, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18189305246288678, 0.18034742844688212, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05490964935627507, 0.0602391056435887, 0.06190958943091285, 0.05731416951100965, 0.061450036435630184, 0.05408784597443428, 0.07371630937649976, 0.0685649089765078]}, "mutation_prompt": null}
{"id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 29, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "06c47a89-9ca4-4774-a033-806f2b35cc22", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "853c140f-61b5-4151-9947-6bac142ddbc3", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "00732d63-d971-4cdc-95a2-d1046a19c0fb", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "2b22b376-31b1-4631-b329-3e0c409e4f90", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "5964cb08-b19e-454b-8ed5-2b07067a5596", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "ecf959f3-72aa-41b8-974b-601b1b4a20b0", "solution": "# import numpy as np\n\nclass CustomAdaptiveHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.adaptive_threshold = 0.35\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < self.adaptive_threshold:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomAdaptiveHybridMetaheuristicAlgorithm", "description": "A novel Metaheuristic Algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search with adaptive strategy switching for optimization on a black box function.", "configspace": "", "generation": 34, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomAdaptiveHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "24fbdeb8-a2cf-449b-b816-2c05bb27538a", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "45d279de-6e9f-4170-881e-813d21e9d3e5", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "aed64632-a037-406c-ac2d-55c6af0db9d8", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "84396af1-e7e5-4b15-b4c0-f3663fe58edc", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "df96a81a-e2fb-40fc-a77a-196f575095d8", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "cc6dbc41-8c0b-47ff-acb2-80c1a0a42e45", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "e985ee50-195b-4562-b7b8-a1da7ff95a7f", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "6bbd68e7-973c-4d91-8c5b-7a1ba55a851e", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search with a refined strategy to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 42, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "d91b4e55-b8f6-4a99-8792-c7821f313195", "solution": "# import numpy as np\n\nclass CustomAdaptiveMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomAdaptiveMetaheuristicAlgorithm", "description": "Custom Metaheuristic Algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search for adaptive black box optimization.", "configspace": "", "generation": 43, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomAdaptiveMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "862e0d43-53f1-4e6d-b630-7bc7aa27238a", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.pso_inertia_weight = 0.7\n        self.pso_cognitive_weight = 1.5\n        self.pso_social_weight = 1.5\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def pso_move(current, best):\n            inertia_velocity = self.pso_inertia_weight * (current - best)\n            cognitive_velocity = self.pso_cognitive_weight * np.random.rand(self.dim) * (best - current)\n            social_velocity = self.pso_social_weight * np.random.rand(self.dim) * (best - current)\n            new_position = current + inertia_velocity + cognitive_velocity + social_velocity\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [pso_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = pso_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Improving a hybrid optimization approach by incorporating Particle Swarm Optimization to enhance exploration and exploitation balance for black box function optimization.", "configspace": "", "generation": 44, "fitness": 0.08026370132248484, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.1797925835060048, 0.1618097081924148, 0.14368467157456055, 0.16285015296236038, 0.12961785682235072, 0.14526424317255804, 0.1511332100776539, 0.12294775592529328, 0.14653748000344569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030316409493099994, 0.023335927354644292, 0.03588933464084876, 0.030978076090958928, 0.03373847597607238, 0.05435297043350096, 0.026904936350126585, 0.03622297640713401, 0.039488096093884484, 0.016769201097408093, 0.013109872447165438, 0.036102457513315866, 0.0159432294268379, 0.02544179941283453, 0.019572946871484254, 0.026988102764641142, 0.041980736134485386, 0.015693869306622754, 0.07330984404727225, 0.5618409905240574, 0.10580035836450352, 0.11404803592282786, 0.10336413237305875, 0.08836322790816664, 0.13406425557264834, 0.2359622315421639, 0.08645710990762923, 0.024651458432361717, 0.04093394428566011, 0.04026429436846479, 0.04547184334067056, 0.04553468538725991, 0.05738846477121928, 0.02517604630603909, 0.0438172584084463, 0.037080629091805206, 0.09741867972782692, 0.07537288112938945, 0.13903557709721992, 0.1052611082578867, 0.09660531536265515, 0.07293508787578162, 0.07255612952219304, 0.10631113825580851, 0.049502149884545044, 9.999999999998899e-05, 0.006353397028878716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021879320075764985, 0.00378821816620567, 0.021557173346644087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019523155839578643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04674601099299325, 0.03555402043109279, 0.09154540248953913, 0.030168049562251165, 0.027068000069552012, 0.01046835545643554, 0.08546176775025849, 0.04275954540217586, 0.002138917825457276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.170099603014083, 0.2162782471092135, 0.18015089043862387, 0.17139490858883366, 0.21205338459061573, 0.15489636490459868, 0.16395279563752407, 0.17128844386842323, 0.17968768697291637, 0.06238432847718378, 0.025024831802537117, 0.01920720258493125, 0.025844337464925093, 0.08404452349115965, 0.034983327623570926, 0.028567039311254816, 0.03509402806101136, 0.05396589413669939, 0.13376056786683166, 0.10543233368209348, 0.11144865669267323, 0.12611142866761915, 0.11728313674497581, 0.12016373035087324, 0.10468774717200957, 0.11749986317281913, 0.11494465654282127, 0.14965912242660906, 0.16369121439554435, 0.15761809902254842, 0.184257675791745, 0.15221475049404742, 0.15109816602676673, 0.14972621063952396, 0.13928146729662216, 0.19533997175649898, 0.09095081781039627, 0.08375018439042137, 0.08956965973172992, 0.09506747096223933, 0.09079304725019499, 0.08494404743604878, 0.07958927504835878, 0.09347920956221001, 0.10986221543705321, 0.15311493981493407, 0.16466150854073947, 0.15327974747958217, 0.16047374477393572, 0.17213954615415716, 0.152250202594704, 0.13910354089101384, 0.16120420612531705, 0.15403827398768732, 0.13122489009785354, 0.08838378928278545, 0.11991426122390836, 0.11880776849344532, 0.0804935661733247, 0.11244364481223312, 0.09783334248903086, 0.1175283995470785, 0.11401352915037655, 0.1504347683470333, 0.2802652224770159, 0.09048547599974976, 0.14846372282095233, 0.1326449083280662, 0.11863500454080023, 0.18127697456712832, 0.11584996087827071, 0.1096935839850286, 0.11589594115687885, 0.09173084651733421, 0.0906199153909576, 0.10773086298365164, 0.21801265322715146, 0.07688938173395798, 0.18053736219469463, 0.10068420073664763, 0.10290420378058462, 0.18780224160267467, 0.17762776285426918, 0.1895883209881355, 0.20541863524662918, 0.1864074290476343, 0.20190087756098496, 0.1932400110496567, 0.21605227450154785, 0.2165703650963966, 0.043936541260102935, 0.06286244550203413, 0.04569212735407746, 0.060460378011565785, 0.05372216191991519, 0.0599618108002975, 0.043281939812574444, 0.04460448747436363, 0.06780931573856419]}, "mutation_prompt": null}
{"id": "3e256541-2f40-498f-a8e5-c343caa587ad", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "78c8d27d-c090-49c6-b612-56db1b98421b", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "A metaheuristic algorithm that combines Firefly Algorithm, Differential Evolution, and Harmony Search for balancing exploration and exploitation in black box optimization tasks.", "configspace": "", "generation": 46, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "b2cab839-b274-4305-9f81-39f33ac03ae2", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "9bceac01-a312-4677-8d94-1acd63111bfb", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "4aa56631-3934-4299-a894-d1503a658933", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "42aebf9c-9205-42af-a939-7e3cc8fb8816", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Optimizing black box functions using a combination of Firefly Algorithm, Differential Evolution, Harmony Search, and a novel modification strategy to balance exploration and exploitation efficiently.", "configspace": "", "generation": 50, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "3a714a94-268c-4418-b82b-360c1a8bede9", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "3db4b906-3fa4-422c-a437-4ad0f7c1f61b", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "3890a578-211c-4203-b194-f5387803414b", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Optimizing black box functions by combining firefly algorithm, differential evolution, and harmony search with adaptive strategy updates.", "configspace": "", "generation": 53, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "417bd032-2bdf-4276-8d79-dac7153dc7a8", "solution": "import numpy as np\n\nclass EnhancedMetaCollaborativeHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.change_prob = 0.35\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < self.change_prob:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "EnhancedMetaCollaborativeHybridOptimizer", "description": "Introducing a Meta-Collaborative Hybrid Optimization Framework amalgamating Firefly Algorithm, Differential Evolution, and Harmony Search with adaptive probabilities to enhance black box function optimization.", "configspace": "", "generation": 54, "fitness": 0.08784367932309689, "feedback": "The algorithm EnhancedMetaCollaborativeHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "ad15d93c-080f-4d27-b461-10516c09b343", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "c2a313f4-3ede-48ca-92e4-5296638873de", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "a6b28f78-1c9d-49a2-9bca-fb3e327daae8", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "75729d8d-0d20-4dc8-bea5-0c1bd3f98ae3", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "ecaaaee4-01fb-4487-bd67-ff7feef32b31", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithmEnhanced", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search with dynamic balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 59, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithmEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "6169697c-1c9e-4209-803f-1a2b853bdd2d", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "8a174002-0177-408d-b741-5fca303d5e63", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "ddd0ebc4-d74a-49b5-8a7a-1629912aec54", "solution": "import numpy as np\n\nclass DynamicMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def dynamic_firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def dynamic_harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def dynamic_differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [dynamic_firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = dynamic_differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = dynamic_firefly_move(best_solution, dynamic_harmony_search())\n        return best_solution", "name": "DynamicMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm integrating Firefly Algorithm, Differential Evolution, and Harmony Search with dynamic adaptation for balancing exploration and exploitation in black box function optimization.", "configspace": "", "generation": 62, "fitness": 0.08784367932309689, "feedback": "The algorithm DynamicMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "c0ecf19f-f693-4711-86f8-bb7da9d7b06e", "solution": "import numpy as np\n\nclass CustomEnhancedHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomEnhancedHybridMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm that combines Firefly Algorithm, Differential Evolution, and Harmony Search with enhanced balance between exploration and exploitation for optimizing black box functions in a constrained search space.", "configspace": "", "generation": 63, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomEnhancedHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "45d609fc-a883-46b7-b39f-2848a3529dcd", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "5eeb3268-e8f2-462a-9f1a-271acb558d45", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search with probability-based strategy adaptation for black box function optimization.", "configspace": "", "generation": 65, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "70f35278-abe7-4e12-a920-03387ac08f38", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "c068fe68-617f-4dbe-9632-46bdadf9b18a", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "78098259-b08e-456c-acc2-b1703fcc94b7", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "660a0844-cd8e-4981-a123-5ca4aa9df395", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Combining Firefly Algorithm, Differential Evolution, and Harmony Search with probabilistic strategy updates for black box function optimization.", "configspace": "", "generation": 69, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "cba9391c-7677-4153-9d51-5941bc04cbd6", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "AdaptiveHybridMetaheuristicAlgorithm", "description": "Balancing exploration and exploitation in black box function optimization by integrating Firefly Algorithm, Differential Evolution, and Harmony Search with adaptive line choices.", "configspace": "", "generation": 70, "fitness": 0.08784367932309689, "feedback": "The algorithm AdaptiveHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "9ecb40ed-ede9-4152-9078-03518be91561", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.prob_change = 0.35\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < self.prob_change:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search with adaptive probability control for black box optimization in continuous search spaces.", "configspace": "", "generation": 71, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "79df639d-dd58-4757-8739-9bc3cd978bd0", "solution": "# import numpy as np\n\nclass SelfAdaptiveMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.adaptive_param = 0.35  # Self-adaptive parameter\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < self.adaptive_param:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "SelfAdaptiveMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach with a self-adaptive metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search for efficient black box function optimization.", "configspace": "", "generation": 72, "fitness": 0.08784367932309689, "feedback": "The algorithm SelfAdaptiveMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "a37f2a1d-156b-4c07-9710-6d4ccda3e301", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "8b9bdc20-9a58-4692-8250-5a6cec10f0fd", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "8b12834c-44e9-4c9f-8187-be29f0854049", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Improving a hybrid optimization strategy by introducing a modified Firefly Algorithm, Differential Evolution, and Harmony Search for efficient exploration and exploitation in black box function optimization.", "configspace": "", "generation": 75, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "ec445342-e355-4280-babc-b64e14c43796", "solution": "import numpy as np\n\nclass HybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "HybridMetaheuristicAlgorithm", "description": "HybridMetaheuristicAlgorithm: Integrating Firefly Algorithm, Differential Evolution, and Harmony Search with dynamic strategy adaptation for efficient black box optimization.", "configspace": "", "generation": 76, "fitness": 0.08784367932309689, "feedback": "The algorithm HybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "8d1e580c-ac26-4a74-8ab1-d2583a9424b5", "solution": "# import numpy as np\n\nclass CustomAdaptiveHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.firefly_adapt_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best, gamma):\n            beta0 = 1.0\n            step_size = gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim), self.firefly_adapt_gamma) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search(), self.firefly_adapt_gamma)\n        return best_solution", "name": "CustomAdaptiveHybridMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search with adaptive parameters to optimize black box functions within a specified budget of function evaluations.", "configspace": "", "generation": 77, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomAdaptiveHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "850b63ba-46b5-43df-8e2e-be91cb6cfb85", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search with a refined strategy to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 78, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "dcb4f832-e55c-4b9b-950b-e072b92ffedc", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "145b0179-731e-4a6f-a809-44f6911af539", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "0538a348-529b-45e3-b30b-8a73e6581862", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "2075e371-c5b0-46a7-a128-3cb0ab0818c3", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution\n", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Integrating Firefly Algorithm, Differential Evolution, and Harmony Search while emphasizing exploration through a probabilistic strategy update.", "configspace": "", "generation": 82, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "3ddeeaf6-1307-4fef-950f-c296c590e65b", "solution": "# import numpy as np\n\nclass CustomAdaptiveHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n        self.explore_chance = 0.35\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < self.explore_chance:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomAdaptiveHybridMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search with adaptive parameter tuning to optimize black box functions efficiently.", "configspace": "", "generation": 83, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomAdaptiveHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "c215bf92-5bdd-4ddc-82e9-2244b1e087ec", "solution": "import numpy as np\n\nclass MetaEvolutionaryFramework:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "MetaEvolutionaryFramework", "description": "Introducing a Meta-Evolutionary Framework for Black Box Optimization by combining Evolutionary Strategies, Differential Evolution, and Firefly Algorithm with Harmony Search for a holistic approach to balancing exploration and exploitation.", "configspace": "", "generation": 84, "fitness": 0.08784367932309689, "feedback": "The algorithm MetaEvolutionaryFramework got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "315aa820-a48d-454a-b7fb-468900dd1a88", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "5f489054-eab8-491a-befb-0816ece4a650", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "f4cbaa3c-8153-4083-8bb2-8fd037e56e99", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm combining Firefly Algorithm, Differential Evolution, and Harmony Search with a refined strategy for balancing exploration and exploitation in black box function optimization.", "configspace": "", "generation": 87, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "4b65352b-1057-4457-9627-8f13841af036", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "8e729e91-560a-4cc6-873f-347e92fecffd", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "71368ee1-724a-49e2-92c0-e3dceb32a459", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "75420bf9-b7e1-4d5f-98a3-3aaf9b8089b9", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm that combines Firefly Algorithm, Differential Evolution, and Harmony Search to optimize black box functions efficiently.", "configspace": "", "generation": 91, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "dd3b43fc-2721-4315-9edc-a05f94117186", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "f8e8fa73-f8ea-4562-9e5d-17611920654a", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "4dceb4ae-27f9-411a-8739-e29d9f9080aa", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "A metaheuristic algorithm that combines Firefly Algorithm, Differential Evolution, Harmony Search, and a novel update strategy to optimize black box functions efficiently.", "configspace": "", "generation": 94, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "bd22fbe4-9295-4bfa-b6a6-8a87a5a70375", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "e193dd97-6261-4e40-a6d2-7ebfee09207e", "solution": "# import numpy as np\n\nclass EnhancedHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "EnhancedHybridMetaheuristicAlgorithm", "description": "Combining Firefly Algorithm, Differential Evolution, and Harmony Search within a metaheuristic framework with adaptive line selection for enhanced black box optimization.", "configspace": "", "generation": 96, "fitness": 0.08784367932309689, "feedback": "The algorithm EnhancedHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "3bf3d8a3-10d3-47d1-9f09-2d19cb7f7fa4", "solution": "import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Combination of Firefly Algorithm, Differential Evolution, and Harmony Search with enhanced parameter tuning to optimize black box functions efficiently.", "configspace": "", "generation": 97, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "1faef80a-44ce-42ad-89b3-e401bde8abea", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Enhancing a hybrid optimization approach by integrating Firefly Algorithm, Differential Evolution, and Harmony Search to balance exploration and exploitation for black box function optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
{"id": "4b45f7a7-0a42-4ed2-8983-8981934fd1a4", "solution": "# import numpy as np\n\nclass CustomHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.harmony_memory_size = 5\n        self.iterations = 100\n        self.de_mut_prob = 0.7\n        self.de_cross_prob = 0.9\n        self.firefly_gamma = 0.1\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def firefly_move(current, best):\n            beta0 = 1.0\n            step_size = self.firefly_gamma * np.linalg.norm(current - best)\n            new_position = current + beta0 * np.exp(-1.0) * (best - current) + step_size * (np.random.rand(self.dim) - 0.5)\n            return np.clip(new_position, -5.0, 5.0)\n\n        def harmony_search():\n            hm = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n            for _ in range(self.iterations):\n                harmony_memory_fitness = np.array([objective_function(x) for x in hm])\n                best_harmony = hm[np.argmin(harmony_memory_fitness)]\n                new_harmony = np.clip(best_harmony + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                random_index = np.random.randint(self.harmony_memory_size)\n                if objective_function(new_harmony) < harmony_memory_fitness[random_index]:\n                    hm[random_index] = new_harmony\n            return best_harmony\n\n        def differential_evolution(population):\n            mutated_population = []\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.de_mut_prob * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.de_cross_prob\n                trial = np.where(crossover, mutant, population[i])\n                if objective_function(trial) < objective_function(population[i]):\n                    mutated_population.append(trial)\n                else:\n                    mutated_population.append(population[i])\n            return np.array(mutated_population)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.budget):\n            population = [firefly_move(best_solution, np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(self.population_size)]\n            population = differential_evolution(population)\n            best_solution = population[np.argmin([objective_function(x) for x in population])]\n            if np.random.rand() < 0.35:\n                best_solution = firefly_move(best_solution, harmony_search())\n        return best_solution", "name": "CustomHybridMetaheuristicAlgorithm", "description": "Combining Firefly Algorithm, Differential Evolution, and Harmony Search to optimize black box functions by balancing exploration and exploitation through dynamic strategy refinement.", "configspace": "", "generation": 99, "fitness": 0.08784367932309689, "feedback": "The algorithm CustomHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a2812fc3-f638-4b1f-ad9a-d774a8fdd1ec", "metadata": {"aucs": [0.20517660702300933, 0.2019799921875679, 0.1800516779452369, 0.12182449397448492, 0.142411721835075, 0.12157437888992828, 0.15232117412488078, 0.18085483179843065, 0.15543440387219287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04840545095250692, 0.07224845540952396, 0.06118935740699649, 0.039425531364419064, 0.05085902792585184, 0.05910263195832899, 0.047901138940741994, 0.040417136137941845, 0.04471635070432545, 0.03067212476939296, 0.050336164827369245, 0.03060741629431163, 0.04326460579034541, 0.03278273863769032, 0.03088302311221547, 0.03016422664628049, 0.03330788816741026, 0.044154845254028574, 0.055789388840187915, 0.05871216058323425, 0.05820374242649595, 0.05439608512652194, 0.04734740111900426, 0.04154134189205072, 0.04880268443404201, 0.049422371900865625, 0.04506440305678294, 0.045391121190015093, 0.08654240375158573, 0.037847599884722194, 0.040574473832379554, 0.07224627241464965, 0.05051236178766161, 0.07218443933952057, 0.06954162386032181, 0.01159455384154684, 0.1668819121029399, 0.13622858368174418, 0.10525725363897276, 0.14084760882354952, 0.10094661192378429, 0.10108775116526303, 0.12244157940385281, 0.14371558985680766, 0.1007548083053511, 0.007211706379777749, 0.027117208955086736, 9.999999999998899e-05, 9.999999999998899e-05, 0.009934664294679929, 0.0014438411589035027, 0.022623484930946902, 0.019481775768288356, 0.0210137485569154, 0.039685485428419986, 0.06787950412025712, 0.019746487654658584, 0.022734850423497655, 0.055302144331661696, 0.009162108944429148, 0.03395996117528899, 0.02970938290818781, 0.024749466258174868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458933467902827, 0.050627394409918036, 0.0886080660734051, 0.037182925417652446, 0.051290749323608775, 0.04427723399423611, 0.07365835376797036, 0.06979604974692499, 0.03475368932763745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005678232328924282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21942785376161322, 0.20441063877658283, 0.24100404129658826, 0.194828903282519, 0.18217781610366834, 0.18965536152496576, 0.21543080472861775, 0.23784971362403862, 0.2056895711246559, 0.021172140229712588, 0.0454908621286908, 0.025457751454561195, 0.050284798838759026, 0.045700117071002744, 0.05612440861418799, 0.03468848214720188, 0.07620557545622209, 0.03644554854542348, 0.10667677075576287, 0.10793863959435146, 0.092215332751305, 0.11492113750631328, 0.09848110276465305, 0.0980033241631314, 0.0986562700107847, 0.13015733761347947, 0.08639513078767191, 0.16558727912523352, 0.1893689365661747, 0.15171700778474528, 0.2108141300627443, 0.19152823382100237, 0.17845366106743443, 0.1447649092293879, 0.15591746942120555, 0.13315764284170106, 0.10240036412350395, 0.1330347817983386, 0.1015843731857321, 0.1474820355855696, 0.13683944215933042, 0.11959669885453861, 0.10562213872260129, 0.11793906528830234, 0.0895455859652402, 0.17039232803047488, 0.20478217800552734, 0.17553730166735115, 0.15976792046614263, 0.169415335880428, 0.16146283209450107, 0.15304020548031572, 0.16410391270205127, 0.21940885150618428, 0.13984279326179827, 0.1666973759866356, 0.13343796497959737, 0.1549362225562425, 0.1612877742607005, 0.13963934635080422, 0.15062504930649445, 0.15862293117591308, 0.1626994840801279, 0.15837522261215675, 0.1663528319833396, 0.1094645838267716, 0.233774184539287, 0.1413164813399821, 0.110711718429509, 0.14723612499410976, 0.18965132216926728, 0.10908866601358347, 0.24091992774636573, 0.1653095725253304, 0.1423433529632201, 0.13712744549429934, 0.11085542790659852, 0.08542215157545219, 0.11470610761996891, 0.12341975642916403, 0.13364609625913293, 0.20446711938253526, 0.21838724780363417, 0.20124134099535895, 0.18235486425267633, 0.18275597385047437, 0.20741620382279302, 0.20492815144843968, 0.21620691400407366, 0.20276065333938809, 0.07899260272420994, 0.05731937161220835, 0.06509222912521984, 0.04743189365990419, 0.05636554987136155, 0.05219159091335901, 0.05373167961281966, 0.07361386369326339, 0.07085213670630852]}, "mutation_prompt": null}
