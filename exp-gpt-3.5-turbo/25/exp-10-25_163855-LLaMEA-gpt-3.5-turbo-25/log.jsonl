{"id": "7663e528-a340-4bf0-9409-4e3911290455", "solution": "import numpy as np\n\nclass HybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-6\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(10):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.5 * (pbest_pos[i] - swarm_pos[i]) + 0.5 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 10)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "HybridPSOLS", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Local Search for solving black box optimization problems efficiently.", "configspace": "", "generation": 0, "fitness": 0.0792216918230861, "feedback": "The algorithm HybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.23246776855127138, 0.1648568891318435, 0.29482774397213385, 0.10936664510205063, 0.08186279213421621, 0.1501010263906548, 0.13445193417236656, 0.13640227646932523, 0.08077630619290177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050833184952406185, 0.04451563853813256, 0.011163388223350168, 0.0855400229995219, 0.040969415719545266, 0.0747090433004729, 0.06482853024008017, 0.042350015175946054, 0.06447549793492746, 0.07101080435282237, 0.03809353225328471, 0.034511127576302036, 0.05662733545913956, 0.043097640149356464, 0.01889156107370127, 0.044293620749822904, 0.004936607899816536, 0.03018953236564159, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.09083427483875495, 0.02159797326224766, 0.03916117589674195, 0.0858641561794784, 0.06104116778390267, 0.0567242347966479, 0.07747411660830728, 0.02232528078305729, 9.999999999998899e-05, 0.1576312296076432, 0.11434350820217476, 0.09316607687167977, 0.07216318340421835, 0.048542718707957455, 0.044211008149053654, 0.07928566527692182, 0.11478259530236379, 0.0866187089070305, 0.09313061536412426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007526409623681896, 9.999999999998899e-05, 0.14942565339985137, 9.999999999998899e-05, 9.999999999998899e-05, 0.019479985700864177, 0.010324481425301735, 0.03967126044974234, 0.1059490539116843, 0.10914009348408893, 0.029605692697770802, 0.09068142392549439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06729494850607376, 0.0239930718940643, 0.07657771891177323, 0.01057474913850509, 9.999999999998899e-05, 9.999999999998899e-05, 0.07425123954152568, 0.05108891549664951, 0.03890395929028967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038699965571428185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.46799518717205724, 0.2129592238473288, 0.20410017013253567, 0.13808948423218603, 0.1572820539236096, 0.11615103583907727, 0.17652121847557178, 0.2009355175843217, 0.23412736317418303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04514394593790916, 0.028500566045837283, 0.04584465751544009, 0.056858646982233196, 0.03936478858095216, 0.06600446638322899, 0.1473579666812399, 0.06735693451091307, 0.07316297317129372, 0.10641657513041558, 0.11006017075160801, 0.09575435189419257, 0.08808199726801991, 0.09454995657379184, 0.12194920143476973, 0.13070009069529875, 0.17486958230186844, 0.1362929081035541, 0.14708099762427396, 0.1894207955946554, 0.1602022878892756, 0.12959396384836186, 0.22301476183147606, 0.11134689234352335, 0.09073978571186725, 0.0784376651267985, 0.060250800009238104, 0.1066818029249933, 0.13647171241931122, 0.09375894327872047, 0.07389239564606198, 0.09956697515513713, 0.04896450653348605, 0.2086762429549771, 0.13276210439763414, 0.13641846599866658, 0.14156413128217005, 0.16284336054052506, 0.1495934749718253, 0.16057502036596638, 0.1891990196973068, 0.1422087464463211, 0.14245602376132827, 0.16689300805520724, 0.15485812395860554, 0.15625707105044162, 0.15460221896450077, 0.158708262765632, 0.14477308160271618, 0.18181182873075807, 0.15214839046287565, 0.16474933897148203, 0.18177367061205918, 0.11273339414573125, 0.1741680982188717, 0.1652910733544175, 0.11375757101447848, 0.11047240828742122, 0.11736355414529775, 0.10565870379473186, 0.05075606264151378, 0.10309101393533437, 0.14572685526715867, 0.09831274885676844, 0.14645051382101815, 0.05334745261826834, 0.1557835519802898, 0.11591210563918652, 0.10598590363365712, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.1605623481099132, 0.19338828706925681, 0.15073790698373324, 0.18749227340365593, 0.14677969541592029, 0.1531123171520996, 0.058500907308093875, 0.04611008965257857, 0.05061196741712304, 0.04516386075941914, 0.0449786218680891, 0.0734839723519517, 0.05603660503052821, 0.04558285818953012, 0.05525129085180558]}, "mutation_prompt": null}
{"id": "897d9af8-c7df-45b4-bd8f-70382cf20cae", "solution": "import numpy as np\n\nclass RefinedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        \n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-6\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(10):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.5 * (pbest_pos[i] - swarm_pos[i]) + 0.5 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 10)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "RefinedHybridPSOLS", "description": "A metaheuristic algorithm that combines Particle Swarm Optimization (PSO) with Local Search to efficiently optimize black box functions within a limited budget, with a 25% probability of refining the algorithm.", "configspace": "", "generation": 1, "fitness": 0.0792216918230861, "feedback": "The algorithm RefinedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "7663e528-a340-4bf0-9409-4e3911290455", "metadata": {"aucs": [0.23246776855127138, 0.1648568891318435, 0.29482774397213385, 0.10936664510205063, 0.08186279213421621, 0.1501010263906548, 0.13445193417236656, 0.13640227646932523, 0.08077630619290177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050833184952406185, 0.04451563853813256, 0.011163388223350168, 0.0855400229995219, 0.040969415719545266, 0.0747090433004729, 0.06482853024008017, 0.042350015175946054, 0.06447549793492746, 0.07101080435282237, 0.03809353225328471, 0.034511127576302036, 0.05662733545913956, 0.043097640149356464, 0.01889156107370127, 0.044293620749822904, 0.004936607899816536, 0.03018953236564159, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.09083427483875495, 0.02159797326224766, 0.03916117589674195, 0.0858641561794784, 0.06104116778390267, 0.0567242347966479, 0.07747411660830728, 0.02232528078305729, 9.999999999998899e-05, 0.1576312296076432, 0.11434350820217476, 0.09316607687167977, 0.07216318340421835, 0.048542718707957455, 0.044211008149053654, 0.07928566527692182, 0.11478259530236379, 0.0866187089070305, 0.09313061536412426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007526409623681896, 9.999999999998899e-05, 0.14942565339985137, 9.999999999998899e-05, 9.999999999998899e-05, 0.019479985700864177, 0.010324481425301735, 0.03967126044974234, 0.1059490539116843, 0.10914009348408893, 0.029605692697770802, 0.09068142392549439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06729494850607376, 0.0239930718940643, 0.07657771891177323, 0.01057474913850509, 9.999999999998899e-05, 9.999999999998899e-05, 0.07425123954152568, 0.05108891549664951, 0.03890395929028967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038699965571428185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.46799518717205724, 0.2129592238473288, 0.20410017013253567, 0.13808948423218603, 0.1572820539236096, 0.11615103583907727, 0.17652121847557178, 0.2009355175843217, 0.23412736317418303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04514394593790916, 0.028500566045837283, 0.04584465751544009, 0.056858646982233196, 0.03936478858095216, 0.06600446638322899, 0.1473579666812399, 0.06735693451091307, 0.07316297317129372, 0.10641657513041558, 0.11006017075160801, 0.09575435189419257, 0.08808199726801991, 0.09454995657379184, 0.12194920143476973, 0.13070009069529875, 0.17486958230186844, 0.1362929081035541, 0.14708099762427396, 0.1894207955946554, 0.1602022878892756, 0.12959396384836186, 0.22301476183147606, 0.11134689234352335, 0.09073978571186725, 0.0784376651267985, 0.060250800009238104, 0.1066818029249933, 0.13647171241931122, 0.09375894327872047, 0.07389239564606198, 0.09956697515513713, 0.04896450653348605, 0.2086762429549771, 0.13276210439763414, 0.13641846599866658, 0.14156413128217005, 0.16284336054052506, 0.1495934749718253, 0.16057502036596638, 0.1891990196973068, 0.1422087464463211, 0.14245602376132827, 0.16689300805520724, 0.15485812395860554, 0.15625707105044162, 0.15460221896450077, 0.158708262765632, 0.14477308160271618, 0.18181182873075807, 0.15214839046287565, 0.16474933897148203, 0.18177367061205918, 0.11273339414573125, 0.1741680982188717, 0.1652910733544175, 0.11375757101447848, 0.11047240828742122, 0.11736355414529775, 0.10565870379473186, 0.05075606264151378, 0.10309101393533437, 0.14572685526715867, 0.09831274885676844, 0.14645051382101815, 0.05334745261826834, 0.1557835519802898, 0.11591210563918652, 0.10598590363365712, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.1605623481099132, 0.19338828706925681, 0.15073790698373324, 0.18749227340365593, 0.14677969541592029, 0.1531123171520996, 0.058500907308093875, 0.04611008965257857, 0.05061196741712304, 0.04516386075941914, 0.0449786218680891, 0.0734839723519517, 0.05603660503052821, 0.04558285818953012, 0.05525129085180558]}, "mutation_prompt": null}
{"id": "5d5ad48b-372f-4f92-97db-505261dc31bc", "solution": "import numpy as np\n\nclass CuckooDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_cuckoos = 20\n        self.num_nests = 5\n        self.pa = 0.25\n\n    def __call__(self, func):\n        def levy_flight(scale=1.0):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v)**(1 / beta)\n            step *= scale\n            return step\n\n        def de(func):\n            pop = np.random.uniform(-5.0, 5.0, (self.num_nests, self.dim))\n            fitness = np.array([func(ind) for ind in pop])\n            best_idx = np.argmin(fitness)\n            best = pop[best_idx]\n            \n            for _ in range(self.budget):\n                new_pop = np.zeros((self.num_nests, self.dim))\n                for i in range(self.num_nests):\n                    idxs = np.arange(self.num_nests)\n                    np.random.shuffle(idxs)\n                    r1, r2, r3 = pop[idxs[:3]]\n                    mutant = r1 + 0.5 * (r2 - r3)\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    cross_points = np.random.rand(self.dim) < self.pa\n                    trial = np.where(cross_points, mutant, pop[i])\n                    if func(trial) < fitness[i]:\n                        pop[i] = trial\n                        fitness[i] = func(trial)\n                    if fitness[i] < func(best):\n                        best = pop[i]\n\n            return best\n\n        cuckoos = np.random.uniform(-5.0, 5.0, (self.num_cuckoos, self.dim))\n        best_cuckoo = cuckoos[np.argmin([func(cuck) for cuck in cuckoos])]\n        \n        for _ in range(self.budget // self.num_cuckoos):\n            step_size = levy_flight()\n            for i in range(self.num_cuckoos):\n                cuckoo = cuckoos[i] + step_size\n                cuckoo = np.clip(cuckoo, -5.0, 5.0)\n                if func(cuckoo) < func(best_cuckoo):\n                    best_cuckoo = cuckoo\n\n        return de(func)\n        ", "name": "CuckooDE", "description": "A novel metaheuristic algorithm based on a combination of Cuckoo Search and Differential Evolution for efficient black box optimization in continuous search spaces.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "7663e528-a340-4bf0-9409-4e3911290455", "metadata": {}, "mutation_prompt": null}
{"id": "d70e8138-c757-41c3-b454-228411fa3d17", "solution": "import numpy as np\n\nclass FineTunedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "FineTunedHybridPSOLS", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization.", "configspace": "", "generation": 3, "fitness": 0.08942715322098765, "feedback": "The algorithm FineTunedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7663e528-a340-4bf0-9409-4e3911290455", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "66023bbb-9861-453e-9ed2-151e4d751888", "solution": "import numpy as np\n\nclass FineTunedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "FineTunedHybridPSOLS", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "340e29a7-9414-4383-86b4-91743276a0c9", "solution": "import numpy as np\n\nclass FineTunedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "FineTunedHybridPSOLS", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "b9d77f6d-0f0d-4756-b8dc-e9a26cedf8a6", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "An enhanced hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Local Search utilizing adaptive parameters for efficient black box optimization.", "configspace": "", "generation": 6, "fitness": 0.08942715322098765, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "cb3e8b6a-1fb5-4355-90d1-aa0b111b9749", "solution": "import numpy as np\n\nclass DynamicHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "DynamicHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with dynamic exploration-exploitation balance for efficient black box optimization.", "configspace": "", "generation": 7, "fitness": 0.08942715322098765, "feedback": "The algorithm DynamicHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "66c92893-771b-46cc-a1ee-dc41cd254eb0", "solution": "import numpy as np\n\nclass FineTunedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "FineTunedHybridPSOLS", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "142e39df-9386-4ed0-8886-3a04620e4771", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    new_pos = swarm_pos[i] + 0.6 * (pbest_pos[i] - swarm_pos[i]) + 0.4 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "NovelMetaheuristicAlgorithm", "description": "A metaheuristic algorithm that combines Particle Swarm Optimization (PSO) with Local Search for efficient black box optimization with a probability-based strategy for line refinement.", "configspace": "", "generation": 9, "fitness": 0.08942715322098765, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.3081904407380627, 0.1888847342861717, 0.34653179105749443, 0.10868750775924385, 0.08432357497109355, 0.1525813839781751, 0.1338529370052609, 0.1385135001952993, 0.09727083855619856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06445877909771625, 0.07470374050940387, 0.04554969874355452, 0.07751161461533851, 0.06692410926714054, 0.05504521603358392, 0.06589692372526113, 0.03454777172913159, 0.05712770087540198, 0.06970546629369712, 0.036773588232992926, 0.024563492436067258, 0.08224780492144856, 0.039252178957065564, 0.013006313055856866, 0.0302046176338292, 0.029602515655636985, 0.0417966335447163, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12789361159923496, 0.08208385706583088, 0.050305249456365386, 0.09015134781246781, 0.059374850731652606, 0.0447017615905525, 0.06525747075809418, 0.06330624253926853, 9.999999999998899e-05, 0.1884463691116376, 0.1414327784135585, 0.11414926313699292, 0.10542765111498631, 0.14009598090258024, 0.05904580870584775, 0.08928744045824444, 0.12201558898021647, 0.09834784875355784, 0.13405687010616096, 0.03463699277650645, 9.999999999998899e-05, 9.999999999998899e-05, 0.012915764472744895, 9.999999999998899e-05, 0.21649511920324538, 9.999999999998899e-05, 9.999999999998899e-05, 0.0991047132296522, 0.0674546342628708, 0.050000575027539185, 0.061674820972396294, 0.12178417445054479, 0.13538443646977827, 0.15151189843034485, 0.12537908796155428, 0.010244382998444768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714987099690972, 0.024643745454934862, 0.0755246929523723, 0.014437704976511312, 9.999999999998899e-05, 9.999999999998899e-05, 0.07576985128233826, 0.05062016490718402, 0.05053470857727771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003960511176863801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3165037614539633, 0.2534410479222773, 0.18579569530105833, 0.14464393150543586, 0.1528368142839427, 0.13350207562904648, 0.2396764349428534, 0.20324911698477677, 0.23613523089391952, 0.03450739096926814, 0.007788244046141202, 9.999999999998899e-05, 0.0434317870422668, 0.051680184533469564, 0.04220769032003158, 0.07673163534937955, 0.05897461156632067, 0.04715199152814331, 0.07860172433929324, 0.17576450197179405, 0.08821268996360598, 0.11060635083542525, 0.10852972522114013, 0.1433300029240301, 0.1261060610960909, 0.07268257448507143, 0.07726393575557644, 0.12202434314908028, 0.15941164329610003, 0.18790806802736593, 0.14221394908227414, 0.19718765572451202, 0.18879854043209032, 0.15762386183965404, 0.21769242847373982, 0.13792399066470917, 0.08401151292721754, 0.10725194696470153, 0.10627093765033113, 0.14994995500223995, 0.19335398381161584, 0.15338106516609462, 0.09965197336602882, 0.12337923215116098, 0.09653981574746628, 0.18055879373434613, 0.189673296135771, 0.14947951065802523, 0.13397784182023864, 0.15958250680583186, 0.16026117964905184, 0.140499770320758, 0.18152685639527166, 0.13761123438644696, 0.1737520111470673, 0.16569667171675295, 0.16104455510612747, 0.16154365489386324, 0.15083676473272067, 0.1705896105982131, 0.1721327835298394, 0.17112344700921878, 0.1671324890366126, 0.11122849703158577, 0.18419621115112983, 0.10961635392039515, 0.17257793826463297, 0.16773966616262637, 0.14852971743272214, 0.11310366141685047, 0.11790181643849917, 0.16885007242176076, 0.05072839498517645, 0.12949308660176373, 0.25427961688717926, 0.10316480106654924, 0.14250190551952724, 0.24850817573584383, 0.16207661394130846, 0.22867914290757885, 0.11254774759656139, 0.14556739748749803, 0.128372137474824, 0.15054664964269937, 0.1458093706686131, 0.14969859692937226, 0.13993929362411184, 0.14969714796693134, 0.1260023634294377, 0.14689007985489466, 0.036146988993151385, 0.04476351254994637, 0.04116704000295979, 0.06383471237975846, 0.045420910766819866, 0.04635087075533284, 0.05285006627197364, 0.06282602749216781, 0.03696664533356053]}, "mutation_prompt": null}
{"id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "d70e8138-c757-41c3-b454-228411fa3d17", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "1e59c76f-1e07-48a7-ae1a-9b55ac34d57e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS_DynamicPop:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func, num_particles):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_num_particles = max(5, min(50, int(25 + np.random.normal(0, 5))))\n            new_pos, new_val = pso(func, new_num_particles)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS_DynamicPop", "description": "Enhancing EnhancedHybridPSOLS by incorporating a dynamic population size adjustment mechanism to adapt to the problem difficulty.", "configspace": "", "generation": 11, "fitness": 0.08386719729068837, "feedback": "The algorithm EnhancedHybridPSOLS_DynamicPop got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.239801919170464, 0.2554181851648265, 0.19037766177717608, 0.0924553295264412, 0.05719595212746609, 0.10800615077374354, 0.17276856179248, 0.15493440198002895, 0.12621724615343888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03587207481272614, 0.05833595429479832, 0.04690910910532131, 0.0333825187405542, 0.06198905473740901, 0.051411441702333804, 0.046498132313511076, 0.06214876626942967, 0.0497965902995704, 0.040772176872854504, 0.07234439911415125, 0.027048532082560084, 0.02351066110261857, 0.03878311711290261, 0.045860554184030344, 0.008620948596334, 0.024440529160859814, 0.012235767379264129, 0.027045946874615034, 0.04408982853706511, 0.035217277894035615, 0.026549271455923007, 0.0382460131769885, 0.025635594616662316, 0.02850355271135685, 0.034412598990423926, 0.03219134707747817, 0.01970881084592324, 0.09004206955553651, 0.04247484229574916, 0.06771409828247255, 0.013019400340342546, 0.06192249227268587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10363317276587591, 0.13647413362300143, 0.10704854400384556, 0.03637908318773475, 0.08774743096180537, 0.11813291203446552, 0.11697952123943778, 0.08113676973723283, 0.031015270579418774, 0.006620218579318826, 0.07252208658881154, 0.024690957815964643, 0.013550270638040818, 9.999999999998899e-05, 9.999999999998899e-05, 0.02811826928926564, 0.0659863190599772, 9.999999999998899e-05, 0.023758136282306608, 0.0288111990550155, 0.08463732685793968, 0.09738827165011354, 0.08688435709309761, 0.13383195707616147, 0.08457551366686078, 0.02525227264598784, 0.049202585522645115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362420850585026, 0.031120741763909554, 0.1265370232603391, 0.048806853556335184, 0.0546192149018343, 0.031180147254017854, 0.07952176636313979, 0.02974086043693336, 0.04733026135927065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19151943341656896, 0.21951837533211715, 0.16003275828541141, 0.14312600845980883, 0.11567935350937986, 0.13926688356476735, 0.23995017523504225, 0.16973936215680263, 0.19573701137813404, 0.02173594338486451, 0.0243754163607266, 0.039389695712933825, 0.04877044534225605, 0.010190207487105751, 0.05196849994837571, 0.041997501354271494, 0.025003857143456876, 0.04616149228324806, 0.12064724082990397, 0.21771625507214287, 0.19973096697883475, 0.1617266823501724, 0.11969849946804645, 0.09632846054122168, 0.07823800675907078, 0.08969301691336118, 0.1509820840933146, 0.17212651558157255, 0.1357484526223247, 0.16893227386476484, 0.18005307046242636, 0.16776030549785936, 0.2118558802457402, 0.19531972327844804, 0.19874047093628722, 0.18134561457106535, 0.12753979527807313, 0.06851210146148856, 0.09419361962995954, 0.14907462744635436, 0.08257374372547455, 0.12212580188356936, 0.17079247516038465, 0.10158160403155181, 0.09058579569922354, 0.1860236893829389, 0.2089551447498591, 0.17690053686370988, 0.21861322851705656, 0.1869737564092746, 0.19216397245774675, 0.21688486195647128, 0.17024521313555874, 0.21851414899019583, 0.16439011041860718, 0.16378108080920972, 0.1554167554329059, 0.1539113793179997, 0.17006257335925345, 0.1746018791748829, 0.17200989444386816, 0.16404469912495334, 0.16091977805014102, 0.13355400465527123, 0.10232936647323021, 0.06818269109569663, 0.07846313041385233, 0.5407805853771644, 0.14615031010390434, 0.09139327997423874, 0.08797227616823233, 0.1179585556451681, 0.14475209289228352, 0.08887664966295339, 0.11084303298840859, 0.11140039381193734, 0.07983634075398782, 0.07939126014234277, 0.08770044640336783, 0.07735117460944729, 0.07996488920695388, 0.1691273821688335, 0.17199715472452648, 0.15992700327179432, 0.15937545213378612, 0.17330896601638635, 0.17000675850572555, 0.1656607830647836, 0.17912106599013244, 0.14112708132418683, 0.03848662090427257, 0.06283495928357918, 0.059533688183536104, 0.05297496468763707, 0.08113434635491978, 0.053250749735045955, 0.07588659740355874, 0.04658669550415229, 0.06090911919033848]}, "mutation_prompt": null}
{"id": "2cb934a2-389c-4c38-b1b9-553e9e7a550b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "An enhanced hybrid optimization algorithm that combines Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters to efficiently optimize black box functions, with adjustments for exploration-exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "d9dfb4b9-12b3-4fe4-bcb3-a1a2540ce34f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "EnhancedHybridPSOLS algorithm combines Particle Swarm Optimization and Local Search with fine-tuned parameters and exploration-exploitation balance, with the introduction of adaptive population diversity maintenance.", "configspace": "", "generation": 13, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "790ac4c3-eb33-4d8f-9870-b1cca831dfdd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        def de(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    a, b, c = np.random.choice(self.num_particles, 3, replace=False)\n                    x_r1 = swarm_pos[a] + 0.5 * (swarm_pos[b] - swarm_pos[c])\n                    x_r1 = np.clip(x_r1, -5.0, 5.0)\n                    x_new = np.where(np.random.rand(self.dim) < 0.9, x_r1, swarm_pos[i])\n                    x_new_val = func(x_new)\n                    if x_new_val < swarm_val[i]:\n                        swarm_pos[i] = x_new\n                        swarm_val[i] = x_new_val\n\n            best_idx = np.argmin(swarm_val)\n            best_pos = swarm_pos[best_idx]\n\n            return best_pos, swarm_val[best_idx]\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS_DE", "description": "Enhancing EnhancedHybridPSOLS by incorporating Differential Evolution for improved exploration capabilities and quicker convergence in black box optimization tasks.", "configspace": "", "generation": 14, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "b710abeb-89fc-4d23-9249-6f4b69f83815", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "1c06a99e-bf76-4fb9-8eb3-21899f43a12f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "815b3f86-7e94-4fd0-bac2-51a462f00acf", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-4  # Increased epsilon for more exploration\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(20):  # Increased local search iterations\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "An enhanced metaheuristic algorithm, HybridPSOLS++, combines Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters and an increased exploration factor to improve convergence and exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "ef4b0225-42b2-4f71-83c0-e0a43a4bc085", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n                                # Adjust PSO parameters dynamically\n                                phi1 = max(0.5, phi1 - 0.05)\n                                phi2 = min(0.5, phi2 + 0.05)\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Improve exploration by dynamically adjusting the PSO parameters and the local search intensity.", "configspace": "", "generation": 18, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "f79eb057-bd8d-47e1-a039-1c17bb6fab67", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "c8971d09-1a59-43d9-b04b-3a02379a1603", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, enhancing exploration-exploitation balance through iterative improvement.", "configspace": "", "generation": 20, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "823b887a-ccbd-42f4-a5d4-03f1653be9b4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "c1428207-1eeb-44d9-a296-296c67a9de61", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Enhancing the exploration-exploitation balance in black box optimization through a novel metaheuristic algorithm blending Particle Swarm Optimization (PSO) with Local Search and fine-tuned parameters.", "configspace": "", "generation": 22, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "dae02fb0-ddff-4acb-a1ce-8560d12014eb", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Enhancing exploration-exploitation balance by incorporating a novel hybridization of Particle Swarm Optimization (PSO) and Local Search with tuned parameters and increased search intensity.", "configspace": "", "generation": 23, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "8f790cea-720f-444d-a4b9-aa26efa53132", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "58ad6879-692f-4e9d-b305-657ae62f6abe", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "b3e9db30-f385-47bb-a625-2bd7b39545cc", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "AdaptiveHybridPSOLS", "description": "A metaheuristic algorithm combining Particle Swarm Optimization and Local Search with adaptive parameter tuning for efficient exploration and exploitation in black box optimization tasks.", "configspace": "", "generation": 26, "fitness": 0.09285600815363108, "feedback": "The algorithm AdaptiveHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "ae6fc8d5-c202-47e9-ac7e-3999424c15b8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "7c083f01-e68d-4b8c-98c6-39f343db5397", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos\n", "name": "EnhancedHybridPSOLS", "description": "Enhancing the exploration-exploitation balance of the Hybrid PSO-LS algorithm through adaptive adjustments and improved local search mechanisms for effective optimization.", "configspace": "", "generation": 28, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "358fd808-3b81-4c63-9928-9bb172ff2db3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "24b28faf-d916-47a0-9dba-bb6fc77fd794", "solution": "import numpy as np\n\nclass DynamicEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "DynamicEnhancedHybridPSOLS", "description": "Enhancing exploration-exploitation balance in optimization by dynamically adjusting PSO parameters and incorporating local search for improved convergence on noiseless black box functions within a limited budget.", "configspace": "", "generation": 30, "fitness": 0.09285600815363108, "feedback": "The algorithm DynamicEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "7bcda09a-dc3e-4a65-bb9f-9217ada7f22e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "An enhanced metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Local Search for efficient black box optimization, emphasizing exploration and exploitation balance through fine-tuned parameters.", "configspace": "", "generation": 31, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "9f11ad68-cdaf-453c-b073-b44bae5d7739", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-3  # Adjusted local search intensity\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.75 + 0.1 * np.random.rand()  # Adjusted exploration rate\n                    phi2 = 0.25 + 0.1 * np.random.rand()  # Adjusted exploration rate\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by adjusting the local search intensity and exploration rate in the PSO component to improve convergence speed and solution quality.", "configspace": "", "generation": 32, "fitness": 0.091134909851937, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.24912814204694356, 0.23775847048514442, 0.2750691352102189, 0.10927471754568374, 0.08274891753031866, 0.14539277921760818, 0.13153482398263805, 0.13326869573739064, 0.09725215841380086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047820892634132584, 0.034945500442461475, 0.06155240135267104, 0.04946955382039342, 0.07768561864877244, 0.06415388651538068, 0.07578042569159227, 0.046771517298390575, 0.06903056002071828, 0.07177002221661133, 0.05092168657903495, 0.05839272806164009, 0.054343940454727124, 0.04550202959045202, 0.052499860309219715, 0.032553580306087126, 0.019778705245850126, 0.03681417969164491, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.08178306910751398, 0.08835830582631221, 0.06256774897644246, 0.07785848648844018, 0.09163275309819452, 0.037630440712924984, 0.08105781018428793, 0.06042524693536866, 9.999999999998899e-05, 0.16539324775702258, 0.11411433689634487, 0.14133202721046656, 0.11252656527030447, 0.12195455252032739, 0.058123689601286777, 0.10412419914878357, 0.1392297130785939, 0.11122594118821783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007210202379220876, 9.999999999998899e-05, 0.1133172829245157, 9.999999999998899e-05, 9.999999999998899e-05, 0.09841578352832892, 9.999999999998899e-05, 0.02979224324471652, 0.05110758797738724, 0.14183905673534114, 0.11554522685221946, 0.03476605017643508, 0.12227251541396289, 0.05315122156532581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06647026858242766, 0.024071119351653958, 0.0728138806711156, 0.01277939618855839, 9.999999999998899e-05, 9.999999999998899e-05, 0.07317272196866165, 0.05040742366196593, 0.05026686669799907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.40247749262143373, 0.2876846949990719, 0.20906299662976002, 0.14547751259965058, 0.162148925310587, 0.13509797172139004, 0.315051162430942, 0.22896165225765286, 0.24313697910988574, 0.020472704697467092, 0.014001771078971048, 9.999999999998899e-05, 0.03637221829573467, 0.03959757357301774, 0.05363072603597141, 0.06154735630894448, 0.0483217263748944, 0.044817722217461275, 0.1050670490603639, 0.08447116618766126, 0.07621129922240377, 0.09855305120349966, 0.10904415574863957, 0.07095181580243148, 0.08808199726801991, 0.11619357691188437, 0.10831590978206818, 0.13718726579089413, 0.21237720741539767, 0.1885248025412527, 0.20123123880191318, 0.15374644949864757, 0.20570574685351628, 0.17697834317748184, 0.20692879616030768, 0.1423293479963611, 0.06806230714507988, 0.10317823537536219, 0.08176192466827437, 0.14801528583600643, 0.1831796799858516, 0.19366656472074695, 0.13246136792470875, 0.13105832989882116, 0.08454595581529412, 0.22730024243526237, 0.1744476220072172, 0.1850888179370127, 0.1939539649750377, 0.23145943269592606, 0.23518742246258573, 0.20949746973717565, 0.19881707806965587, 0.18195263838172182, 0.16076722028661639, 0.17646566509399586, 0.15707888067227993, 0.15990382766647804, 0.16771829969087282, 0.1612104405064918, 0.15875233821987655, 0.17323891843806882, 0.16006873280663747, 0.18532306370110752, 0.1862340020846286, 0.10536066724581628, 0.3056070432607222, 0.15781392521861382, 0.14905769230359578, 0.11005302565504049, 0.10818175528559915, 0.16620186797655445, 0.05066685122522374, 0.1287116487633524, 0.16411700083228442, 0.11568824163739244, 0.06316056765206135, 0.05764818274031003, 0.16963399312848992, 0.2372374675443517, 0.11756861197107205, 0.1852134280032932, 0.18514137868783287, 0.15006454801529112, 0.17334244594960968, 0.1582132206285145, 0.1667579451028205, 0.1709868256396434, 0.19246779330418118, 0.1530668719747602, 0.07562286674597585, 0.06624160419301028, 0.05502888617795376, 0.06931837643063077, 0.06389753308586221, 0.05013631819667719, 0.09001119284944636, 0.0602012884970442, 0.07632454142347145]}, "mutation_prompt": null}
{"id": "b6ef12f4-eb16-41cb-a6ad-6b657217186f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "0f4c6990-ce1d-4ff9-a67f-a4c840ef4c1a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, with a minor adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "3afcf19e-3621-42ee-bdb3-7ea5fd2f3c5e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedAdaptiveHybridPSOLS", "description": "Enhancing PSO-LS hybrid algorithm by dynamically adjusting exploration-exploitation rates through adaptive parameter tuning to improve convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": 0.09285600815363108, "feedback": "The algorithm EnhancedAdaptiveHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "f7b4d9bd-9dca-4729-b62c-e54ad4926dc0", "solution": "import numpy as np\n\nclass CustomHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val, epsilon=1e-5, num_iterations=15):\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(num_iterations):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + np.random.rand() * 0.1\n                    phi2 = 0.4 + np.random.rand() * 0.1\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val, epsilon=1e-6, num_iterations=20)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "CustomHybridPSOLS", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Local Search with fine-tuned parameters for efficient black box optimization, implementing adaptive probabilities for exploration-exploitation balance.", "configspace": "", "generation": 36, "fitness": 0.09285600815363108, "feedback": "The algorithm CustomHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2632731928521098, 0.28049652174105755, 0.2962635415133097, 0.11050967080223706, 0.083782985691077, 0.1542611837910588, 0.13399789615519753, 0.12980943365618847, 0.09787805841898223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03462771179346724, 0.13994069523901687, 0.06367214435052848, 0.05799171948728998, 0.07082200538886496, 0.06881332714718136, 0.054072504653770004, 0.07223264832980947, 0.05244460293239139, 0.06913409579251473, 0.05076833515566481, 0.04314123811861681, 0.08085476273267611, 0.06012568707078969, 0.0279983423455773, 0.029148237160766755, 0.02256925802195786, 0.026657359831517513, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12356394527805403, 0.06310333615383934, 0.048809378679585236, 0.08917762475629665, 0.07044793836886054, 0.04816157343516847, 0.07066482433578114, 0.05642148104338662, 9.999999999998899e-05, 0.13050129477849137, 0.14163485901104378, 0.11920283149525801, 0.11442036259157207, 0.13175434313676238, 0.04359332403864424, 0.08459872931593959, 0.13957863270851034, 0.07881584108051631, 0.07646370554219506, 0.032915567755931296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1694787339268794, 9.999999999998899e-05, 0.010184544974397802, 0.1288164054300054, 9.999999999998899e-05, 0.04808957987935103, 0.05045553072863074, 0.1511893959111943, 0.057371192588622444, 0.15900667920444334, 0.06138189182223319, 0.0075959877074809334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714157686699385, 0.025140885876173913, 0.07345465546748697, 0.014464609161026654, 9.999999999998899e-05, 9.999999999998899e-05, 0.08321416863611064, 0.05099064760874539, 0.05072549222617784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004636362404737748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29440822622491525, 0.2791085861380267, 0.198833559134041, 0.1483239211003924, 0.15904069558973444, 0.13200099918668728, 0.22176821495222498, 0.20239492117943725, 0.2311687335024155, 0.009889497548682846, 0.008876891463068248, 9.999999999998899e-05, 0.07666404277290262, 0.030182990876077787, 0.06043534367838033, 0.04957194082532024, 0.03530369007576173, 0.04075064827169439, 0.16384430970463504, 0.07321545210520286, 0.11511681969524834, 0.11392364989608483, 0.11837012756772092, 0.10290822122022414, 0.13418103523401315, 0.137465282239006, 0.15981098975469687, 0.12421256504912404, 0.17849388878607786, 0.15470099303363893, 0.26290094655852325, 0.1671615286670578, 0.22562210771638502, 0.16598220583188616, 0.24101683450050637, 0.16210288038600262, 0.09367978529756815, 0.08175437996630663, 0.11637651257279868, 0.156218472789024, 0.19476943671908564, 0.14973285597454145, 0.13181774121332368, 0.16547026175044544, 0.08569523323013817, 0.2345806842839624, 0.18375273678997373, 0.18451748561945958, 0.17062922066443664, 0.16912871356927262, 0.1840499610006222, 0.17608857796353328, 0.18103591780017647, 0.23451631500252046, 0.17193960474615755, 0.17333598721668642, 0.1581430382298109, 0.1675945898687694, 0.1639967262822598, 0.15771917058329432, 0.17194484060735649, 0.17187414153863045, 0.16274576886443282, 0.15871693030452483, 0.1848479378494544, 0.11280207457500202, 0.23077425213104275, 0.16792328044181526, 0.17255231556555906, 0.11277479517738576, 0.11804117655334923, 0.20852176892624696, 0.05071212162490468, 0.15355723989566306, 0.25093886361083617, 0.1165662443309875, 0.14099407557247778, 0.24237443380576984, 0.07184313664730713, 0.10834064648972563, 0.08624834387374392, 0.22132222507805477, 0.16241541393563386, 0.17071942462991974, 0.16409776521963015, 0.14173073061469388, 0.18229753988149422, 0.1533254475588337, 0.17599354372388665, 0.1915320335893893, 0.04697121512349789, 0.07270291306452259, 0.0459468351548219, 0.0691673587784355, 0.07004376515531474, 0.06768323865499037, 0.07619817033617515, 0.053775337736869044, 0.052653113943201046]}, "mutation_prompt": null}
{"id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 37, "fitness": 0.09333825114904898, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "52b0d115-ab0e-461e-b547-c5fa1b98ab31", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "ae2c67cc-17b3-4c40-b8bd-d9a296570a85", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n\n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "RefinedEnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance with a focus on refining search strategies.", "configspace": "", "generation": 38, "fitness": 0.09333825114904898, "feedback": "The algorithm RefinedEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "5d7b9fc8-49b2-47da-ba69-cd229fb5c920", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLSDynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLSDynamic", "description": "Enhancing the EnhancedHybridPSOLS by incorporating dynamic parameter adaptation for PSO and local search, blending exploration and exploitation while maintaining convergence speed.", "configspace": "", "generation": 39, "fitness": 0.09333825114904898, "feedback": "The algorithm EnhancedHybridPSOLSDynamic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "0a42d306-6b75-482f-bbc5-de1cff818baf", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "74923e20-02f2-4af4-bacc-c3fc365993c7", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "6f8568aa-aa70-4f9b-961f-5a33423d51ba", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n\n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Enhancing EnhancedHybridPSOLS algorithm with adaptive mutation rate and diversity maintenance for improved exploration and exploitation in optimization tasks.", "configspace": "", "generation": 42, "fitness": 0.09333825114904898, "feedback": "The algorithm EnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "649cf40f-839b-4faa-b08c-a3a817ecc88a", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos\n", "name": "ProbabilisticEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a probability-based line refinement strategy to optimize the black box function using PSO and local search.", "configspace": "", "generation": 43, "fitness": 0.09333825114904898, "feedback": "The algorithm ProbabilisticEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "6892fb52-bec8-49c1-ab81-f3400405f132", "solution": "import numpy as np\n\nclass MOPSO_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "MOPSO_LS", "description": "Implementing a novel Metaheuristic Algorithm called Multi-Objective Particle Swarm Optimization with Local Search (MOPSO-LS) integrating dynamic inertia weight and adaptive parameter tuning to balance exploration and exploitation effectively.", "configspace": "", "generation": 44, "fitness": 0.09333825114904898, "feedback": "The algorithm MOPSO_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "69dbb4c2-64aa-4e0a-b485-976aa37ff1b3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "78480165-d913-41fb-b07d-b5f9b7ee64be", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "e50d4b14-3906-4f62-bdd9-f4641e4f7264", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "0ef21513-c979-4443-900b-75deebb420c4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "0e295ae8-a835-4d62-8bf0-c34bea2c09b7", "solution": "# import numpy as np\n\nclass AdaptiveEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def enhanced_pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = enhanced_pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "AdaptiveEnhancedHybridPSOLS", "description": "Refining EnhancedHybridPSOLS algorithm by introducing adaptive parameter control to enhance exploration and exploitation balance through enhanced particle swarm optimization with local search.", "configspace": "", "generation": 49, "fitness": 0.09333825114904898, "feedback": "The algorithm AdaptiveEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "a28fb112-f3f1-4385-8207-dbcb826619c2", "solution": "import numpy as np\n\nclass HybridPSOWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "HybridPSOWithLocalSearch", "description": "A metaheuristic algorithm combining Particle Swarm Optimization (PSO) with local search for enhanced exploration and exploitation balance, with dynamic parameter adaptation to improve convergence speed.", "configspace": "", "generation": 50, "fitness": 0.09333825114904898, "feedback": "The algorithm HybridPSOWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "47fe63f9-e899-4373-8877-357a3e1662b5", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(func):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * 12)):\n            new_pos, new_val = pso(func)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "EnhancedHybridPSOLS", "description": "Introducing dynamic parameter adaptation for PSO and local search in EnhancedHybridPSOLS to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.2661252472901471, 0.25683264320099175, 0.3050683498551724, 0.1104220430327637, 0.08235390402818954, 0.15445696303317147, 0.13429069671999427, 0.12936936581568337, 0.09669406809575798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05392553606347961, 0.05113057675263499, 0.058881094405758394, 0.090918577486094, 0.0790156403552279, 0.08568663841460711, 0.059568139687733446, 0.04786720585162896, 0.06004110581970612, 0.08613407081883018, 0.07891966571227349, 0.038841632795813874, 0.042978769568967956, 0.04769508123310784, 0.027272669167794028, 0.03307359321991721, 0.024330657910286546, 0.018118111045056007, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.12903022968336098, 0.062477145186565886, 0.03837229025876021, 0.08972950171671878, 0.058767066664316414, 0.05528534740702884, 0.06899927634336878, 0.05648962994761564, 9.999999999998899e-05, 0.15838544481342365, 0.13164653359054723, 0.11766599714134351, 0.15261188298065465, 0.1340266437611679, 0.05873056798387499, 0.09708400659268335, 0.12172375641822142, 0.08786550681970295, 0.07085007712728952, 0.01290132404991362, 0.0016737528901504817, 9.999999999998899e-05, 0.018504873126731547, 9.999999999998899e-05, 0.17574088549239208, 9.999999999998899e-05, 9.999999999998899e-05, 0.1053778957182323, 0.024600833501886465, 0.0531508030971356, 0.045100813740280854, 0.18866057004440073, 0.1139756487884731, 0.1597354075861851, 0.1308767079838874, 0.010684576779026456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06715692723242805, 0.023714464653138423, 0.06664129425282772, 0.01050520243796349, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118437778572973, 0.05094140256486357, 0.05076839030510183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26911185159152395, 0.2865768390534642, 0.20385102456894122, 0.1390766007870008, 0.1575604485409582, 0.13125664271822557, 0.21274980607192984, 0.23940920762336926, 0.23530698343184409, 0.017699424809361708, 0.0118226765496795, 9.999999999998899e-05, 0.04989183414405307, 0.05133369803880794, 0.0368376148734928, 0.04496957539758806, 0.058244613175755355, 0.056542841264999866, 0.15339015536385137, 0.120004843322433, 0.1164391347369701, 0.11168883986635014, 0.11573147304302345, 0.11757259649798213, 0.13510504794536105, 0.18819852610015464, 0.15241785877509795, 0.12551598396945207, 0.16582130271446072, 0.18984545821198162, 0.20360532540303744, 0.22696005673439545, 0.21400089268474953, 0.16810358211180887, 0.24228563305340756, 0.15011663857500956, 0.0942148983976584, 0.11711310262223573, 0.11172449228139536, 0.20384670050570808, 0.16031433545426133, 0.1652463035355899, 0.12792979478080602, 0.16305046886252117, 0.08039513502874307, 0.19417739019197489, 0.16112982855996305, 0.15595845696213095, 0.1776286582162847, 0.21376974373591162, 0.23048190896054188, 0.18732523488993136, 0.20590699997671058, 0.17772584347410703, 0.17641213992767513, 0.1724134166386273, 0.15514342226296374, 0.16176858313077103, 0.164065145076006, 0.1669845057617002, 0.17185485986807247, 0.18036233313413463, 0.1692799362067079, 0.15582530545335227, 0.18248260286766027, 0.11141661032460015, 0.19547458700157172, 0.1678960599411352, 0.09203924683382303, 0.11351993540423477, 0.11755938423731838, 0.16353534427291183, 0.050715359973725005, 0.14939118650264605, 0.2499466511358479, 0.1080895014089025, 0.14235162364624354, 0.22854458999062421, 0.09055451581614726, 0.11329487207156508, 0.10096878698372724, 0.16924518473418015, 0.19791734824358342, 0.18012372149748446, 0.17196393778050645, 0.15625364485019688, 0.1765660576292154, 0.16804463870248565, 0.16023415961995902, 0.15857379041150654, 0.07179701656974125, 0.061394955036228716, 0.05123605312821711, 0.06430053026166604, 0.0631688756901484, 0.04669748805354634, 0.05504641062651339, 0.04864020040625361, 0.05495824012665085]}, "mutation_prompt": null}
{"id": "1cab0c24-7328-42e1-88b0-4c476228c743", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 52, "fitness": 0.10661391204173108, "feedback": "The algorithm MultiPopEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "dbd6a246-dba4-4286-badb-c6416125a6c4", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "4ed1c97c-4331-4140-bb22-ac6f3436c428", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "e09eb591-a38b-4e91-91fd-f2691eb635dd", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "dd60bbce-3d4b-4e7b-970f-e47e667a1987", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "c9a6a045-3576-455e-bdec-fc9f4bb6fcd8", "solution": "import numpy as np\n\nclass DynamicLocalSearchMPHPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n        self.epsilon_min = 1e-6\n        self.epsilon_max = 1e-4\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val, epsilon):\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                epsilon = self.epsilon_min + (_ / self.budget) * (self.epsilon_max - self.epsilon_min)\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val, epsilon)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicLocalSearchMPHPSOLS", "description": "Improving the exploration and exploitation balance of MultiPopEnhancedHybridPSOLS algorithm by dynamically adjusting the local search strength based on the function landscape.", "configspace": "", "generation": 56, "fitness": 0.10658947870128697, "feedback": "The algorithm DynamicLocalSearchMPHPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138471426480595, 0.22303993734711247, 0.30215618928922716, 0.15451803929506536, 0.11414429113196534, 0.15530642593495014, 0.15412294940670435, 0.15143545611994558, 0.125607337375383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816897120754988, 0.10391025519188246, 0.09120034060756754, 0.08085147287643091, 0.04506367419174839, 0.09856286825802674, 0.07461532991049391, 0.07335080667645688, 0.04612108309535323, 0.06386604475454538, 0.04953326302533678, 0.07573000360408111, 0.07187480062457907, 0.05324391717132493, 0.045137226071600534, 0.03749339441660393, 0.08764688512732755, 0.03540227314132138, 0.04517974471507202, 0.05120602821597531, 0.04653931557108448, 0.05409934132102845, 0.05005195613408797, 0.04283877890500354, 0.06392781825854232, 0.053339057928647016, 0.042627116114775876, 0.11688000811791721, 0.06812884329638369, 0.01833297410211221, 0.08799567937563502, 0.07421349146053036, 0.05572812151677731, 0.08545036167931153, 0.06178558244223409, 0.04344087840681932, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783660992110031, 0.028329295781702957, 0.0007134330234100927, 9.999999999998899e-05, 0.07478422178065591, 9.999999999998899e-05, 0.10476529395408618, 0.003463590637781233, 0.04122015072898233, 0.16772348588595665, 0.16687130386691496, 0.06341039938062443, 0.08316151417555251, 0.2220558303001986, 0.12588226141849046, 0.12376773600034963, 0.11523141227605627, 0.10778558706591101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617122395846311, 0.08418864674238247, 0.09762888280023907, 0.035925039459103414, 0.034113375042061356, 0.02210132715006652, 0.07581477499411815, 0.056171444229377254, 0.0716070688386018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04551316187830856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3292321843213041, 0.32092129373900624, 0.251874269473918, 0.16941725069587488, 0.15813833009712885, 0.15177163522337, 0.28968408442168914, 0.22934157868863247, 0.23475107927546435, 0.03391050971858589, 0.0348452901789571, 0.030332793803239055, 0.06515439725050343, 0.07870678621876137, 0.05902463191094265, 0.0732858798730216, 0.08612421425204952, 0.0544037513114527, 0.16905783413271258, 0.18908645725411277, 0.12238800392626048, 0.1622655205660487, 0.13789462659734764, 0.13332782075813443, 0.13089322204021736, 0.17018353593399693, 0.12069546481757953, 0.16442419908624484, 0.15166051493326593, 0.18865125727985765, 0.26801034742965046, 0.20582102703124516, 0.21962786365813614, 0.16404615523388222, 0.24464278693776897, 0.18353401952418869, 0.15377167212210663, 0.10122111363203345, 0.1047922232042039, 0.15202635916366214, 0.1735602559514806, 0.2184982236352354, 0.13897269810150015, 0.171899787635736, 0.12374560698613446, 0.19929539539446828, 0.18577780719437464, 0.17037867577541455, 0.2251331985200904, 0.22182055502667264, 0.21924692942192436, 0.20319572273371478, 0.22822573324864148, 0.2054953598213235, 0.1581820107657027, 0.19303881837169712, 0.16703953314476006, 0.1821889359217468, 0.16651828820082193, 0.17033502532256484, 0.17703665618948472, 0.1689883830063873, 0.16536964541606414, 0.17252808722998247, 0.18367199667566692, 0.1537778543571361, 0.19410391791420112, 0.16791286220868185, 0.17295279431678723, 0.11435286776422582, 0.1181093912871014, 0.16983174408979562, 0.1685449003010686, 0.161960805315417, 0.3269975911143559, 0.16958299232743068, 0.13671035474813908, 0.10159134649230894, 0.16883170673368808, 0.13738427318087376, 0.12901144001939469, 0.19286620884225447, 0.169781864004534, 0.1705613676572768, 0.16943575942960576, 0.18913339380554028, 0.17847375507697016, 0.1835406208351733, 0.15827243197184615, 0.20304286739629784, 0.06259344894601493, 0.0543310969029962, 0.0723164166041137, 0.06791610669072357, 0.07165326610589018, 0.062197621131971026, 0.06992923062211664, 0.055167599042721505, 0.0815750157792412]}, "mutation_prompt": null}
{"id": "f805b504-fae4-445a-845d-520d6c952a58", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "d57b86cc-59a1-4b99-a9aa-5349460a32a3", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "86c6641d-64cb-4742-a473-7f7b4bf359b9", "solution": "import numpy as np\n\nclass AdaptiveMultiPopEnhancedHybridPSOLS(MultiPopEnhancedHybridPSOLS):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.phi1_min = 0.1\n        self.phi1_max = 0.9\n        self.phi2_min = 0.1\n        self.phi2_max = 0.9\n\n    def __call__(self, func):\n        def adaptive_pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = self.phi1_min + (self.phi1_max - self.phi1_min) * np.random.rand()\n                    phi2 = self.phi2_min + (self.phi2_max - self.phi2_min) * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = adaptive_pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "AdaptiveMultiPopEnhancedHybridPSOLS", "description": "Improving the MultiPopEnhancedHybridPSOLS by adding adaptive parameter tuning to enhance exploration and exploitation balance while optimizing the black box functions.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'local_search' is not defined\").", "error": "NameError(\"name 'local_search' is not defined\")", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {}, "mutation_prompt": null}
{"id": "3721ece5-5af5-4d1c-8475-d90a05771738", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "354fd0e7-6114-49e0-8678-69eb7756aeac", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "b046bb73-e964-4ee2-8326-28c10453fd48", "solution": "import numpy as np\n\nclass EnhancedMultiPopHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "EnhancedMultiPopHybridPSOLS", "description": "Introducing dynamic adaptive inertia weight and local search to enhance the MultiPopEnhancedHybridPSOLS algorithm for improved global and local search capabilities.", "configspace": "", "generation": 62, "fitness": 0.10661391204173108, "feedback": "The algorithm EnhancedMultiPopHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "cb79fddb-12be-46cd-be7d-217bd94b5d9d", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "f1e88e79-2aca-4320-a553-c5569ad78ba7", "solution": "import numpy as np\n\nclass DynamicMultiPopPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopPSOLS", "description": "Introducing a dynamic multi-population metaheuristic algorithm that combines Particle Swarm Optimization (PSO) with local search to enhance exploration and exploitation in solving black box optimization problems.", "configspace": "", "generation": 64, "fitness": 0.10661391204173108, "feedback": "The algorithm DynamicMultiPopPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "55d326db-c941-48e2-979b-724996fd4403", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "0dc4620d-391c-4482-8ae4-4277d31e266a", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "470ed1fe-8903-4033-86ed-e18a9508c13b", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "a68253da-5f49-473b-8da5-93a09b3f9bfa", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "a21f0874-7696-471a-a114-577284d99427", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "89ee8e72-f418-476a-a32e-b147cd165ada", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "02dcf7bb-e261-4e2a-a92c-f7e42f7767b6", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "665f1238-540b-493d-acc2-570ea260dcdd", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "708a36b3-9694-42c7-bf17-e7adca3c4187", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "a3bbbe99-4635-4853-acbb-41049a43e461", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "b4837617-e10d-4490-8eb1-f8c6d3755b07", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "5d399fa0-dca2-4bc9-8937-9083773ad94a", "solution": "import numpy as np\n\nclass AdaptiveParamMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "AdaptiveParamMultiPopEnhancedHybridPSOLS", "description": "Enhancing the MultiPopEnhancedHybridPSOLS algorithm by incorporating adaptive parameter tuning to dynamically adjust the algorithm's parameters during the optimization process.", "configspace": "", "generation": 76, "fitness": 0.10661391204173108, "feedback": "The algorithm AdaptiveParamMultiPopEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "6b92aefd-95b3-4070-a70f-9f513eef5301", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "f31cd021-7f9d-4ecc-a0c8-48f36ca23732", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "78f755fa-2da5-44ee-b881-bd61ac8435db", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "2fdc3b30-b78d-4dc2-a8a5-4148e1a25b5d", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Introducing a population-based optimization algorithm with dynamically updated inertia weight and local search for enhanced exploration-exploitation balance in solving black box optimization problems.", "configspace": "", "generation": 80, "fitness": 0.10661391204173108, "feedback": "The algorithm MultiPopEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "0ac249fc-3332-40f4-a212-56e70e049dc8", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "a38ef7e1-6905-4af2-b5e5-78e0e2f8d989", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "1e28fdbf-f050-4e50-a4d2-6fbcd69f53c0", "solution": "import numpy as np\n\nclass DynamicInertiaMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicInertiaMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities using a novel dynamic inertia weight update strategy.", "configspace": "", "generation": 83, "fitness": 0.10661391204173108, "feedback": "The algorithm DynamicInertiaMultiPopEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "49e1f0f7-db43-43e9-a696-d25cc406ed05", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "461df960-6f45-46da-8e0e-8de757cdf350", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "908b2912-1135-4f97-998a-178832166d78", "solution": "import numpy as np\n\nclass MultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(self.max_iter):\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "MultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm with a multi-population approach by introducing diverse sub-swarms to explore different regions of the search space concurrently, promoting global and local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.30138661154533475, 0.22304070816045962, 0.30215976442720305, 0.1545184090883458, 0.11414450642378182, 0.15530756567108017, 0.15412323334765354, 0.15143612565652398, 0.12560771775716606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169311023906334, 0.10391068445592633, 0.09120166382453077, 0.08085304300408647, 0.04506404082979443, 0.09856439939537232, 0.07461705088245218, 0.0733520246591357, 0.046122710624850294, 0.06386777957449519, 0.049534117315325976, 0.07573071990501101, 0.0718752340359512, 0.05324578876543251, 0.04513844144640622, 0.037493763682572845, 0.08764870740262687, 0.035402346591929534, 0.045179772666097406, 0.051206142677993505, 0.04653947607354292, 0.05409945752992806, 0.05005208935117478, 0.04283887111237783, 0.06392796827826219, 0.05333920765376865, 0.0426273183957141, 0.11688023971634998, 0.0681290173388035, 0.01833308763208419, 0.08799598811425913, 0.07421352855296304, 0.055728928889989815, 0.08545083822369637, 0.061785686774827764, 0.043440927174323574, 0.16050601403607456, 0.2268461527776201, 0.132966582716885, 0.13338439750622832, 0.14298279301045425, 0.07118508780457466, 0.10916322693673397, 0.15603514460612933, 0.11801691182147334, 0.07783760429047548, 0.02833013695363784, 0.0007134330234100927, 9.999999999998899e-05, 0.07478808905029743, 9.999999999998899e-05, 0.10476708372671295, 0.003463590637781233, 0.04122080669642725, 0.16773008842752934, 0.16687732056680793, 0.06341221567721111, 0.08316187754627336, 0.22206851179728415, 0.12588543382450623, 0.12376953616615849, 0.11523174451887574, 0.10778838241858335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617144534429878, 0.08418870718596749, 0.09762904097535252, 0.03592509817782685, 0.03411343946091716, 0.022101333524709887, 0.07581486453052255, 0.056171559399921134, 0.07160791251665466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045518332783600624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.32923885095460315, 0.3209251094805924, 0.2518750109337463, 0.1694173928208682, 0.15813864140399714, 0.15177170847644517, 0.2896856798490297, 0.22934204376248002, 0.2347524608220094, 0.03391130014442223, 0.034845877060321606, 0.0303345549844507, 0.06515926987809162, 0.07870808026966702, 0.059025363509752404, 0.07328625690862922, 0.08612746888671752, 0.054404430864566145, 0.16906017912570426, 0.18921503944374696, 0.12245956453063445, 0.1622714559573757, 0.13800965110371466, 0.13334365633450085, 0.13096652926616803, 0.17032049739162158, 0.12070739775443562, 0.16442533898410205, 0.15166071979008633, 0.18865192357867544, 0.26802132478526264, 0.2058212548743923, 0.21963215325087337, 0.16404687532002138, 0.24464573724335836, 0.1835341690041401, 0.1538190049036552, 0.10122173825644709, 0.1047960570192552, 0.15203498872317656, 0.17357146907710286, 0.2185085884273793, 0.13897363646714478, 0.1720259670436033, 0.12374716948844744, 0.19973236860790444, 0.18640360995637373, 0.17069391954065705, 0.2261851625781689, 0.22190828671881957, 0.21948002188202964, 0.2033426866682797, 0.22862656547090343, 0.2057706852190232, 0.15818210799053045, 0.19304081166747178, 0.16703980726825407, 0.18218958923552508, 0.16651975855536383, 0.1703354507241589, 0.17703877890390218, 0.16898893673889215, 0.16537027224613865, 0.17252844251500354, 0.18367256613971117, 0.1537779589806758, 0.1941059128745537, 0.16791339848646092, 0.17295316764640245, 0.11435313492849586, 0.11811006235580535, 0.1698325242071994, 0.16854496253505236, 0.16196132406229158, 0.3269983104207205, 0.16958303625886817, 0.13671107551917516, 0.1015915177107719, 0.16883185015561464, 0.137384504552442, 0.12901248555959177, 0.19301983997148475, 0.1698716326650287, 0.17060575702176917, 0.16955761549393233, 0.1891655547429033, 0.17844931366821093, 0.1836150990134775, 0.15832984621172896, 0.20314402453443592, 0.06261068753404564, 0.05433610164207037, 0.07232664224114993, 0.06793043372611596, 0.07167242132814922, 0.06220797041841719, 0.06993334653260175, 0.05517205865567698, 0.0816172972694823]}, "mutation_prompt": null}
{"id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 87, "fitness": 0.1418751919276433, "feedback": "The algorithm DynamicMultiPopEnhancedHybridPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "1cab0c24-7328-42e1-88b0-4c476228c743", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "801a78e0-2b85-407a-84c5-19746782dd89", "solution": "import numpy as np\n\nclass NovelPSOWithDynamicInertiaAndLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.max_iter = budget // self.num_particles\n\n    def __call__(self, func):\n        \n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(5):  # Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // self.num_particles):\n            swarm_pos = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n            new_pos, new_val = pso(swarm_pos)\n            new_pos, new_val = local_search(new_pos, new_val)\n            if new_val < best_val:\n                best_pos = new_pos\n                best_val = new_val\n\n        return best_pos", "name": "NovelPSOWithDynamicInertiaAndLocalSearch", "description": "Introducing a novel Particle Swarm Optimization (PSO) algorithm with dynamic inertia weight and reduced iterations for faster convergence, combined with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": 0.13795770999968446, "feedback": "The algorithm NovelPSOWithDynamicInertiaAndLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.10.", "error": "", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.35719868434316426, 0.37927107086254086, 0.313508750687305, 0.1789603583092374, 0.22420271885159604, 0.254629218960045, 0.18694552436884737, 0.22848420460474717, 0.21737373486764278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07683957120223528, 0.08032158336449025, 0.07219012956874371, 0.1040883640156195, 0.09355730918939498, 0.09080553141311432, 0.06797927267420545, 0.0789400503739105, 0.07975170537066822, 0.08067651261931386, 0.07136680643653814, 0.06346193733380645, 0.0706676980369848, 0.07448889779841139, 0.06276974624267806, 0.09482231208783709, 0.06374381694652909, 0.0669134857567577, 0.07727579932978823, 0.06161691865808294, 0.07589269964193313, 0.08094674158518411, 0.06671866561212192, 0.08169629950240165, 0.08140258769842079, 0.07257119178092741, 0.0668868874963533, 0.13398273763025426, 0.11325445672638912, 0.13818848947597162, 0.1003056452036366, 0.09532700610034339, 0.09100768665379622, 0.14953030091756714, 0.09254316707672317, 0.151133401761275, 0.24253992673537828, 0.20590050987707476, 0.2287677862652736, 0.19497321354231478, 0.1790816119272296, 0.2470231501014134, 0.16813785242627777, 0.17406443238410507, 0.17412490710915884, 0.10103816030746893, 0.09344398337351634, 0.06615201821732375, 0.07473137355646409, 0.12238095198340748, 0.10312762251272778, 0.12357576640825574, 0.11101901195691388, 0.10748528051249961, 0.14905628978846475, 0.16106098770416755, 0.12013188287233001, 0.17355803707246664, 0.13395579661723056, 0.14220540462165576, 0.1584844442962836, 0.14010445926388115, 0.13262459042145058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11155865914112184, 0.11540508392583215, 0.10698950628368475, 0.09861298306702482, 0.0696815108460207, 0.05508345387236857, 0.09918055069736942, 0.0993934562411194, 0.11049071049130321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018723247668941956, 0.03025311222700422, 0.011726199139273752, 0.005765783340609287, 0.0021859332174098967, 0.0005687186064912142, 0.0051637791233409835, 9.999999999998899e-05, 9.999999999998899e-05, 0.3399107575525636, 0.33369635366618655, 0.3053959224540701, 0.36453724848236857, 0.21025601405265593, 0.2334692426058761, 0.3441736184148283, 0.31199804527411756, 0.35599345592097575, 0.057987777627386605, 0.04596755746248382, 0.04809463401664538, 0.1145314119110632, 0.09979108486147759, 0.07244849157553512, 0.0924197532976554, 0.09068797044017052, 0.0821845434711459, 0.17090273544012347, 0.14640990888855854, 0.18334777418729153, 0.1539089010187017, 0.15189154322250564, 0.17041372188063775, 0.169538241773466, 0.15987114290068516, 0.18834077310889819, 0.21221620721911572, 0.2133929077432305, 0.21348509062133025, 0.24414090310737102, 0.24654684458550935, 0.250269759057721, 0.1886051489572509, 0.21135626866557222, 0.1876238957136126, 0.1655159517601592, 0.15944982239370986, 0.15059808041752154, 0.18470755035669728, 0.19275486970970257, 0.18257587203676073, 0.15436379405812217, 0.16221035084890356, 0.13347679276162794, 0.20821829870273356, 0.206656730105643, 0.2039648092799412, 0.2013030561486483, 0.23079991057277216, 0.22380811784608, 0.1954964951653434, 0.2166200261877569, 0.18931528320607383, 0.1816346718121027, 0.17629913841559375, 0.19297502110175357, 0.17341705617924075, 0.1727295759295675, 0.17607904676113595, 0.17806515879071738, 0.18283897322521758, 0.17517536111582976, 0.18412962583911463, 0.27780627980430916, 0.1840688315130974, 0.2725215009141795, 0.28132947389623664, 0.24501443026441672, 0.2822185337442995, 0.3463981734223921, 0.2732126157873873, 0.35006222545313204, 0.28185145581982907, 0.43682687952846155, 0.21778272651296537, 0.21533539189339823, 0.3503607305664381, 0.19297521636115667, 0.351067305711134, 0.28312354856292454, 0.17787518474675612, 0.18992637815791602, 0.18943639014748093, 0.18231645031873012, 0.1853189478731686, 0.18125826216836893, 0.1992946528929055, 0.1917417608119415, 0.1786160395599964, 0.08062673773159312, 0.08503550855034503, 0.07570929547871841, 0.0828780252749004, 0.07840896812787301, 0.0711612107144447, 0.08156812725607543, 0.08539221316076817, 0.08268897641566197]}, "mutation_prompt": null}
{"id": "93eae98b-8093-4c06-a41f-5e6bddc00172", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "21a0d398-1a8d-491e-8d73-8baf86c6199b", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "de6c5620-c368-4a01-9996-2e7aae243a9c", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "226783fe-20d7-403d-9566-18df69e0935f", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "ce121527-ebac-445a-95fd-7f311f8615ab", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "95161520-1786-4e48-86fe-72255f145117", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n        self.local_search_iterations = 15\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(self.local_search_iterations):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLSImproved", "description": "Improving the efficiency of DynamicMultiPopEnhancedHybridPSOLS by dynamically adapting the number of local search iterations based on the function landscape.", "configspace": "", "generation": 94, "fitness": 0.1418751919276433, "feedback": "The algorithm DynamicMultiPopEnhancedHybridPSOLSImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "e4aff3ab-c299-4f3b-8df8-b65f39773f7d", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "69027ba5-550f-4613-8dda-f5e8fb86f195", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "e419cfc5-07d6-43cb-986d-67e9d6783b8c", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "e5f4be18-2e20-4f6d-be86-7a07dd257414", "solution": "import numpy as np\n\nclass DynamicMultiPopEnhancedHybridPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "DynamicMultiPopEnhancedHybridPSOLS", "description": "Enhancing the EnhancedHybridPSOLS algorithm by introducing a dynamic multi-population strategy with local search for global and local exploration in black box optimization.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
{"id": "6c1efbc0-cb51-4e6f-b998-dea1af7471c5", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 25\n        self.num_populations = 4\n        self.max_iter = budget // (self.num_particles * self.num_populations)\n\n    def __call__(self, func):\n        def local_search(current_pos, current_val):\n            epsilon = 1e-5\n            best_pos = current_pos\n            best_val = current_val\n            for _ in range(15):\n                new_pos = best_pos + (np.random.rand(self.dim) - 0.5) * epsilon\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n            return best_pos, best_val\n\n        def pso(swarm_pos):\n            swarm_val = np.array([func(pos) for pos in swarm_pos])\n            pbest_pos = swarm_pos.copy()\n            pbest_val = swarm_val.copy()\n            gbest_idx = np.argmin(swarm_val)\n            gbest_pos = swarm_pos[gbest_idx].copy()\n            gbest_val = swarm_val[gbest_idx]\n\n            for _ in range(10):  # Changed line: Reduced the number of iterations for faster convergence\n                for i in range(self.num_particles):\n                    phi1 = 0.6 + 0.1 * np.random.rand()\n                    phi2 = 0.4 + 0.1 * np.random.rand()\n                    omega = 0.5 + 0.2 * np.random.rand()  # Dynamic inertia weight\n                    new_pos = swarm_pos[i] + phi1 * (pbest_pos[i] - swarm_pos[i]) + phi2 * (gbest_pos - swarm_pos[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < swarm_val[i]:\n                        swarm_pos[i] = new_pos\n                        swarm_val[i] = new_val\n                        if new_val < pbest_val[i]:\n                            pbest_pos[i] = new_pos\n                            pbest_val[i] = new_val\n                            if new_val < gbest_val:\n                                gbest_pos = new_pos\n                                gbest_val = new_val\n\n            return gbest_pos, gbest_val\n\n        best_pos = np.random.uniform(-5.0, 5.0, self.dim)\n        best_val = func(best_pos)\n        \n        for _ in range(self.budget // (self.num_particles * self.num_populations * 12)):\n            swarm_pos = [np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim)) for _ in range(self.num_populations)]\n            for i in range(self.num_populations):\n                new_pos, new_val = pso(swarm_pos[i])\n                new_pos, new_val = local_search(new_pos, new_val)\n                if new_val < best_val:\n                    best_pos = new_pos\n                    best_val = new_val\n\n        return best_pos", "name": "NovelMetaheuristicAlgorithm", "description": "A novel metaheuristic algorithm that combines Particle Swarm Optimization (PSO) with local search and dynamic multi-population strategies for efficient global and local exploration in black box optimization problems.", "configspace": "", "generation": 99, "fitness": 0.1418751919276433, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "8df9c6cf-970c-4164-a5fb-4fb2419333f3", "metadata": {"aucs": [0.4117018082655717, 0.3605774066617369, 0.33131998391317163, 0.2005820702494825, 0.2120352622449736, 0.20565402772276709, 0.23269714280534903, 0.18451577588131962, 0.1660001819040139, 0.0, 0.0, 0.0, 0.0, 0.007743966154554416, 0.0, 0.0, 0.025343756349286206, 0.0, 0.09739443026158989, 0.10283948735792092, 0.10978742507350181, 0.08398555684189146, 0.08786371186271846, 0.10324027382911094, 0.08001356838886708, 0.09468934106571836, 0.09728470650245558, 0.08661553287198964, 0.09158015169117095, 0.07106505072198, 0.08022504983159906, 0.06279668024980023, 0.06008864178015705, 0.061034097826887734, 0.08568738836825118, 0.071530492486919, 0.05601362275243449, 0.061631291265515586, 0.056909017088073055, 0.06621857829629496, 0.06507594316906418, 0.06470951183651419, 0.06520612282199312, 0.0676660422596711, 0.06766372261262388, 0.1168268072456885, 0.10776272167311596, 0.10779923433453953, 0.10433618685154766, 0.10552140661301923, 0.07959066426725803, 0.1485361399560563, 0.11460030281014388, 0.10661205796612483, 0.19671364142355952, 0.23474830008324765, 0.1780720133227538, 0.1859131095948644, 0.16378336933656412, 0.169099324555415, 0.20614073837224856, 0.16927008188548975, 0.14210678646567654, 0.12526072756564677, 0.18288440709435982, 0.08970081835830046, 0.05452251913360362, 0.15818251009499273, 0.09523494840499624, 0.18076938694814615, 0.15092551377780872, 0.15609878102680963, 0.22235275135392352, 0.23367270476629232, 0.16139458048692834, 0.20919532926162698, 0.21538460648518554, 0.24059636179970956, 0.2436305687957685, 0.16977699678499014, 0.2040785774839613, 0.0, 0.01000526253930456, 0.0, 0.046430337112326026, 0.020664225156010296, 0.016791440294651738, 0.0, 0.0, 0.0, 0.10701228926291495, 0.13744529103629988, 0.13225668149015635, 0.090407532129541, 0.09072769693564553, 0.08598408456443907, 0.13935432676938997, 0.12473585544381749, 0.10607520429921247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07101757281080423, 0.020446780412465726, 0.002625223462947357, 0.02159133928890411, 0.01643696963093355, 0.0, 0.0, 0.0036175860713841823, 0.004413798628565946, 0.3291681566768627, 0.33688654739880575, 0.3864559694912475, 0.20303702764176967, 0.20247148035695972, 0.22989665173382412, 0.35339293582804265, 0.3134046706930702, 0.3218860016055737, 0.07178409265422414, 0.06055175199342688, 0.06497161838888954, 0.0898043503922974, 0.07408648323534328, 0.07298908353257993, 0.13350113140733988, 0.09880917389333921, 0.07936782294467593, 0.18923035285180512, 0.1737021969996846, 0.18349656055356744, 0.17760761579221707, 0.15891483506348558, 0.18071358242311164, 0.1798793152477821, 0.1595744125606512, 0.1809386590486718, 0.20752478875947433, 0.21676272227701932, 0.20517879038463216, 0.2656957416737996, 0.24890136830013887, 0.26763074447333124, 0.20870194408979914, 0.22545106034805085, 0.16717540792815433, 0.15759343561410954, 0.17842327444160255, 0.12290667206576678, 0.23862259744071856, 0.20785290029292203, 0.23098496836056037, 0.15320390444214604, 0.1636147642760405, 0.12899217765317006, 0.2704771222188226, 0.22831216532458598, 0.21633124950917948, 0.225630451605776, 0.2279255208848232, 0.2229206317425947, 0.21241439328910627, 0.21396094051455716, 0.20749591953875612, 0.17599670222239894, 0.19293419062102446, 0.17482881685303397, 0.18983355417501402, 0.17789238715019096, 0.1835800006255831, 0.18661924779500705, 0.1782555793364431, 0.17953906052673063, 0.22192991445147714, 0.18714757267371174, 0.17522116088018758, 0.2599512681760321, 0.21095654124374053, 0.1920737801961121, 0.33821572799247757, 0.24120975255595511, 0.27779217329739103, 0.3197225944276004, 0.3279343563192999, 0.3736711767032228, 0.248767027862421, 0.23515652979510382, 0.21145008863129144, 0.19667358738299456, 0.24081039941015514, 0.23723114616680963, 0.17675721035110292, 0.1907819577756037, 0.18720541142391334, 0.168907626092773, 0.19598169786424968, 0.1857362646613533, 0.1917518080838182, 0.1793335117884972, 0.20937787187563917, 0.08685119412882336, 0.07840644695023513, 0.08810707503187909, 0.07905298450848919, 0.08513355333843498, 0.09307466230229, 0.07859692835134724, 0.0854682060279498, 0.10579327549723894]}, "mutation_prompt": null}
