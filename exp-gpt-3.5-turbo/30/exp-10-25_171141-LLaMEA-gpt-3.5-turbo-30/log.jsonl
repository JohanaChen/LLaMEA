{"id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "63eec226-ce02-4d03-b80b-f72020c960a5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "701225a7-63a1-4b34-8302-b91a8f50727a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "c5debea4-9d61-473e-914d-5deafa103db0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "489b4873-98d7-4ff1-8658-99459d767300", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "08e80e1f-3091-4be0-bbb4-e6a13963d4a8", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "c607b102-e2b1-4dba-b0f1-a2f0378d7ae3", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "56eb618d-bf70-4966-9b93-34800e390f34", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "cb2f7aaa-9038-453b-8907-c76205695723", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {}, "mutation_prompt": null}
{"id": "55f3e5c9-25ba-49ab-88a1-a3c3d5082aa9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.gbest", "name": "HybridPSODE", "description": "Utilizing a hybrid approach combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 9, "fitness": 0.23334555733643927, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "7e5bf21d-2278-441c-9734-cc0924a0fba1", "metadata": {"aucs": [0.887354077877943, 0.8990644518498097, 0.9237096653269696, 0.9343664717675879, 0.18970310688968384, 0.9065182141366227, 0.9262557637606629, 0.9202840776617455, 0.4404901246702161, 0.024096002059913135, 0.03513455814513178, 0.055547860952115835, 0.23707007076363618, 0.0021032315686405623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10489021279058452, 0.11296344489214194, 0.08061676344742807, 0.08337708415689304, 0.09738066749778373, 0.06252387965706707, 0.06472684587825495, 0.11189130402142278, 0.09682020501327149, 0.07995064870071023, 0.07403053297100559, 0.0767391197516536, 0.0978411610258072, 0.075032281711092, 0.1060311226862608, 0.13155809850102962, 0.036633882309471066, 0.02867890299949416, 0.9840120838058468, 0.9893286597783284, 0.9881163956792687, 0.9674997336092416, 0.9815653786607929, 0.9610096494449899, 0.972732328463378, 0.9764936807593358, 0.9746464958519698, 0.27336966655371575, 0.05963250201985848, 0.1292467554831841, 0.2061774014984752, 0.1502894300140819, 0.43052965174802016, 0.16736909933260735, 0.37610212390887066, 0.21778826902846926, 0.21086932950259962, 0.09933331825272107, 0.1662201816739043, 0.28415998828843225, 0.19633168979089832, 0.19317517470728185, 0.11373198497361825, 0.14029059099958396, 0.2372622054964254, 0.21526781923054072, 0.20212913933420318, 0.12655134780231148, 0.14374673230191415, 0.13599834329769767, 0.045444312544987375, 0.1303692787659253, 0.17636702513001545, 0.17104381768794952, 0.221550853766461, 0.1269982326558322, 0.13337479833333588, 0.28999421021037064, 0.1421190532936285, 0.17106898983965313, 0.4220440400280838, 0.11430035805029037, 0.128499284045972, 0.01903122505776733, 9.999999999998899e-05, 9.999999999998899e-05, 0.051532021394127714, 0.004331179085431902, 9.999999999998899e-05, 0.005070427893869467, 9.999999999998899e-05, 9.999999999998899e-05, 0.12756494339179913, 0.06891047084023305, 0.15747547019086616, 0.07050903400906938, 0.03256216498544906, 0.05141217522140851, 0.18679583375866737, 0.19272935912940725, 0.054639228255181305, 0.12804974558863047, 0.1834652870797301, 0.1356245249710708, 0.11498227426851593, 0.08297000346702521, 0.12712272371335498, 0.10569662807946023, 0.23511437053950535, 0.09091776089839476, 0.12444026611018688, 0.19430737590023395, 0.1578352406838518, 0.04702447858003611, 0.05128574943443398, 0.20780401078086608, 0.12944990435392478, 0.15970276110773796, 0.08455040483470333, 0.5477669631632159, 0.5590878182627017, 0.5113479370493706, 0.5799934182044819, 0.5839320001185277, 0.5185019758672844, 0.5577396323295247, 0.42173364080400566, 0.5461683484764909, 0.07119564139837131, 0.08954121824954275, 0.0440293566575638, 0.09423385455538669, 0.07296537100128075, 0.16346758753007984, 0.08668705181139813, 0.12623925695361793, 0.09819892985021283, 0.1795715256725634, 0.18511660086107462, 0.18220676866454855, 0.2536044872404969, 0.24456838939457637, 0.17395925671058354, 0.22661185902836334, 0.19046709655263105, 0.20591920304072153, 0.17363834156456526, 0.2845607123047992, 0.18373693336078545, 0.23141980062316314, 0.24045523654869483, 0.2698026617401048, 0.22401271993095628, 0.2681670503769519, 0.18274948117629441, 0.28018159377333673, 0.19122831401433993, 0.11998480188662175, 0.25837546097448194, 0.2315582368460939, 0.22910148074886516, 0.18621621838482116, 0.2269224258155682, 0.1749986650317944, 0.20501885877935466, 0.20898710259510278, 0.16515643036414207, 0.21703669874428677, 0.18626961304090695, 0.19476583367152822, 0.24110145783239678, 0.23661710476193976, 0.20702610702560875, 0.19883063802536283, 0.18112018330048396, 0.1844025732034945, 0.1769001837304871, 0.20189418280503846, 0.166286144006912, 0.17435705182544825, 0.1758839348839214, 0.18727639476491786, 0.4154283076699321, 0.1666769667853687, 0.14948576843642714, 0.8084195560496226, 0.20173806398438454, 0.20082306651864268, 0.12317565971024191, 0.16940036376147105, 0.5628730228790081, 0.3330181007302958, 0.1568679132589399, 0.3027610716648871, 0.10466349705393918, 0.15227366675908416, 0.4798969654686268, 0.10490290888577092, 0.296213115901819, 0.11302584886191158, 0.18584039021170207, 0.1947576956489625, 0.2677022878096009, 0.21742586070909498, 0.22765421320905566, 0.19153619856916038, 0.24162854838377912, 0.1762127699765027, 0.19878152613816358, 0.0892856805887754, 0.10788123078833123, 0.09401504880933009, 0.08462033140882919, 0.08102705145353228, 0.07932486503464864, 0.12850791964054076, 0.08879346633253082, 0.09376333297371497]}, "mutation_prompt": null}
{"id": "d4727bee-b248-46fe-90e4-b52f8104514b", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 10, "fitness": 0.3558276537612074, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "55f3e5c9-25ba-49ab-88a1-a3c3d5082aa9", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "1c1d2ce9-c394-46f8-a9b0-d73f946639a7", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "c9baec17-ae84-4ea7-b444-401319267b5b", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "0774819a-5a05-4392-8943-55f05926a30d", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "6073a4b2-6db9-41b0-8650-6dd5f3f3fd38", "solution": "# import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "DynamicHybridPSODE", "description": "Enhancing exploration and exploitation in optimization tasks by incorporating a dynamic mutation strategy alongside Particle Swarm Optimization and Differential Evolution.", "configspace": "", "generation": 14, "fitness": 0.3558276537612074, "feedback": "The algorithm DynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "485c8f1d-5386-4e25-b453-c5b615622426", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "190f199d-df49-4b86-9fe4-8fe06c242454", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "20f328df-6d3d-4b8d-a887-693513d08b05", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "4ce86eb4-998d-4cce-b66e-5388fbf184bc", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "31863da2-b7e6-46b1-adfa-1fb0e2d38366", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "5825594c-90c7-493f-a519-d555785f6796", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "ebd120fb-8c10-46f9-b694-d951335a7d69", "solution": "# import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.zeros((self.pop_size, self.dim)) + np.random.uniform(-1.0, 1.0, (1, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "EnhancedHybridPSODE", "description": "Enhancing HybridPSODE with a novel initialization mechanism for particle positions to improve exploration and exploitation trade-off in optimization tasks.", "configspace": "", "generation": 21, "fitness": 0.02188887427787851, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.04.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.08812669613967261, 0.09184241397716564, 0.0942074318933992, 0.02327548026999504, 0.026993925385500606, 0.029742299161994334, 0.040975666367923935, 0.05247822173904937, 0.04356725750448409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09906914132918154, 0.09148750281252882, 0.07876689334731402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08074021382112406, 0.02595530816981173, 9.999999999998899e-05, 0.022781099737819055, 9.999999999998899e-05, 9.999999999998899e-05, 0.08918095042814767, 9.999999999998899e-05, 0.03785522559505483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017423918277349015, 0.008938143273061194, 0.04115463074621695, 0.04135187510538996, 0.01953732284967502, 0.01226550006716165, 0.12004846543890235, 0.15293384132161958, 0.09836928362914532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02304621481403446, 9.999999999998899e-05, 9.999999999998899e-05, 0.03722401781894946, 9.999999999998899e-05, 9.999999999998899e-05, 0.0041352039689523945, 9.999999999998899e-05, 0.06697747531373754, 0.06637673918486253, 0.0747677134924083, 0.1148492446380549, 0.12131218261283772, 0.13665138945650723, 0.09225742175081741, 0.08252937150715967, 0.07494471295982874, 0.0032577541564662305, 0.031524855696847376, 0.01869848992530354, 0.051471953012946714, 0.043931023736088926, 0.03779250340964757, 0.028090227506911813, 0.014769819226738923, 0.009187117900757769, 0.0804169278661564, 0.12200897927957466, 0.08859898670742627, 0.09222593190539541, 0.1105358227515395, 0.07516171370658575, 0.10545249900347464, 0.09692033363278207, 0.13590634996995798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04913055834541813, 0.041986173206695954, 0.029051259049504008, 0.035894727575034646, 0.024704459997360928, 0.034989447055674416, 0.020224946777458674, 0.022707244929405013, 0.014468788468039895, 0.009818438675608054, 0.012515159296769163, 0.011396349866605981, 0.011828123527837464, 0.01077893462103019, 0.014334838101784264, 0.01558910886604603, 0.012931979219904854, 0.018395329173320762, 0.10301240705616999, 0.10723799181739924, 0.06335830207093784, 0.07210712988973977, 0.04869065817470164, 0.06172834713152697, 0.05418932749994143, 0.06179223148002877, 0.062918779711573, 9.999999999998899e-05, 0.008635730011783749, 0.014865301956971444, 0.014985561686893578, 0.009520878890401763, 0.014357137207482218, 0.01615542992575736, 0.03704254327818257, 0.00406153417733035]}, "mutation_prompt": null}
{"id": "0ccfee98-1c78-4a2d-9e92-e84d88ac0c8e", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e5ed4ed8-4a9e-4a46-a46b-4215843eb000", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "75a84de5-d072-4426-9be1-4889974ead0e", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "1747a4b5-2edb-48e3-b37d-303a20e7ae26", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "68cf6d18-11fc-4ff4-aecc-9dfe743b9b08", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "c7e39faa-d52a-4ef3-aab7-6bd9325ef474", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "3c2b0d71-b72d-4372-8138-e349c1365bd7", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "a1ebfe37-5e25-4184-a43c-f74d8c16f1fc", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "dc270e60-3428-44e3-9325-4fc66c3aee0e", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "06d82d32-35b8-4004-939f-a54a4f3e4170", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "c082af3f-5043-46d6-90a2-128c878c4144", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "a0ee3113-b83f-47a9-91e1-c846c4b1e8f8", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "b79c1dae-fbe9-4bee-82d3-24b30fa7559d", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "b842bf6a-f19c-4069-8ef3-1f620463bbd6", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "5aae1d0d-c3d0-4ae1-8711-dd8d3cc5cf83", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "290880df-ef98-4963-a33b-aaed21a0a671", "solution": "# import numpy as np\n\nclass FireflyLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.fireflies = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.best = np.zeros(self.dim)\n        self.best_score = np.inf\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        s = np.random.normal(0, sigma, self.dim)\n        u = np.random.normal(0, 1, self.dim)\n        v = u / abs(u) ** (1 / beta)\n        levy = 0.01 * s * v\n        return levy\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                intensity_i = 1 / (1 + np.sum((self.fireflies[i] - self.best) ** 2))\n                for j in range(self.pop_size):\n                    if func(self.fireflies[j]) < func(self.fireflies[i]):\n                        beta = 0.2 * np.exp(-0.2 * _)\n                        self.fireflies[i] += intensity_i * (self.fireflies[j] - self.fireflies[i]) + beta * self.levy_flight()\n                if func(self.fireflies[i]) < func(self.best):\n                    self.best = self.fireflies[i]\n            beta = 0.5 + 0.2 * np.random.rand()\n            self.fireflies += beta * np.random.uniform(-1, 1, (self.pop_size, self.dim))\n            # Dynamic Mutation Rates\n            F = 0.5 + 0.5 * np.random.rand()\n            CR = 0.1 + 0.9 * np.random.rand()\n            r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n            mutant = self.fireflies[r1] + F * (self.fireflies[r2] - self.fireflies[r3])\n            crossover = np.random.rand(self.dim) < CR\n            trial = np.where(crossover, mutant, self.fireflies[i])\n            trial_fitness = func(trial)\n            if trial_fitness < func(self.fireflies[i]):\n                self.fireflies[i] = trial\n        return self.best", "name": "FireflyLevy", "description": "Implementing a Firefly Algorithm with Levy flights for global exploration and local search, incorporating dynamic mutation rates for adaptive optimization.", "configspace": "", "generation": 37, "fitness": 0.06998200078974225, "feedback": "The algorithm FireflyLevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.20793627262368242, 0.12264488278232966, 0.17357526905880605, 0.08984172814444269, 0.06483127030907831, 0.08318237198192979, 0.09134966405838785, 0.10189171033035616, 0.10232449000768107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029164048480310845, 0.030357362560673562, 0.017370640513811875, 0.036731395528307065, 0.028055410178215445, 0.04361082538673422, 0.03060349721886546, 0.006828777274955455, 0.03213529521876479, 0.029173391110599578, 0.018105690398552032, 0.02597024723628205, 0.04241274286382868, 0.0068475303421419165, 0.01996178698521922, 0.010828948869111232, 0.010327282847286567, 0.00658414453093481, 0.04733923724497979, 0.04447226156920081, 0.049194934559782855, 0.053468443559302026, 0.04885163508827994, 0.042806626433325445, 0.06382586091920006, 0.04897996297581486, 0.04363227111831913, 0.012521937597751442, 0.019012122899095485, 0.0016363097043873287, 0.0552972537504125, 0.022943454961368515, 0.027301067336763296, 9.999999999998899e-05, 0.015853947166764693, 9.999999999998899e-05, 0.11532306512263912, 0.11859738767075956, 0.10439861843162379, 0.12223314141018049, 0.06794044421800449, 0.01821671943982961, 0.07244325080798897, 0.07744789120742757, 0.044918724050973524, 0.030500148702122365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005947551007822738, 9.999999999998899e-05, 0.003121345565335276, 0.09697418209997899, 0.07517879157683671, 0.0584276225295709, 0.07124385778706221, 0.07014825276489922, 0.0762609009594657, 0.09077210673841496, 0.059303192317141096, 0.07430951474878145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028995724268924272, 0.012491372261154154, 0.022702670315278395, 0.013627161654639841, 0.010252694834444465, 0.00740627177314146, 0.044396737235183004, 0.0014243427367247596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1599517735862055, 0.1718181860714445, 0.18167537458816063, 0.11794270149326092, 0.10698283213471749, 0.10511292924622628, 0.18393335551791568, 0.15779426691253629, 0.19347244759900317, 0.013322043804525174, 0.004360554716672405, 9.999999999998899e-05, 0.030510523756818286, 0.020354652195880396, 0.03575106143650775, 0.030049799530784904, 0.022486050558061632, 0.031623683737426855, 0.10380176763650584, 0.12489348327739425, 0.1330109169196516, 0.10958769925108314, 0.11174541068090493, 0.09138677692072084, 0.10990326294957176, 0.11111839489685482, 0.0904865065717908, 0.12099502193316836, 0.12073950024528879, 0.14512049736727473, 0.18140874940970475, 0.1553265919773108, 0.1515930834261069, 0.1349957809727924, 0.17365418936972254, 0.12024248843176488, 0.06749626330209901, 0.05493284794484665, 0.07339749587580557, 0.11593490297673237, 0.08732802833798048, 0.08952771439115237, 0.0873110045292782, 0.11779421629283593, 0.07822875953842179, 0.259206177910164, 0.25900338249932253, 0.2593454468774493, 0.25924789509109336, 0.25906590912449123, 0.259123487550999, 0.25937471609089124, 0.25902821141826493, 0.2593506469812543, 0.07656770422344672, 0.06672474674857043, 0.09441935490074682, 0.08696581922309665, 0.0707228591793102, 0.10442384294426588, 0.07144409226091053, 0.06831722447724276, 0.028935871157003246, 0.10014959518876254, 0.11298570421135534, 0.1127908246195306, 0.15721849892795903, 0.12076337156869488, 0.09391015777938594, 0.0736348073415829, 0.10408125331139961, 0.08163739647186197, 0.20844190231868098, 0.10041403930439519, 0.1311828053664974, 0.07430908250375523, 0.04248312732552728, 0.04891015377638319, 0.08243548933228595, 0.09382779043772826, 0.0776383057251061, 0.18681474463268866, 0.17309895137534403, 0.19614775333288548, 0.17284576958213949, 0.1695303225620497, 0.16443720609089163, 0.16377571199591534, 0.17329132998297714, 0.16783415381704725, 0.0456938163818551, 0.037598151083651055, 0.05304054714728568, 0.05039127838188817, 0.058972667988666405, 0.050818135589811964, 0.050384713573169426, 0.03340291359792469, 0.06146102902341877]}, "mutation_prompt": null}
{"id": "6d9d105a-5131-45b0-a8f8-7684f1365b74", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "6c1b40cf-701c-4eaa-b9fb-8ec741b8d289", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "25379294-799d-43d0-87f4-70d5e3378fb9", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "05fce5cc-7430-41df-be49-e683c42ae3e9", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "66f500aa-67dd-4150-99ea-88fa354ff343", "solution": "# import numpy as np\n\nclass PSODEEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "PSODEEnhanced", "description": "Enhancing exploration in optimization by integrating Particle Swarm Optimization (PSO) with Differential Evolution (DE) operator and Adaptive Mutation.", "configspace": "", "generation": 42, "fitness": 0.3558276537612074, "feedback": "The algorithm PSODEEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "b0c512a8-b552-46d0-a39d-310e30426ae6", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "825c7da2-ba4b-4f5e-8e23-e066ecc648c8", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "754fb566-1f72-4207-bf41-44cc9e6b518b", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "1443befe-4678-4ef1-a0e8-4fc6213bad7a", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "feebdd8e-403d-4d36-858b-4488a9f75240", "solution": "import numpy as np\n\nclass SADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < func(self.pbest[i]):\n                    self.pbest[i] = self.particles[i]\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                scale_factor = np.random.uniform(0.5, 2.0)\n                crossover_rate = np.random.uniform(0.1, 0.9)\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + scale_factor * (self.particles[r2] - self.particles[r3])\n                trial = np.where(np.random.rand(self.dim) < crossover_rate, mutant, self.particles[i])\n                if func(trial) < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "SADE", "description": "Introducing Self-Adaptive Differential Evolution (SADE) with adaptive control parameters and mutation strategies for efficient optimization.", "configspace": "", "generation": 47, "fitness": 0.1328955757057694, "feedback": "The algorithm SADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.3211912396925384, 0.29596785140376536, 0.3090889665643174, 0.29709098282484836, 0.29571219152194406, 0.3241202096894338, 0.29919992675620166, 0.2533004493152069, 0.27567910084595226, 0.01394843507000787, 0.0034283866100611737, 0.00011796100052596792, 0.035578354171373894, 0.01769992164470402, 0.011186012858381389, 0.010534619047638638, 0.022342880289118017, 0.01716629979118456, 0.07147866469911202, 0.07789239624868183, 0.07530868787053846, 0.0674470504935758, 0.07497470434416176, 0.07110413880043542, 0.08971404757884671, 0.07732933497375383, 0.07524886172690604, 0.06910156602753359, 0.054078373718503325, 0.05598586658733862, 0.06560340073906923, 0.059344656645708205, 0.055202413687965746, 0.06680052225687905, 0.08076967077731623, 0.06646285300281674, 0.9490110630865097, 0.9484241593042513, 0.9388214634049434, 0.919607658114738, 0.9737341630946795, 0.943674324828088, 0.9453641858203241, 0.9735604034792743, 0.9770944169102636, 0.03752805056412567, 0.03122960872775804, 0.0375981139698075, 0.04039071789502757, 0.016987076406265955, 0.03420897683865809, 0.06336799370456392, 0.015662733729392087, 0.05921700845800082, 0.1517163208315122, 0.14046236907743603, 0.0818618446764815, 0.12173095767066244, 0.1125984788031088, 0.13279041021987048, 0.13345934071429988, 0.14681045542419124, 0.09486078728362424, 0.028759181467038042, 0.05620480933603411, 0.013270925704106595, 0.04981646245080151, 0.011284336878600532, 0.03636839936826197, 0.051424453320972896, 0.03943715403939407, 0.048313524051197265, 0.04030488373164465, 0.022027610740126158, 0.021157802675185855, 0.043413736476596076, 0.044810008327659356, 0.05589309844219004, 0.0497113674435814, 0.020484313184760516, 0.05426626829627823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05912179515591487, 0.0011965599325485243, 0.000624121489835705, 0.010353885859324286, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063992465862567904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001861940732189593, 0.008407159821721688, 0.008065295267405626, 0.016550491700864534, 0.01203254643849927, 0.03905574472698281, 0.004634260095818354, 0.004727588314464071, 0.0016643303701299184, 0.2220792913910492, 0.21243612020168634, 0.2714270570915911, 0.24925094550226412, 0.240736655754049, 0.18995924975299372, 0.23940329252016923, 0.23308151744712124, 0.2886092121147106, 0.054874044595667915, 0.045026296944828625, 0.042003220335033786, 0.04864277502587189, 0.053208350761042134, 0.0620450215830084, 0.0644164119341849, 0.05231038954495326, 0.05575621680403675, 0.12442499422776632, 0.11386800894139726, 0.1096940540882011, 0.13420491347099628, 0.10842849318528025, 0.11129851254988898, 0.09254469983066826, 0.11601519913854208, 0.10543683720169317, 0.17223831982669358, 0.1853849055807698, 0.17118422961005342, 0.17453471092905637, 0.17501135699358183, 0.17198698909921695, 0.18624421544363545, 0.1871712748229164, 0.1771511262216363, 0.11493151710774963, 0.10919521159164669, 0.10769073428246279, 0.13602308865491852, 0.10965014590959321, 0.11527976997215139, 0.11441378200322727, 0.11990119681154743, 0.12228949293927527, 0.1893070466677259, 0.1586943067174963, 0.1680052648265461, 0.1640157041462278, 0.1591259772386624, 0.1504251020125088, 0.1654482150803146, 0.15018401900289735, 0.162887110901065, 0.16498482771749878, 0.1317883179278404, 0.13429803300514542, 0.14870035751574906, 0.1505099431037974, 0.15649167362199168, 0.1653460122462167, 0.16391499486775096, 0.15887403610008732, 0.14205352288309825, 0.16974869980758744, 0.17564065464415157, 0.18025992471269292, 0.13287089084156634, 0.10835824957173357, 0.18020031249101298, 0.14963157183073672, 0.14236013188024932, 0.23794630621857127, 0.1573412563923423, 0.12918330552477386, 0.1577269365803553, 0.14734672744655597, 0.13463980194187986, 0.09934516594780451, 0.10477448260558997, 0.15547064107347575, 0.15786999775654875, 0.16887236535171013, 0.1593344336032293, 0.15923560101621625, 0.17112986161267651, 0.161963682755091, 0.15919052414214696, 0.16834763426715904, 0.16473572695258865, 0.056615463839919555, 0.04893570216689713, 0.05705855709480967, 0.054736840955638355, 0.049049670641622245, 0.04465267160110631, 0.048150423874206205, 0.04349398859992748, 0.049890446641581154]}, "mutation_prompt": null}
{"id": "230446fd-ca1f-4270-886c-271c4506f8c6", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "531f5e5e-6ffb-43bd-a46a-e355eb514cd7", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "db0da982-3296-4c95-a02f-4cb743012fa1", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "b2caa776-761e-4a8b-8e2d-e83f049a5694", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "aeda082c-8471-44e5-ae0f-feb3d9b4f1fc", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "2baf18ae-20d4-4635-a1bc-e7454bf882c1", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "ee7afb36-ed10-4401-ab84-ed521b088c00", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "c7c7a226-fbd8-4a43-8a8e-22d02471d27d", "solution": "# import numpy as np\n\nclass AMDE_DVU:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "AMDE_DVU", "description": "Introducing Adaptive Mutation Differential Evolution with Dynamic Velocity Update (AMDE-DVU) for enhanced exploration and exploitation in optimization tasks.", "configspace": "", "generation": 55, "fitness": 0.3558276537612074, "feedback": "The algorithm AMDE_DVU got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "421dbecf-a186-4c45-862d-7f818efae409", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e9729fca-7084-4931-87b4-3e022b7832e1", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "74c0ddb3-1b43-4bde-b7fb-e72810b946e3", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "32693ba7-a8a5-483f-b74b-cb583327c215", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "2604a34d-ba5b-4aed-867a-dfb2b65cc84d", "solution": "import numpy as np\n\nclass NovelHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation and Crossover Rates\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "NovelHybridPSODE", "description": "Introducing a Novel Hybrid Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) with Adaptive Mutation and Crossover Rates for Enhanced Convergence in Optimization Tasks.", "configspace": "", "generation": 60, "fitness": 0.3558276537612074, "feedback": "The algorithm NovelHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "5c6b3478-7604-48d7-ad24-043b43217201", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "4ee30a30-060c-4741-bd39-b0d0b0e1cc28", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "54a9ec6f-2463-4ea6-9892-bd1e2b97a320", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "9f98718b-d352-4932-b5df-cac7aaf80f25", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "d5c0f920-396c-45c0-aa7d-7717a0be9a21", "solution": "# import numpy as np\n\nclass HybridHAMDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridHAMDE", "description": "Introducing Hybrid Adaptive Mutation Differential Evolution (HAMDE) with dynamic velocity updates based on particle swarm optimization to enhance exploration and exploitation in optimization tasks.", "configspace": "", "generation": 65, "fitness": 0.3558276537612074, "feedback": "The algorithm HybridHAMDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "04b9cdca-52e1-4fb6-8d8e-0c9d5d048611", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "4bf04d24-9975-40a8-b5f6-c7dd96b6ef8d", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "4609bd43-4c4d-47e8-8a1a-2aeb74c7b226", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "76722d58-21d5-449c-9ed9-b051c867ad22", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "ed8f4da9-7742-4d30-bc66-2441e01e3ff5", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "625743e5-144e-417e-8ad8-1e4ceae6746c", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "a5c41a23-6af5-484f-8115-5271d712481a", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "67a6efe0-997d-4161-94cc-8b924e9c65a6", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "2edbddfe-f295-46e6-8a4b-e6ff769fe871", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "1f2c7838-220d-4711-8e19-aeeada5935b7", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "a2267ccd-44bb-4ad4-850e-cbe7768399b1", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "21299649-de31-4f2d-91f0-4158ecd0be4e", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "75e2294f-b662-4c0f-b10f-dff6191b9844", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "538a3319-06d7-45c6-8c6e-ff97723f16e7", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "0ae3ac88-c3c6-4e6f-ad49-aa2fdc167a24", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "8fef4628-37a7-47d4-ba1c-3e784043d3d5", "solution": "# import numpy as np\n\nclass NHFA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "NHFA", "description": "Introducing a Novel Hybrid Fireworks Algorithm (NHFA) that combines the explosive behavior of fireworks with adaptive mutation strategies for enhanced global search performance.", "configspace": "", "generation": 81, "fitness": 0.3558276537612074, "feedback": "The algorithm NHFA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e6455a1e-b446-47d6-996b-7a71eb175233", "solution": "# import numpy as np\n\nclass HybridPSODELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Lévy Flight behavior\n                if np.random.rand() < 0.3:\n                    levy_step = 0.01 * np.random.standard_cauchy(self.dim)\n                    self.particles[i] += levy_step\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODELevy", "description": "Enhancing HybridPSODE with Lévy Flight behavior for improved exploration-exploitation balance in optimization", "configspace": "", "generation": 82, "fitness": 0.27949094836660193, "feedback": "The algorithm HybridPSODELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.6870188719999981, 0.6141544433598891, 0.689387430444117, 0.645597985987193, 0.6220587091190641, 0.6513224073819603, 0.6419137357150555, 0.6743227690434035, 0.6533489589215231, 0.22301276110763157, 0.14104056284667243, 0.24887275461869973, 0.22677236544830104, 0.15374015997961654, 0.23936166471287335, 0.20842322475654995, 0.1475721947641181, 0.18469314882507415, 0.10501615262984965, 0.13830734570940295, 0.14375961692238248, 0.1409002011822833, 0.1569566888556505, 0.1276446214283966, 0.13972194728755405, 0.12181552132698215, 0.12430104737072001, 0.13081663232890517, 0.11695661204903551, 0.10328692010678953, 0.15101830735108068, 0.12205569574125097, 0.09689583103728239, 0.15116497660751282, 0.1162809226306295, 0.11708104508811668, 0.9722731916342539, 0.9665693222687276, 0.974691609501955, 0.9753241783911695, 0.9715386729461419, 0.9651447103389901, 0.9805247598091261, 0.979197454871266, 0.9744998502390128, 0.39007588141545557, 0.37905296907338615, 0.4140200698591946, 0.39385795559262327, 0.3540124815605288, 0.388893542228829, 0.40306241309967494, 0.4276284064532899, 0.397846540150271, 0.22849067084838315, 0.7938290067497513, 0.7463404503300545, 0.8603705139621329, 0.19123792277566942, 0.2674505572702225, 0.21620669131460868, 0.8365585353856904, 0.7668703127301054, 0.25982117025661966, 0.13162020186979428, 0.2232109260576931, 0.18633642216075907, 0.2139673317775106, 0.14007003617381653, 0.22677611034725764, 0.20669225370649147, 0.22093215214988982, 0.22505974284652197, 0.12130801908142563, 0.22803245420598794, 0.206029388165212, 0.19940285505175726, 0.26054424848746427, 0.2118226739935133, 0.014342571314491348, 0.21344645618391034, 0.0007604379166643582, 0.0238002322686085, 0.0018351934904173861, 0.08854885807383583, 0.1027396829454359, 0.13837433973749247, 0.03801157655164955, 0.057142109675414, 0.14196304083620903, 0.11789099844297413, 0.06400867337346539, 0.08475202020961736, 0.14405818260547554, 0.09240531932464058, 0.07442659916844896, 0.21501605915475197, 0.08623244043696099, 0.21499511103749558, 0.043698409751118716, 0.033341136070390354, 0.14206855741372415, 0.11130375700067885, 0.08076739331193517, 0.09382425943598593, 0.07399123241402084, 0.06427604196012637, 0.07552337692187971, 0.18987955821572144, 0.07862763579195875, 0.1681043106619221, 0.09900346784230529, 0.07627861829501548, 0.17283071123342708, 0.11718214521679782, 0.1852532679221287, 0.08558416076421071, 0.49890774687160533, 0.4758030298974153, 0.5662278925251529, 0.5339954430894934, 0.5025144912356402, 0.5075039684378817, 0.5077916194304166, 0.5226608409580216, 0.5232619253342268, 0.09007034001670178, 0.13173839880527793, 0.12460979577845133, 0.10492363010091599, 0.12188296184511305, 0.1539460744168567, 0.14882864203480017, 0.09945816005949526, 0.0818618947998917, 0.29651909328573767, 0.20757183961366643, 0.2590192856320418, 0.25843348651749043, 0.2918035575300544, 0.2768443435596609, 0.41652675526670746, 0.23740755511899403, 0.2253105807363901, 0.23501708136975763, 0.34058215114232593, 0.3582580085887346, 0.3907620276002072, 0.3639610170465708, 0.35266141582349875, 0.2824790210039778, 0.37434518755233237, 0.36778274665998956, 0.2556556928687205, 0.3089281374921321, 0.2970303905760585, 0.2704030838026069, 0.24923030680714653, 0.26143182249741204, 0.20792130067075953, 0.24811387864815138, 0.2663911774498404, 0.2115130148302935, 0.20158881985172805, 0.2001844260612885, 0.2364143014396528, 0.21144452327641627, 0.1954513000518322, 0.21518463501405882, 0.2022318469776918, 0.20502570229291828, 0.2453753446277377, 0.21383872360326261, 0.2087753431899554, 0.21463109072628517, 0.20322196949630322, 0.2488922944211588, 0.23379077763394085, 0.2108384587751959, 0.20016268812795723, 0.8777908811038722, 0.1659201021453327, 0.18713177939190806, 0.17194704433894625, 0.20022718561157482, 0.19847329939322522, 0.09964435172027974, 0.16884728087057976, 0.16531295517559952, 0.8539472283261065, 0.7753693673462809, 0.735825095264861, 0.20815079996336028, 0.16756972299767459, 0.21216028821725963, 0.20737417876968223, 0.16682524058094172, 0.7167006283540976, 0.17995591253170495, 0.17963431541105823, 0.16646743408433962, 0.18422478311177792, 0.17786964941959482, 0.18691444500195276, 0.17998575883430745, 0.1734938181251957, 0.18513358411825798, 0.07795554732548737, 0.07893155663034268, 0.09423973739381108, 0.08621249340089832, 0.08233205750824668, 0.11179664308580484, 0.08446388867232157, 0.0822813368153138, 0.08391456045892243]}, "mutation_prompt": null}
{"id": "19d5d1f1-fc57-4f18-bb5e-6a4a73ab6daf", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e63baeeb-7ac8-4f76-a10a-1366b17c6b0c", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e5371ca5-b669-4369-a408-7f169fab15bb", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "4f81c2ee-8909-42ab-8808-bea8663e9105", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "f7a93e43-6ca4-4980-b359-f578cd700305", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "7fd004a3-0bf5-48d3-928b-66e28ee171b0", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "3feecc43-4513-44c6-ba3b-d01a1ca8ec15", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "51f5d45d-0d71-47a7-a426-c06015b180cc", "solution": "# import numpy as np\n\nclass EnhancedPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Dynamic Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "EnhancedPSODE", "description": "Enhancing Exploration in Optimization with Dynamic Adaptive Mutation Differential Evolution (AMDE) and Particle Swarm Optimization.", "configspace": "", "generation": 90, "fitness": 0.3558276537612074, "feedback": "The algorithm EnhancedPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e6daf758-6ce6-4e98-8ab9-559579f2990e", "solution": "# import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Enhanced Differential Evolution with dynamic mutation adaptation\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "EnhancedHybridPSODE", "description": "Enhancing HybridPSODE by introducing a dynamic adaptation mechanism for the mutation strategy in Differential Evolution to improve convergence performance.", "configspace": "", "generation": 91, "fitness": 0.3558276537612074, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "d5fcba27-3c3d-48c8-b530-389e72219c7f", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "dad9140f-00ea-4f79-9f84-ee9765a30672", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "12c057ff-f878-4f87-9f8b-6bb44afe976b", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "d1734862-fd26-479c-8a84-761597535887", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Implementing a Hybrid Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) with adaptive mutation rates for efficient global search.", "configspace": "", "generation": 95, "fitness": 0.3558276537612074, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "2cddb8db-7f72-42ea-a200-f5f0e6ced672", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "e897eb10-3b7f-4c77-bd09-db949a97d7be", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "6cef100f-94ab-43ec-8670-c1d69f9280a3", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
{"id": "771eb0c8-bead-4c17-bc96-c987dfd4a29b", "solution": "# import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.pbest = self.particles.copy()\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest = np.zeros(self.dim)\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                if fitness < self.pbest_scores[i]:\n                    self.pbest[i] = self.particles[i]\n                    self.pbest_scores[i] = fitness\n                    if fitness < self.gbest_score:\n                        self.gbest = self.pbest[i]\n                        self.gbest_score = fitness\n                w = 0.5 + 0.2 * np.random.rand()\n                c1 = 1.5 * np.random.rand()\n                c2 = 1.5 * np.random.rand()\n                self.velocities[i] = w * self.velocities[i] + c1 * np.random.rand() * (self.pbest[i] - self.particles[i]) + c2 * np.random.rand() * (self.gbest - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                # Adaptive Mutation Differential Evolution (AMDE)\n                F = 0.5 + 0.5 * np.random.rand()\n                CR = 0.1 + 0.9 * np.random.rand()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.particles[r1] + F * (self.particles[r2] - self.particles[r3])\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.particles[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness:\n                    self.particles[i] = trial\n        return self.gbest", "name": "HybridPSODE", "description": "Introducing Adaptive Mutation Differential Evolution (AMDE) to dynamically adjust mutation rates for enhanced exploration in optimization tasks.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4727bee-b248-46fe-90e4-b52f8104514b", "metadata": {"aucs": [0.8506524243381488, 0.849956372091156, 0.8609384338875632, 0.8614792691807345, 0.8509320799189553, 0.8570408560729743, 0.8580809304137365, 0.8593539617776569, 0.8537196724072136, 0.5482466138473374, 0.6718095882807067, 0.6356085863173748, 0.7059489482191674, 0.7216793524348042, 0.6848453569970703, 0.6564878864084167, 0.7155276579044552, 0.671069921253281, 0.14150834801424084, 0.13038227037897232, 0.11750724466209705, 0.13993005024847605, 0.13003021942333093, 0.12992587222412733, 0.12071178234482582, 0.14124852269719435, 0.12332871563187309, 0.11313073552086428, 0.09833433008430015, 0.12683857597271764, 0.11455035048444984, 0.09405048363398583, 0.08981311017439164, 0.12669964538256917, 0.13249564539486547, 0.1374518531160729, 0.9789492343744568, 0.989616947769645, 0.9878570020706907, 0.9720853147218238, 0.9688711591339558, 0.9650160019671341, 0.9782507662220641, 0.9666493062121544, 0.9677276637770186, 0.691370411901258, 0.61849041181602, 0.6600411176858896, 0.6367524252884726, 0.6569362920274662, 0.5842291429578698, 0.08815919045522191, 0.607588684901171, 0.7099187095843812, 0.3908668488457657, 0.1682375238652135, 0.22373878216404053, 0.9264582517154014, 0.12950588671627816, 0.27412246374828997, 0.23486151352774431, 0.22932102806794064, 0.8204641267186302, 0.5048854584982199, 0.32317224080081197, 0.1859619229471252, 0.1308042673542421, 0.23317093909771802, 0.6440077134374234, 0.44876522117437256, 0.5284381026031169, 0.22409184964907058, 0.37219956706566093, 0.45712049689918166, 0.12775168877795495, 0.4617651926527312, 0.3480602142988135, 0.3498762283445306, 0.47670151160790586, 0.2968222071327947, 0.31494832832038056, 0.09620224428624824, 0.07041033328878588, 0.2259378395214967, 0.06656832530534684, 0.08518886197111097, 0.04015895935161129, 0.07272586504322276, 0.31245441938270646, 0.20833044877648776, 0.247489095002993, 0.09359727925641015, 0.6362307928804576, 0.27492300503910283, 0.18235261171176753, 0.21414217154855764, 0.20812490190129762, 0.3830216031067406, 0.5610609076275721, 0.20989716319410012, 0.17088824247762113, 0.13285810702151435, 0.3603475563081876, 0.11183620857646726, 0.07427845600474448, 0.13572567208145214, 0.1459374470100453, 0.06924789684815569, 0.15622524968093654, 0.38758733093268927, 0.2810111539806932, 0.006390341717098624, 0.26610889916865677, 0.3505312999627458, 0.04799720780986194, 0.266811142725635, 0.08105876664415979, 0.6489682590233279, 0.6845387783898257, 0.7278447628652013, 0.731264570868535, 0.7815785644314873, 0.685958990841598, 0.7424361395447073, 0.6822958002642949, 0.6740925056944633, 0.10484140723699198, 0.1430578591744388, 0.11089984334325231, 0.11404751500019628, 0.09844380280387854, 0.10896299278831956, 0.09309305772468757, 0.09210937941951636, 0.08532462508167227, 0.16704908509162908, 0.25930818456590754, 0.18877311634987715, 0.3206677009402391, 0.45688780437394694, 0.22355728839182698, 0.24475230659714475, 0.2640627059477251, 0.1833522954613922, 0.5315526480312627, 0.3751477962054419, 0.5506699056478358, 0.43845905126107, 0.4587842793603485, 0.4408561712799739, 0.5134286126603058, 0.44282597563356607, 0.3778662194136858, 0.18348461457315302, 0.2805534428483074, 0.21743089515456226, 0.24792503657130482, 0.2473666159589607, 0.35984422674997363, 0.20949844775251003, 0.24042704645210555, 0.18683989371427867, 0.2258453205473654, 0.19215433004309723, 0.229252702433292, 0.19917007258792696, 0.21680501433607546, 0.20189892251908892, 0.23183295483966682, 0.1966137343814206, 0.20351611969079275, 0.6977430220800487, 0.20652897806214876, 0.23519448241874363, 0.2058875584345794, 0.18803397654881582, 0.204622286754102, 0.2457261776454568, 0.2436161361453103, 0.18695605230673462, 0.8786654986455568, 0.1764926238323662, 0.15348813182053167, 0.9096334947883329, 0.20054529856930425, 0.19950051010913195, 0.15011137762302895, 0.16918817495215976, 0.17892749994973345, 0.8888526414800265, 0.15651285478943988, 0.8215549329099952, 0.8490278963818394, 0.1657583670987156, 0.20840506104983125, 0.8537088524354355, 0.1548432886996668, 0.11172815924508817, 0.18165285036780243, 0.17984630805661583, 0.1714202875811055, 0.18623673071113678, 0.18163793042581455, 0.17564711294168323, 0.16771864609344433, 0.1830389995402919, 0.1838932482127047, 0.09689490928284905, 0.09927283557658206, 0.08078359725403461, 0.09715974526453153, 0.07735651855455039, 0.07514428803285866, 0.08040772101052118, 0.08908008757101094, 0.0825058351188418]}, "mutation_prompt": null}
