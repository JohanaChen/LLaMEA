{"id": "5cd92934-3b90-45e0-862e-dcb3f10d309e", "solution": "import numpy as np\n\nclass SelfAdaptiveDE:\n    def __init__(self, budget, dim, population_size=10, f=0.5, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def mutate(target, pop):\n            candidates = np.random.choice(pop, size=(3, self.dim), replace=False)\n            mutant = target + self.f * (candidates[0] - candidates[1]) + self.f * (candidates[2] - candidates[3])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            idx = np.random.rand(self.dim) < self.cr\n            trial[idx] = mutant[idx]\n            return trial\n\n        population = create_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = mutate(target, population)\n                trial = crossover(target, mutant)\n                fitness_trial = func(trial)\n                if fitness_trial < fitness[idx]:\n                    population[idx] = trial\n                    fitness[idx] = fitness_trial\n                    if fitness_trial < fitness[best_idx]:\n                        best_idx = idx\n                        best_solution = trial\n                remaining_budget -= 1\n                if remaining_budget <= 0:\n                    break\n\n        return best_solution\n\n# Example usage:\n# optimizer = SelfAdaptiveDE(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "SelfAdaptiveDE", "description": "Metaheuristic algorithm based on Differential Evolution with a self-adaptive mechanism for parameter tuning to efficiently optimize black box functions.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 35, in __call__\n  File \"<string>\", line 16, in mutate\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n.", "error": "ValueError('a must be 1-dimensional')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 35, in __call__\n  File \"<string>\", line 16, in mutate\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "301603d0-17f4-40a1-b5e9-ef1c2c8f3a70", "solution": "import numpy as np\n\nclass PSOADE:\n    def __init__(self, budget, dim, population_size=10, f=0.5, cr=0.5, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def mutate(target, pop):\n            candidates = np.random.choice(pop, size=(3, self.dim), replace=False)\n            mutant = target + self.f * (candidates[0] - candidates[1]) + self.f * (candidates[2] - candidates[3])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            idx = np.random.rand(self.dim) < self.cr\n            trial[idx] = mutant[idx]\n            return trial\n\n        population = create_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = mutate(target, population)\n                trial = crossover(target, mutant)\n                fitness_trial = func(trial)\n                if fitness_trial < fitness[idx]:\n                    population[idx] = trial\n                    fitness[idx] = fitness_trial\n                    if fitness_trial < fitness[best_idx]:\n                        best_idx = idx\n                        best_solution = trial\n                remaining_budget -= 1\n                if remaining_budget <= 0:\n                    break\n\n        return best_solution\n\n# Example usage:\n# optimizer = PSOADE(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSOADE", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for efficient optimization of black box functions using both global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "5cd92934-3b90-45e0-862e-dcb3f10d309e", "metadata": {}, "mutation_prompt": null}
{"id": "e171c004-7257-4569-85cb-3b9fa66243ec", "solution": "import numpy as np\n\nclass EnhancedDE:\n    def __init__(self, budget, dim, population_size=10, f=0.5, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def mutate(target, pop):\n            candidates = np.random.choice(pop, size=(3, self.dim), replace=False)\n            mutant = target + self.f * (candidates[0] - candidates[1]) + self.f * (candidates[2] - candidates[3])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            idx = np.random.rand(self.dim) < self.cr\n            trial[idx] = mutant[idx]\n            return trial\n\n        population = create_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = mutate(target, population)\n                trial = crossover(target, mutant)\n                fitness_trial = func(trial)\n                if fitness_trial < fitness[idx]:\n                    population[idx] = trial\n                    fitness[idx] = fitness_trial\n                    if fitness_trial < fitness[best_idx]:\n                        best_idx = idx\n                        best_solution = trial\n                remaining_budget -= 1\n                if remaining_budget <= 0:\n                    break\n\n        return best_solution\n\n# Example usage:\n# optimizer = EnhancedDE(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "EnhancedDE", "description": "A novel metaheuristic algorithm named Enhanced Differential Evolution with Adaptive Mutation and Crossover for black box optimization tasks.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "5cd92934-3b90-45e0-862e-dcb3f10d309e", "metadata": {}, "mutation_prompt": null}
{"id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 3, "fitness": 0.08307697049891828, "feedback": "The algorithm PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "5cd92934-3b90-45e0-862e-dcb3f10d309e", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "ae69e437-8f8d-490d-ae06-89b60f5671de", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "4d9d21a8-c57b-4612-be79-b65d30815f9f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "bfa8e9c8-3d97-4412-a365-1fedfa234dfa", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "37be5d06-8609-46fd-ba58-ca7f64eac7a6", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "db5f1a2e-2502-46af-932c-a5bb97d40f9f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "f7a33fac-5b3b-41d0-8f72-5f5bdf5a1711", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "b017ddc2-55f1-4b7a-b7af-3a73e1a290f7", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "fa490d50-a22b-417a-be70-a6c8c168475b", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "c3d576f4-d16a-4f8c-b289-48fc11f8c716", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "2a1d550d-4706-45f5-a95f-01ef0402ed15", "solution": "import numpy as np\n\nclass Adaptive_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = Adaptive_PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_PSO_SA_Optimizer", "description": "A hybrid metaheuristic algorithm coupling Particle Swarm Optimization (PSO) with Simulated Annealing (SA) to optimize black box functions with adaptive temperature control and particle movement.", "configspace": "", "generation": 13, "fitness": 0.08307697049891828, "feedback": "The algorithm Adaptive_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "7b9aa476-c25b-47a1-a6ac-2fdd492c619d", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "cb6e63e1-ee83-4d34-b88b-b5af6c70c200", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "2f978fae-f953-4e4b-a62e-796a19500627", "solution": "import numpy as np\n\nclass HybridPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle", "name": "HybridPSO_SA_Optimizer", "description": "A hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to optimize black box functions efficiently within a limited budget by iteratively updating the swarm using PSO and applying SA to explore the search space and escape local optima.", "configspace": "", "generation": 16, "fitness": 0.08307697049891828, "feedback": "The algorithm HybridPSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "74a4018d-e73e-4e25-8d5e-5daea9846d30", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "5a9a3303-3714-4f6d-a90b-132ecf7011ad", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def hybrid_step(swarm, best_particle, temperature):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_particle = new_particle + np.random.uniform(-1, 1) * temperature\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = hybrid_step(swarm, best_particle, temperature)\n            for idx, particle in enumerate(new_swarm):\n                new_fitness = func(particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = particle\n                    if new_fitness < func(best_particle):\n                        best_particle = particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle", "name": "HybridOptimizer", "description": "A hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) with population-based search and local optimization to efficiently explore the search space and exploit promising regions within a limited budget.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        temperature = self.initial_temp\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        temperature = self.initial_temp\\n'))", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {}, "mutation_prompt": null}
{"id": "ea355185-2c99-42c6-a6d4-44bba839651b", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "20e0920c-d56a-43fe-91f9-454da569803c", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "4677d7e3-5315-4bdf-8fa4-97b8f9290d7e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = PSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.2852737484779295, 0.1615938206413039, 0.28280973313262137, 0.09666275567186622, 0.08325543394885904, 0.20309599722809157, 0.1474269265755418, 0.15486546984762517, 0.0970631296671578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05442432569926481, 0.07043608962989145, 0.043965005739766694, 0.050665453459175835, 0.07143572872953041, 0.06487392443343776, 0.06530090556702361, 0.040620271762831006, 0.12820862187925264, 0.02064423201436838, 0.04688572869323382, 0.031355805404607584, 0.057990244412427616, 0.048668087317652264, 0.009599548336769348, 0.02251685021188421, 0.05928817048642521, 0.05343958050985187, 0.04635657229672563, 0.03437149383610416, 0.04392891703579038, 0.05368314512233996, 0.0494349633592539, 0.04679150454421721, 0.06428571716653075, 0.05479690049690511, 0.06376969774330865, 0.036403010403225244, 0.0002505664852545664, 0.043882836455154006, 0.0830649226705813, 0.044510001689967216, 0.027564086779950925, 0.0, 0.019769848033895365, 0.0, 0.14782077783398107, 0.08117754008922706, 0.06542478060058332, 0.14813526660262943, 0.04493350739354651, 0.06890499294613606, 0.06067040426912029, 0.11494720018049431, 0.05976223223179844, 0.015998010968231058, 0.0, 0.0, 0.0, 0.03260146384524776, 0.0, 0.04813278382766473, 0.0, 0.026221820475572755, 0.0022166387105844176, 0.0, 0.07898671716182837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05398913293034291, 0.023688027127580225, 0.06419178562396477, 0.05831631856103414, 0.0, 0.0, 0.1269249418086622, 0.032694402347080875, 0.08294543875544513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01397495270199467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19087108695478616, 0.1787493655850083, 0.19603877169867812, 0.13682304916931676, 0.1337679469635359, 0.12296535813772369, 0.1785414524047807, 0.20660980367533277, 0.25558692196663124, 0.03299847981831572, 0.04078336162096241, 0.0, 0.054170700236088276, 0.04961972676025472, 0.05667798486392461, 0.04663802057187627, 0.046402022158907874, 0.06003272063603071, 0.15850121741829903, 0.1991779130462007, 0.16578776162487152, 0.1448069834500515, 0.15608017440107835, 0.20351426717222798, 0.1512393691335696, 0.12350900907595586, 0.10220467370633146, 0.1587742540340945, 0.196269010687803, 0.17161573884259174, 0.1399327949668283, 0.23146524551233594, 0.15412955940787765, 0.15552173585879503, 0.215440611928145, 0.11243722824113933, 0.10397643841479043, 0.08213706650447805, 0.1457807946370251, 0.1807839383582499, 0.13400565090583627, 0.09816751093884135, 0.12242972976465427, 0.17735683330736174, 0.06980536360650491, 0.19571990329040434, 0.17020440170956175, 0.16400864133800241, 0.2201899699057437, 0.18762799796985985, 0.19016964112003065, 0.2109195768151283, 0.15326522339592374, 0.19686625050618245, 0.0, 0.1513405761987604, 0.16020593750677103, 0.1747873376430572, 0.15025864444297798, 0.1692256872091099, 0.15535685178784975, 0.16040152330227375, 0.14844644320533462, 0.1317432796939878, 0.16772280214235002, 0.10548450608003312, 0.16726105391440438, 0.1631266643467163, 0.19244088180795293, 0.0890995247877645, 0.11421776257905092, 0.11196263071034995, 0.050129972676345225, 0.08768209515026959, 0.03429461111931886, 0.07120643670673454, 0.09226290563322403, 0.05841089015315426, 0.07640277912717264, 0.23045587071202522, 0.11663079645207586, 0.17498195240784586, 0.16418752637391865, 0.17940213771918212, 0.20074360411010517, 0.2226669644955226, 0.16968804713688512, 0.17575549666583834, 0.16580524814243547, 0.16875554884588873, 0.07013385997601695, 0.045845797662744325, 0.07153908640721163, 0.07871250798422258, 0.061753431980290596, 0.07610690200471759, 0.0731319951659567, 0.098006418967581, 0.06786247182164629]}, "mutation_prompt": null}
{"id": "95c41586-fd19-4876-97d8-db831fe67fb4", "solution": "import numpy as np\n\nclass DynamicPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = DynamicPSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DynamicPSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by introducing a dynamic hybrid mutation strategy to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 22, "fitness": 0.16557350633442547, "feedback": "The algorithm DynamicPSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "c16ad6c7-1f7e-4274-b5d6-a0200bf22ae8", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "cc6bf774-c24e-4650-9fbf-985146eb6ac0", "solution": "import numpy as np\n\nclass DynamicPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = DynamicPSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DynamicPSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by introducing a dynamic hybrid mutation strategy to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "7ff0545f-ff04-405f-bc8a-f822e695b446", "solution": "import numpy as np\n\nclass HybridFireflySAOptimizer:\n    def __init__(self, budget, dim, population_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def move_fireflies(fireflies, best_firefly):\n            new_fireflies = []\n            for firefly in fireflies:\n                attractiveness = 1 / (1 + np.linalg.norm(best_firefly - firefly))\n                new_firefly = firefly + attractiveness * (best_firefly - firefly) + np.random.normal(0, 1, self.dim)\n                new_fireflies.append(new_firefly)\n            return np.array(new_fireflies)\n\n        def simulated_annealing(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1, self.dim) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_firefly(firefly):\n            mutated_firefly = firefly + np.random.normal(0, 1, self.dim)\n            return mutated_firefly\n\n        fireflies = initialize_population()\n        best_firefly = fireflies[np.argmin([func(f) for f in fireflies])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_fireflies = move_fireflies(fireflies, best_firefly)\n            for idx, firefly in enumerate(new_fireflies):\n                new_firefly = simulated_annealing(firefly, best_firefly, temperature)\n                new_firefly = mutate_firefly(new_firefly)\n                new_fitness = func(new_firefly)\n                if new_fitness < func(fireflies[idx]):\n                    fireflies[idx] = new_firefly\n                    if new_fitness < func(best_firefly):\n                        best_firefly = new_firefly\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_firefly\n\n# Example usage:\n# optimizer = HybridFireflySAOptimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HybridFireflySAOptimizer", "description": "Introducing a Novel Hybrid Firefly Algorithm with Simulated Annealing for Enhanced Global Search and Local Refinement in Optimization.", "configspace": "", "generation": 24, "fitness": 0.14975372746728086, "feedback": "The algorithm HybridFireflySAOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.2296598522309531, 0.22833605216052533, 0.23430827185840075, 0.2526675564347822, 0.2262577117350284, 0.23914879607237816, 0.2420105014484073, 0.25527472262551065, 0.2619687869918733, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0699020499944476, 0.06056476007507294, 0.06614492336741407, 0.06388879028605765, 0.11372757848249804, 0.06787887181628194, 0.06015952873566788, 0.07476835947711802, 0.06167698843534275, 0.05992301972134628, 0.0622441763949646, 0.04154065943239671, 0.06062977383527102, 0.05726434607745645, 0.046011596119750586, 0.05154747966492523, 0.05160026721880784, 0.05051245686190109, 0.9899011441170926, 0.9358862825944826, 0.9518994477530843, 0.9796216156734945, 0.9438830330078449, 0.9584588582302069, 0.987205370440172, 0.9657437086505969, 0.970093910695452, 0.10890196323544699, 0.07566981040910248, 0.11910357298772722, 0.12179525790231926, 0.11881912244814263, 0.16361814600916624, 0.11275236486719076, 0.1184002910966574, 0.10149202135537927, 0.20122925517641965, 0.15556040937727067, 0.17255378870309546, 0.17208228839720507, 0.19079111984355368, 0.1622662672670564, 0.17000166510816728, 0.19153209577214836, 0.14682828961158123, 0.06398346426611479, 0.04097649131201675, 0.1125316540873682, 0.06851004528550786, 0.05899738262922183, 0.06855914158045995, 0.049691553195092664, 0.07723343304580299, 0.045060026508926265, 0.07696704841549329, 0.06100366296859505, 0.05061854226054041, 0.049824491688627126, 0.07176663790296078, 0.07629802880364445, 0.05241227861622977, 0.06090027522559871, 0.07726773801263476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0698302906317051, 0.014719373294275973, 0.0646394752601318, 0.04012554823725423, 0.01626588188644651, 0.06946282456188124, 0.051586099326257684, 0.05756817212533316, 0.019823498288358166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009753746467458746, 0.0057296874282758425, 0.024159067700786907, 0.01981138980954278, 0.04898535730310105, 0.012092889904317783, 0.009272595393791216, 0.016760932189917366, 0.012826294484701739, 0.23935051377033556, 0.26289369739093404, 0.2578412834766346, 0.2616740412037528, 0.2724835520000991, 0.2557753419873323, 0.24328749341882572, 0.24021716501045198, 0.26564896474117217, 0.0707065402543221, 0.06528623426473501, 0.07078925846728557, 0.061185902779248846, 0.06648181577345635, 0.07513077008924407, 0.06290880578234215, 0.07911991976613153, 0.06556035885788047, 0.12592037367644404, 0.13193982202777366, 0.1131772310521012, 0.16152797330180257, 0.12108984891871477, 0.1437775823207874, 0.13442528651527696, 0.12496529835310832, 0.1212542976323071, 0.1950252306574496, 0.21567215192611466, 0.205974102932853, 0.19459314420425244, 0.21702340807956322, 0.2027301895339041, 0.1987247242106348, 0.1932847764532768, 0.2129477872102744, 0.13146736475126597, 0.13138623423828433, 0.14241695264441367, 0.12550272463557777, 0.14710470996712588, 0.1422513683696146, 0.1278493942924559, 0.13911734378959795, 0.13338217715807676, 0.17271331273855028, 0.18530113325456, 0.19176711750157716, 0.19902863714500885, 0.18847503658137377, 0.1659269431659639, 0.2004873649139206, 0.17189265868760373, 0.16958468358446877, 0.16681106316563166, 0.1690849312512146, 0.16093447951688689, 0.1612004153833725, 0.157559472039968, 0.1593923169050504, 0.15948822334681467, 0.16158555556985776, 0.16542286597449907, 0.20856982978914584, 0.18216948588972148, 0.14641249792069577, 0.24798978302932284, 0.2142036132160502, 0.21302197099772813, 0.20798427276332343, 0.19370580078445332, 0.2614363188616782, 0.20081863115249876, 0.22116613551718944, 0.17036520610846495, 0.1904883968480452, 0.22769301748937265, 0.20734611364471844, 0.14523818642219233, 0.15354464282095648, 0.1478787259633937, 0.17961565267472435, 0.17894843334591892, 0.18526830261467497, 0.1761799881833318, 0.1718972975447729, 0.15573804301133154, 0.17769851496776756, 0.19244722480653076, 0.182351078192182, 0.08691096938508269, 0.06324773500111147, 0.07387729831021339, 0.07411730901156843, 0.07200044407319894, 0.0837782803007785, 0.07159638258692103, 0.05964212759960097, 0.06220405510743621]}, "mutation_prompt": null}
{"id": "dcb9353b-cf1a-405b-a990-7b3092924f31", "solution": "import numpy as np\n\nclass DynamicPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = DynamicPSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DynamicPSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by introducing a dynamic hybrid mutation strategy to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "61a1c669-7b85-44c7-a159-af32c5b0893b", "solution": "import numpy as np\n\nclass DynamicPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = DynamicPSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DynamicPSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by introducing a dynamic hybrid mutation strategy to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "76c0b491-88fd-4782-b3ec-ae8303099bcf", "solution": "import numpy as np\n\nclass HybridPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = HybridPSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HybridPSO_SA_Optimizer", "description": "Hybridizing PSO and SA with dynamic mutation strategy for efficient optimization.", "configspace": "", "generation": 27, "fitness": 0.16557350633442547, "feedback": "The algorithm HybridPSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "e05a8c31-7e77-4712-bc2a-e1a9feafe385", "solution": "import numpy as np\n\nclass MultiSwarmDE_LS_Optimizer:\n    def __init__(self, budget, dim, pop_size=20, f=0.5, cr=0.9, ls_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.f = f\n        self.cr = cr\n        self.ls_prob = ls_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n\n        def differential_evolution(population, func):\n            new_population = []\n            for idx, target in enumerate(population):\n                a, b, c = np.random.choice(population, 3, replace=False)\n                donor = a + self.f * (b - c)\n                mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(mask, donor, target)\n                if func(trial) < func(target):\n                    new_population.append(trial)\n                else:\n                    new_population.append(target)\n            return np.array(new_population)\n\n        def local_search(population, func):\n            new_population = []\n            for individual in population:\n                if np.random.rand() < self.ls_prob:\n                    candidate = individual + np.random.normal(0, 1, size=self.dim)\n                    if func(candidate) < func(individual):\n                        new_population.append(candidate)\n                    else:\n                        new_population.append(individual)\n                else:\n                    new_population.append(individual)\n            return np.array(new_population)\n\n        population = initialize_population()\n        remaining_budget = self.budget - self.pop_size\n\n        while remaining_budget > 0:\n            population = differential_evolution(population, func)\n            population = local_search(population, func)\n            remaining_budget -= self.pop_size\n\n        best_individual = population[np.argmin([func(p) for p in population])]\n        return best_individual\n\n# Example usage:\n# optimizer = MultiSwarmDE_LS_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "MultiSwarmDE_LS_Optimizer", "description": "Introducing a Multi-swarm Differential Evolution with Local Search to enhance population diversity and exploitation capability for improved optimization performance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {}, "mutation_prompt": null}
{"id": "82ce87b8-3918-4fb4-ae1f-c27832aa7e60", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = EnhancedHybridOptimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "EnhancedHybridOptimizer", "description": "Combining Particle Swarm Optimization with Simulated Annealing and Mutation for enhanced exploration and exploitation in optimization tasks.", "configspace": "", "generation": 29, "fitness": 0.16557350633442547, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "99d71b94-f96c-4fcb-a3e8-539f9fdaf6b3", "solution": "import numpy as np\n\nclass DynamicPSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=20, alpha=0.9, initial_temp=10.0, final_temp=0.1, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.alpha = alpha\n        self.initial_temp = initial_temp\n        self.final_temp = final_temp\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def pso_step(swarm, best_particle):\n            new_swarm = []\n            for particle in swarm:\n                velocity = np.random.uniform() * (best_particle - particle)\n                new_particle = particle + velocity\n                new_swarm.append(new_particle)\n            return np.array(new_swarm)\n\n        def sa_step(current, best, temp):\n            candidate = current + np.random.uniform(-1, 1) * temp\n            candidate_fitness = func(candidate)\n            current_fitness = func(current)\n            if candidate_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - candidate_fitness) / temp):\n                return candidate\n            return current\n\n        def mutate_particle(particle):\n            mutated_particle = particle.copy()\n            for i in range(len(particle)):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_particle[i] += np.random.normal(0, 1)\n            return mutated_particle\n\n        swarm = initialize_population()\n        best_particle = swarm[np.argmin([func(p) for p in swarm])]\n        temperature = self.initial_temp\n        remaining_budget = self.budget - self.swarm_size\n\n        while remaining_budget > 0 and temperature > self.final_temp:\n            new_swarm = pso_step(swarm, best_particle)\n            for idx, particle in enumerate(new_swarm):\n                new_particle = sa_step(particle, best_particle, temperature)\n                new_particle = mutate_particle(new_particle)\n                new_fitness = func(new_particle)\n                if new_fitness < func(swarm[idx]):\n                    swarm[idx] = new_particle\n                    if new_fitness < func(best_particle):\n                        best_particle = new_particle\n                remaining_budget -= 1\n                if remaining_budget <= 0 or temperature <= self.final_temp:\n                    break\n            temperature *= self.alpha\n\n        return best_particle\n\n# Example usage:\n# optimizer = DynamicPSO_SA_Optimizer(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DynamicPSO_SA_Optimizer", "description": "Enhancing PSO_SA_Optimizer by introducing a dynamic hybrid mutation strategy to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.4135610678845626, 0.3950217796745784, 0.43079105160322173, 0.33035798012725826, 0.3618134798307837, 0.3922160880372345, 0.40082860795948505, 0.3019563792564288, 0.30384366026510634, 0.08198412572293201, 0.04760880488327113, 0.05530821064436209, 0.1789693588717297, 0.1272904799410327, 0.07845278620817986, 0.0918812339949342, 0.1052711293766544, 0.07913133631934577, 0.09095519590977852, 0.1081360408269616, 0.11347130357544066, 0.1197314881286502, 0.1289003885187835, 0.12336235559481068, 0.08554554033688888, 0.08571298836124375, 0.14101035605614143, 0.09664450149966852, 0.11080586707690332, 0.09828104364341672, 0.09687273022120024, 0.09801496534342602, 0.10119678642201047, 0.0841652956048139, 0.11308442129165319, 0.12423793791737625, 0.8813460944046088, 0.7805479046046635, 0.8621344896593737, 0.7690676690861965, 0.7781692868708645, 0.801941613706758, 0.836924686152976, 0.8226985727094009, 0.8583195021774563, 0.21273612384313778, 0.14998653096428394, 0.1696568937443832, 0.1554627449352729, 0.2045998272964814, 0.13736360172304485, 0.16103475127114275, 0.09151524858162263, 0.07705715724324036, 0.15360051042112122, 0.09426782947601753, 0.14486891442957417, 0.26572373428341156, 0.2065236264900554, 0.1601909932100054, 0.11601317713962489, 0.1287627985290144, 0.11540727944244356, 0.1576633301535203, 0.05604071787215126, 0.0, 0.1333226067496176, 0.10159570313934996, 0.08148384059859015, 0.20041807388443345, 0.12486436813340096, 0.13268607827854428, 0.1397095621079374, 0.05944311396510926, 0.08866271740265419, 0.0032569675573799195, 0.0, 0.12760769285362805, 0.11424985045350933, 0.0, 0.09119678701621381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05063392581067783, 0.023753252916572598, 0.06514037200779965, 0.06377691074780356, 0.0, 0.0, 0.13134838521654268, 0.06774024169950477, 0.048952723316785685, 0.0, 0.023836497289614123, 0.019347794419111386, 0.0, 0.0, 0.014308768838838248, 0.0, 0.0, 0.0, 0.04335422461795313, 0.06588232787031956, 0.07278446628926794, 0.011424928619593766, 0.01932750821377116, 0.016617440924109217, 0.052800839319286696, 0.08034704703184958, 0.0690848172000117, 0.32369251745480176, 0.29203697872488277, 0.3577523507991991, 0.3348782335784918, 0.29274616672817366, 0.33099723444818685, 0.3491600032310457, 0.30259298262618517, 0.3285805082660692, 0.02864340095748541, 0.05979206017936156, 0.03196659311298722, 0.0648631601655758, 0.059623510019045534, 0.11356022455347448, 0.05858632149654874, 0.06774593855589228, 0.06330088052947813, 0.1581319635253442, 0.23806099431627503, 0.13135126025721822, 0.13422714603106, 0.14356632434070726, 0.18661765879175296, 0.1595990648211698, 0.1302044921386778, 0.17552183397307086, 0.15623877284163334, 0.23230386581019025, 0.24069571792327316, 0.14653920607770032, 0.23399568171158247, 0.22167319059696522, 0.18799784153146248, 0.2700225022745699, 0.15141477717308116, 0.11847860197151061, 0.21472303262851689, 0.16135050651148342, 0.19917301095219864, 0.16563416128583852, 0.18565455416141896, 0.16346696598574195, 0.20659007058675194, 0.0838243851430931, 0.2241424429020723, 0.17472888276602971, 0.16889731839512567, 0.1907992016159249, 0.14953861087168552, 0.19117957629308224, 0.22882561718664696, 0.17133668015138914, 0.1558677131977132, 0.15901202361431366, 0.2001289995145067, 0.18702618079012867, 0.19547577960050444, 0.21829588762020136, 0.1949679255218436, 0.2086258655791664, 0.1750012894456846, 0.17412691283764647, 0.3235812905056519, 0.18469000682475223, 0.14372490519822478, 0.16952204846712937, 0.1988742207944013, 0.19876735343234364, 0.09858809370666244, 0.1688657353606724, 0.15252475729347093, 0.08193329091563206, 0.18512135631510918, 0.050467615581724745, 0.13512568885214093, 0.11973994090521212, 0.1830522580364613, 0.10451690996637208, 0.2743480191750335, 0.21310287101605707, 0.19127618983012196, 0.18784317364857994, 0.1812400679684394, 0.19402710970014936, 0.20576492587226158, 0.1810170174279363, 0.18832072648099307, 0.1824800719747085, 0.19244551166520618, 0.06706954874527726, 0.07266102788054363, 0.06754528476377741, 0.0784932276069722, 0.07631045894373656, 0.08198032420104517, 0.06704318462977643, 0.058309389471798534, 0.09294799654279284]}, "mutation_prompt": null}
{"id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid", "description": "Introducing a novel algorithm, Harmony Search with Hybrid Genetic and Differential Evolution Strategy, to enhance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 31, "fitness": 0.20237567713389565, "feedback": "The algorithm HarmonySearch_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "95c41586-fd19-4876-97d8-db831fe67fb4", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "364308ff-cd86-44a9-9fcc-6453b2741b9e", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid", "description": "Introducing a novel algorithm, Harmony Search with Hybrid Genetic and Differential Evolution Strategy, to enhance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "f281bcb9-d851-43cc-83c0-03a6190ac277", "solution": "import numpy as np\n\nclass SymbioticHarmonyCuckoo:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5, pa=0.25):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n        self.pa = pa\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_cuckoo_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.pa:\n                        idx = np.random.choice(self.harmony_memory_size)\n                        new_harmony[i] = harmony_memory[idx][i]\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_cuckoo_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = SymbioticHarmonyCuckoo(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "SymbioticHarmonyCuckoo", "description": "Introducing a novel metaheuristic algorithm, Symbiotic Harmony Search with Cuckoo Search, to combine the symbiotic interaction of harmony search and the brood parasitism behavior of cuckoo search for enhanced global optimization.", "configspace": "", "generation": 33, "fitness": 0.19531358824006897, "feedback": "The algorithm SymbioticHarmonyCuckoo got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.4555115462955611, 0.43896486177608995, 0.44329311507284774, 0.47590032783777847, 0.46292488785310937, 0.4596386599326714, 0.469014863208173, 0.43685529615627616, 0.43012200352041474, 0.06559522918715921, 0.05270393462156153, 9.999999999998899e-05, 0.14465076970309676, 0.017729999348182868, 0.1876705350507063, 0.042971714058233745, 0.06435125120032459, 0.07659231182376025, 0.2626055810167155, 0.18250068083853244, 0.17877473617857864, 0.2375837892563354, 0.20841883787552484, 0.17946260626750443, 0.21205815845744314, 0.21387480095239197, 0.19550725778631473, 0.17758778060091596, 0.17452611349033942, 0.1859756767019175, 0.1783101675500124, 0.16980733229673983, 0.17349651031111624, 0.1674214087688619, 0.20227799675436442, 0.13982031255917715, 0.9207388443300306, 0.8987154601946958, 0.8999013324133986, 0.9396359272555069, 0.9099123512397254, 0.8947854233528276, 0.9200663308509555, 0.8864615682071542, 0.8920934648128706, 0.18271812463674897, 0.17591993326352495, 0.2321034324932839, 0.237156797648163, 0.21579722436583704, 0.16940057020307542, 0.19020718033135753, 0.14868751860671925, 0.18211024568043555, 0.18650521751269233, 0.08633796864492504, 0.13643256893541278, 0.2003494634521119, 0.1829228568703153, 0.15579817499563853, 0.16577416414075963, 0.3854668479672828, 0.22071993386832034, 0.1579242107348766, 0.16291380243853415, 0.1399191037585622, 0.15560627235498492, 0.12002826310824533, 0.13256954382680508, 0.1464144143997832, 0.1559781208425225, 0.17656214641023782, 0.12056959972024306, 0.12039802554873258, 0.1266711758747766, 0.1224087988282736, 0.12885181514715827, 0.14457509441981442, 0.13630479726239064, 0.11913903812269222, 0.14700498883004098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032552360535686997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08826632245301569, 0.023447167393691015, 0.03572433881485104, 0.06055448973173827, 9.999999999998899e-05, 0.01115790807284267, 0.060299905445929114, 0.052410202404070017, 0.011333111732153567, 0.012441392735824564, 0.015809944450855484, 9.999999999998899e-05, 0.0041275226554913225, 0.005619493218261051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07798787066519941, 0.014816526531292729, 0.09177868149299795, 0.09300263505358475, 0.02231444523296855, 0.08709269280659715, 0.0897882910101725, 0.080307281854885, 0.034554114290762716, 0.37538235344868753, 0.3505596762780535, 0.3391684663502842, 0.3679880762133586, 0.339682600461943, 0.3604931361355227, 0.37090166934659463, 0.3897287981376857, 0.3481976921950417, 0.06288001905632368, 0.10208256659482595, 0.07791355854877202, 0.10112686670327642, 0.04881581228022114, 0.11144776313763582, 0.07716891246381896, 0.08471512826697292, 0.08854232864419431, 0.18349441122630128, 0.18959577438671515, 0.14283369943081847, 0.16383259854629673, 0.15378413038522343, 0.24460539045924057, 0.133512824194568, 0.18367752301890694, 0.1705072980329464, 0.2575428145874721, 0.24832970523774467, 0.1800777497689754, 0.2701333446469494, 0.2344959081575061, 0.23392113655332714, 0.20852440830107066, 0.22249514608695986, 0.21998706102800458, 0.20679407050715615, 0.18944348233463537, 0.12759020841963853, 0.16086288981261676, 0.19167918242523907, 0.2110510777133472, 0.12867208184057377, 0.24049504363332286, 0.12296994646786497, 0.19563145612761923, 0.1789520649219457, 0.19975667077614523, 0.18480957299436362, 0.24200399233613124, 0.20616987460666625, 0.2478948835053072, 0.21553646273504146, 0.23308443567870363, 0.2103711290981266, 0.23075643674813107, 0.231897699778306, 0.19850330311853837, 0.19416834451550147, 0.19650000633521214, 0.2238292328554201, 0.22133366819098554, 0.20019318263855157, 0.16098179657387612, 0.1621316605821015, 0.15022293892602478, 0.48946807448274277, 0.19647549340605452, 0.19724085705507277, 0.16343572731764455, 0.1656811035655421, 0.1556162544024322, 0.19276860245842276, 0.1961629209780913, 0.1100841828584318, 0.1852792116491766, 0.29768667379983405, 0.19163055085751934, 0.10383824309461431, 0.21044355450919594, 0.1885691711878531, 0.1812679535370989, 0.17092806475849642, 0.18148445278330705, 0.1726702319478034, 0.19621472330645118, 0.18281665405727543, 0.19504823350513179, 0.18333102221468422, 0.18092258775548176, 0.07360040540824153, 0.0706822362433992, 0.07656571368428466, 0.09806183136866131, 0.0842173402227887, 0.09743062877250108, 0.07399996368566186, 0.08338688724671828, 0.06857330936124195]}, "mutation_prompt": null}
{"id": "1bc08a26-f896-43d8-b155-426d77bb8f6e", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid", "description": "Introducing a novel algorithm, Harmony Search with Hybrid Genetic and Differential Evolution Strategy, to enhance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "579dd181-9e86-4e00-86e0-dd82426959ab", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid", "description": "Introducing a novel algorithm, Harmony Search with Hybrid Genetic and Differential Evolution Strategy, to enhance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "591c99e0-c4b1-4f00-8e65-c6c42173b3f9", "solution": "import numpy as np\n\nclass HarmonySearch_DE:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5, f=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n        self.f = f\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] += self.f * (harmony_memory[idx][i] - harmony[i])\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_DE(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_DE", "description": "Enhancing Harmony Search with Differential Evolution Strategy for improved exploration and exploitation in black box optimization.", "configspace": "", "generation": 36, "fitness": 0.19949570008425982, "feedback": "The algorithm HarmonySearch_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.443524434502201, 0.5341168435481426, 0.5385835883592579, 0.45518434886683967, 0.5133301519792675, 0.46776218946779824, 0.44421842919501464, 0.47006475623211375, 0.4880096529800537, 0.06341258633822622, 0.017147803111278836, 0.10254431969875155, 0.076681479540058, 0.08030929282817523, 0.16625414106632308, 0.009192660541996744, 0.03847248473142284, 0.20699452931815765, 0.2049036730054139, 0.20379166821928252, 0.26595617933743276, 0.1766114748278691, 0.26781418966432835, 0.20266958546821645, 0.23015436229075892, 0.18613874159742083, 0.21729364058692868, 0.17464501870674554, 0.16180710961383282, 0.19106322497692296, 0.15754261668173986, 0.16195370467639802, 0.16105102432554863, 0.17527613086099847, 0.2106619333083708, 0.22311220992996206, 0.9216685392334647, 0.957413340888032, 0.9046413033556182, 0.9348047629564237, 0.9115792121459785, 0.9148180209646396, 0.9037749566729512, 0.9115558406609501, 0.8594962255871615, 0.22582713332745386, 0.17793053658106928, 0.20018482116378433, 0.1541519533803135, 0.20812667913158722, 0.22170981549076685, 0.18299575697119086, 0.19897420026432633, 0.2300248802429452, 0.20547597530615913, 0.09765645162929382, 0.197014739866327, 0.2659685527914901, 0.3174961828790154, 0.3196075095742743, 0.1778141219871604, 0.18025569269367137, 0.2828156650514676, 0.13577136679023227, 0.14732046940905397, 0.14449985129805287, 0.161270987741444, 0.14132420628853049, 0.1494951581055346, 0.1850489021048889, 0.15356285558961558, 0.14076832712451282, 0.14062327634066607, 0.12244634748440097, 0.12142669144463691, 0.13518451461763759, 9.999999999998899e-05, 0.13358132681209978, 0.15666617781115078, 9.999999999998899e-05, 0.13283542920125924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023692867064017964, 9.999999999998899e-05, 9.999999999998899e-05, 0.09329106210467786, 0.023507037480626658, 0.051832376836819294, 0.028043264366092835, 0.0010192124896944987, 0.11138943269477208, 0.037990303058768715, 0.06870816881652175, 0.030951955027546108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02041411682276484, 0.005267746536802953, 0.00926801609280048, 9.999999999998899e-05, 0.003868416637686445, 9.999999999998899e-05, 0.09115459286174643, 0.0899519566142093, 0.09492620472401414, 0.02923244288939264, 0.10239486013973997, 0.04731983790177097, 0.11902595509443803, 0.09763565219487758, 0.0011261527617527634, 0.3518140159014306, 0.3655204939226281, 0.34140011128903824, 0.3610218115909456, 0.3880470309384737, 0.3737061354001233, 0.3245998570707771, 0.3491924304578653, 0.3618207741861943, 0.07625099216989051, 0.0815729664785726, 0.11139322620419712, 0.0882628652226487, 0.08757463853107006, 0.08267060643001045, 0.10366371245851647, 0.09346358799481425, 0.09333688345025659, 0.16233561458675427, 0.12217832366474746, 0.1805607502859361, 0.24346415978180547, 0.16667484637548313, 0.164669890572536, 0.18394190175182434, 0.23674378776462512, 0.1855971987430728, 0.2003301894563434, 0.27647664232314195, 0.16206070178239662, 0.23800952039039003, 0.20748524627262444, 0.20062836598107603, 0.1485520234748281, 0.30294715379664283, 0.24079806534231007, 0.12663703112278235, 0.20640788144459832, 0.11511570334283638, 0.19397398037898472, 0.20154094831206726, 0.15845508996869107, 0.15746538550198397, 0.2547306635228721, 0.13408931904795296, 0.17269532856526693, 0.17922262860901683, 0.21653605063427817, 0.19093249861951922, 0.1840484130205936, 0.187980224613838, 0.21244254374982507, 0.21256182760359066, 0.20553069302320137, 0.19100594249882896, 0.2049539908650665, 0.20715922695143685, 0.20306074537147778, 0.20454239924649364, 0.1869240410152163, 0.19980214934736373, 0.3311626829538433, 0.18786373241921306, 0.18539855090529833, 0.3221670833802477, 0.1121882640378099, 0.5899393378166214, 0.19868783188953498, 0.17439019462233551, 0.1477040411873306, 0.16665464731150004, 0.15685689757823895, 0.25975701295995435, 0.20228562750280998, 0.11212175963017657, 0.14115245082924321, 0.16847726395362095, 0.21493456337367867, 0.10451977639632914, 0.08143595415159999, 0.31879395034255786, 0.206565560926409, 0.18499759782332093, 0.18032961846086148, 0.17253743545441957, 0.18186785659193283, 0.1821630391375061, 0.19320053181454944, 0.17877155349460094, 0.17651329687832296, 0.07215598784477317, 0.05943432733068299, 0.07741305296692713, 0.06440114144734943, 0.08558530112550156, 0.06647944357247693, 0.08064219328011402, 0.07791832916639885, 0.09310746705761652]}, "mutation_prompt": null}
{"id": "06afaa36-cc7d-483f-a5b9-f2e1c313c3a7", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = DynamicHarmonySearch(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DynamicHarmonySearch", "description": "Introducing a novel algorithm, Dynamic Harmony Search with Adaptive Mutation and Crossover Rates, to improve the exploration and exploitation balance for black box optimization problems.", "configspace": "", "generation": 37, "fitness": 0.20237567713389565, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "e922f3cd-2470-4527-99e6-2638422d4bc8", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid", "description": "Introducing a novel algorithm, Harmony Search with Hybrid Genetic and Differential Evolution Strategy, to enhance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "9c9b630a-bcc0-4f27-bd05-738a66b618c5", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def quantum_harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = quantum_harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = QuantumHarmonySearch(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "QuantumHarmonySearch", "description": "Introducing a novel metaheuristic algorithm, Quantum Harmony Search, combining Quantum Computing principles with Harmony Search for enhanced optimization of black box problems.", "configspace": "", "generation": 39, "fitness": 0.20237567713389565, "feedback": "The algorithm QuantumHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.43280118354915953, 0.48130357435901727, 0.46561685762129335, 0.44841283978762314, 0.4479469719543435, 0.48231168893248955, 0.45263195548748303, 0.5291555813734699, 0.44263421258311786, 0.0007859766741615815, 0.024851375884334947, 0.07874641185913644, 0.19766092230832344, 0.14328458755409446, 9.999999999998899e-05, 0.11088906871771109, 0.10021942890786062, 9.999999999998899e-05, 0.19546104798618436, 0.17668004836464768, 0.21653554356525462, 0.18410393251743074, 0.22253315163849197, 0.23685839730405533, 0.18721797001267793, 0.20003089135784136, 0.1774415601435334, 0.2000371645071587, 0.2072688761286885, 0.176674943830313, 0.19427888822876616, 0.19765637183533302, 0.1692482414218326, 0.18741511021768842, 0.21425095180152998, 0.20504302679160824, 0.8985754006924292, 0.9127491655646041, 0.9371056971443188, 0.943353896259233, 0.9089493045268783, 0.935359484296769, 0.9478518951322099, 0.9240784118474907, 0.9314228602650614, 0.19048239151001511, 0.17123205920129658, 0.2607010146210783, 0.2160804833696509, 0.2165974187954306, 0.28892744099700984, 0.21187921718980085, 0.19769553967736875, 0.15129186158492525, 0.1533500890047721, 0.1506145024079386, 0.1132310124496364, 0.23763081367395988, 0.20673908823454623, 0.1805145671083468, 0.15716265663792472, 0.13882003182522806, 0.15910296003344815, 0.11022727545251199, 0.1512100705713989, 0.219908838622505, 0.22818510474992604, 0.1847602770777842, 0.20466052289282533, 0.14758571964412126, 0.14724789069310973, 0.1540957464648418, 0.1449096941967637, 0.12647380004131392, 0.2331296420566833, 0.16049106912689404, 0.17840947445392918, 0.15033909499555598, 0.12651212282313373, 0.11422714630092401, 0.13783538094339642, 9.999999999998899e-05, 9.999999999998899e-05, 0.036229977930211876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017796670333769526, 0.056329558518101064, 0.02509521986653762, 0.054547812199913226, 0.10726345043624064, 0.020797476705922247, 9.999999999998899e-05, 0.04655839554295038, 0.055077367418422396, 0.03936234944352324, 9.999999999998899e-05, 0.002011328133826651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023702250796908686, 9.999999999998899e-05, 0.06377421436488273, 0.03433066839685672, 0.14727368987742906, 0.00948196881211083, 0.06675403167941618, 0.050894953913902974, 0.08015397443464756, 0.13104073078401557, 0.08895876104640954, 0.4007639438177446, 0.3522282858887211, 0.3833501595361205, 0.3567536135479614, 0.3300609589342338, 0.38229599399781633, 0.37431327211655985, 0.3543980351449142, 0.3661653013880507, 0.11758637307870978, 0.048828998054280426, 0.06264648445957754, 0.061719308259749917, 0.07490149303871352, 0.12536414403635388, 0.08360602212607449, 0.07119350046589534, 0.0980037374527748, 0.14955417561599837, 0.2176442862719251, 0.15964187118563056, 0.2410462266089003, 0.20011530419539192, 0.15685183369850875, 0.27494646783289234, 0.18590970539311003, 0.14003597176856142, 0.1618078214821702, 0.24405754186293016, 0.19636707705286793, 0.18113856271061346, 0.2287706317369531, 0.22467302767858377, 0.2071904106669592, 0.24385625049318838, 0.16063836332268255, 0.2134067676129321, 0.1467908697660576, 0.1188868331390539, 0.10944710248227307, 0.1744689456198918, 0.21914781707275388, 0.14033780878845614, 0.22256798448696768, 0.152297460746322, 0.18489283955499236, 0.20725889244543594, 0.19733587354629922, 0.18938148458561743, 0.1793478785896595, 0.24640718571757836, 0.20171042221039193, 0.24217802179637204, 0.21152560671720444, 0.1868357422656598, 0.21767859328846428, 0.21310197926557162, 0.20327843313266836, 0.2164512625451508, 0.21484300846609172, 0.2152293569093372, 0.21634173603464202, 0.18255942685705973, 0.19738518864689059, 0.5607647014964172, 0.15055960949774505, 0.5711099433225313, 0.1996064587439902, 0.493936946612752, 0.40951667145748094, 0.16841274631732284, 0.1475485947437799, 0.2399437582721876, 0.1675162227931125, 0.11601290889641513, 0.2043279456219942, 0.16812258061620555, 0.20510929977086012, 0.10422463816071126, 0.16428045279055092, 0.1799877344823121, 0.16619930936182337, 0.18348750591282093, 0.18434546990033596, 0.17812234667636606, 0.18024259294223088, 0.16981386563281153, 0.1913062940019541, 0.16724992820300955, 0.18664904002617122, 0.07403775013697289, 0.07455859158591105, 0.07786963616919307, 0.07204512038038935, 0.07613927168189116, 0.05377386277990992, 0.07001874246889328, 0.08703666511545505, 0.062001568054760536]}, "mutation_prompt": null}
{"id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced", "description": "Enhancing Harmony Search with Differential Evolution and Mutation-Weighted Strategies for Black Box Optimization", "configspace": "", "generation": 40, "fitness": 0.2157287455547106, "feedback": "The algorithm HarmonySearch_Hybrid_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "adbd26d9-3ab3-4c55-ab7d-5049e3c96ae8", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "2e8ab722-401e-46c7-95df-b9cae7e516fa", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced", "description": "Enhancing Harmony Search with Differential Evolution and Mutation-Weighted Strategies for Black Box Optimization", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "6e955692-46b9-414d-b48f-f8eebcb45aee", "solution": "# import numpy as np\n\nclass CustomMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def custom_algorithm_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change for line refinement\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Line refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = custom_algorithm_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = CustomMetaheuristicAlgorithm(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "CustomMetaheuristicAlgorithm", "description": "Hybridizing Harmony Search with Differential Evolution and Mutation-Weighted Strategies, incorporating a probability-based line refinement for enhanced black box optimization", "configspace": "", "generation": 42, "fitness": 0.2157287455547106, "feedback": "The algorithm CustomMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "15732b15-2ac7-45b3-98be-2ecd1c6e88ca", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced", "description": "Enhancing Harmony Search with Differential Evolution and Mutation-Weighted Strategies for Black Box Optimization", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "d3926dde-f796-4f6c-ab9d-847894b68954", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced_Refined:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced_Refined(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced_Refined", "description": "Harmony Search algorithm enhanced with Differential Evolution and Mutation-Weighted strategies for black box optimization with refined strategy updating probability.", "configspace": "", "generation": 44, "fitness": 0.2157287455547106, "feedback": "The algorithm HarmonySearch_Hybrid_Enhanced_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "a64063fe-3d74-421f-b8b4-f50a8586c59c", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced", "description": "Enhancing Harmony Search with Differential Evolution and Mutation-Weighted Strategies for Black Box Optimization", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "187aeb82-6a23-4bfe-9d1b-34f118b557e8", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced", "description": "Enhancing Harmony Search with Differential Evolution and Mutation-Weighted Strategies for Black Box Optimization", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "34646334-8767-406b-a12f-136dbaa53a16", "solution": "import numpy as np\n\nclass HarmonySearch_Hybrid_Enhanced:\n    def __init__(self, budget, dim, harmony_memory_size=20, hmcr=0.9, par=0.3, mw=0.1, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, size=(self.harmony_memory_size, self.dim))\n\n        def harmony_search_step(harmony_memory, best_harmony):\n            new_harmony_memory = []\n            for harmony in harmony_memory:\n                new_harmony = np.zeros_like(harmony)\n                for i in range(len(harmony)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            new_harmony[i] = best_harmony[i]\n                        else:\n                            idx = np.random.choice(self.harmony_memory_size)\n                            new_harmony[i] = harmony_memory[idx][i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                    if np.random.rand() < self.mw:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        if np.random.rand() < self.cr:\n                            new_harmony[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < 0.3:  # Probability change\n                        new_harmony[i] += np.random.uniform(-0.5, 0.5)  # Refinement\n                new_harmony_memory.append(new_harmony)\n            return np.array(new_harmony_memory)\n\n        harmony_memory = initialize_harmony_memory()\n        best_harmony = harmony_memory[np.argmin([func(h) for h in harmony_memory])]\n        remaining_budget = self.budget - self.harmony_memory_size\n\n        while remaining_budget > 0:\n            new_harmony_memory = harmony_search_step(harmony_memory, best_harmony)\n            for idx, harmony in enumerate(new_harmony_memory):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(harmony)\n                if new_fitness < func(harmony_memory[idx]):\n                    harmony_memory[idx] = harmony\n                    if new_fitness < func(best_harmony):\n                        best_harmony = harmony\n                remaining_budget -= 1\n\n        return best_harmony\n\n# Example usage:\n# optimizer = HarmonySearch_Hybrid_Enhanced(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "HarmonySearch_Hybrid_Enhanced", "description": "Enhancing Harmony Search with Differential Evolution and Mutation-Weighted Strategies for Black Box Optimization", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.5232360298385723, 0.4607492755011461, 0.4449500900289336, 0.5212142012386525, 0.519897285619463, 0.4744270955722273, 0.5228053402912178, 0.475197834945183, 0.5159496241457617, 0.1817008940654653, 0.16234048576753357, 0.05707092078305798, 0.1305614463946294, 0.1480326735644092, 0.09623379855052316, 0.16013048418600506, 0.09927770612943365, 0.0742050190450857, 0.16425810373093375, 0.17383404431459148, 0.1853159461105336, 0.20994518854390487, 0.16178607024974667, 0.21043023095604818, 0.1715761362309739, 0.2425137875539789, 0.25285997840515884, 0.14984501775253434, 0.15779084581820535, 0.16059983817334378, 0.13537321637243582, 0.1492520427971038, 0.16598609996762448, 0.13716787857645252, 0.16159825730797928, 0.15175890479616516, 0.9043016748255306, 0.9208254522361395, 0.9019520168523673, 0.9166597649144441, 0.9303191864266831, 0.9014729204433087, 0.9222694716104, 0.9435789306449867, 0.912504547046725, 0.18219909820946234, 0.2922364211313839, 0.2784848632651916, 0.25641511052951005, 0.2703741062672911, 0.2936591152769824, 0.26568193354810876, 0.22606454878993287, 0.29181442470281893, 0.25312951895711133, 0.16839483630139274, 0.16558957310942712, 0.343292319366582, 0.19492032488161692, 0.27292354945339714, 0.1484382443091561, 0.3319668104245207, 0.2095322920129089, 0.11673123237411998, 0.14627772489126623, 0.1567003267996877, 0.28797206312878665, 0.06544330782102026, 0.11049150316464951, 0.1383888989642441, 0.20597769297022273, 0.14316668783079023, 0.13562954702398422, 0.11773066470925897, 0.1998003455835552, 0.12562396504205586, 0.19150085950656026, 0.12421176539019596, 0.13638247074701326, 9.999999999998899e-05, 0.13280416083155744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042543881416924334, 0.0540098662199644, 0.028198854478603597, 0.050550899178302244, 0.05248512489869739, 0.04642669802719723, 0.028850297541646808, 0.07754847559922673, 0.05744086949301541, 0.044565904673033785, 9.999999999998899e-05, 0.00013831360515470514, 0.011174521984031571, 0.005671227315010241, 9.999999999998899e-05, 9.999999999998899e-05, 0.056229799977584705, 0.004633009501745611, 0.02521822813114538, 0.09632318400269635, 0.06683488925691528, 0.1371064150567689, 0.08309417404461095, 0.11389394220966664, 0.07245934031803136, 0.13443794879176663, 0.11323006102307664, 0.06547626863044331, 0.40156713009524925, 0.36254579727940095, 0.4282136355457097, 0.4406938978209459, 0.43397622476616793, 0.3782868385251207, 0.3938252124084648, 0.3844895968359109, 0.3811314989099517, 0.07631274057541027, 0.09557273027676016, 0.1258411246035912, 0.11663984474846001, 0.08147998400156253, 0.13283116146532903, 0.10663621797832712, 0.10614491330981346, 0.0822332822592039, 0.23867962106598017, 0.20844676394776607, 0.17319278441279407, 0.19659727114776893, 0.22341794932079506, 0.2696603841913022, 0.15569752577273088, 0.13945423810397783, 0.25723373184659526, 0.2757718052157968, 0.24913471681743826, 0.18052007617383004, 0.27985477526009594, 0.2153778289370627, 0.31166662738865514, 0.2575148369008452, 0.33204690469946796, 0.24707865394836248, 0.2491437890026711, 0.26663870609405393, 0.13053002968781025, 0.19688817159150507, 0.19551920159866254, 0.19060950177139668, 0.15428399220761346, 0.2526486584732175, 0.1806989629254796, 0.18014587056098685, 0.19028407756222654, 0.1977176857218116, 0.19595635696406444, 0.18846371393384098, 0.1914337342065705, 0.2007435809867132, 0.18953356563186352, 0.20092088352996984, 0.30349850827671776, 0.23306626138817677, 0.2213754409493922, 0.19852362645337263, 0.22902422003109035, 0.19116502072006525, 0.20048660922035977, 0.18828950095767827, 0.21618942284776588, 0.16445444064394288, 0.16361638918869326, 0.13516403007382272, 0.6139302717696378, 0.19863551424898163, 0.5770737385808384, 0.11152155350931958, 0.16687497158059394, 0.1666409453098593, 0.34024575250253986, 0.2099397512025456, 0.5809774794953397, 0.19990845458668394, 0.16706355902679293, 0.20656425081375063, 0.10402427360998479, 0.16687865328009355, 0.24743097809477155, 0.17923241392940437, 0.1881187986891255, 0.18119808198095477, 0.17613993351792745, 0.17079006775565575, 0.17563394317833048, 0.1968840187381563, 0.18817712339042691, 0.17749413226717592, 0.08651062624772965, 0.08233379372379712, 0.07264721256607076, 0.0741926289830448, 0.08608777678243695, 0.08999785897095247, 0.0744478197022026, 0.1133840000940971, 0.07619812091346445]}, "mutation_prompt": null}
{"id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "solution": "import numpy as np\n\nclass DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DE_HS_Mutation_Refinement", "description": "Improving Differential Evolution with Harmony Search by incorporating Mutation-Weighted Strategies and Refinement for enhanced Black Box Optimization.", "configspace": "", "generation": 48, "fitness": 0.24139234241011387, "feedback": "The algorithm DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "79f1d8e2-bbdc-49a3-9eee-54969cc6079f", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "8ddfa0d8-ed3b-4bde-9e37-9f5871508c98", "solution": "import numpy as np\n\nclass Enhanced_Hybrid_Metaheuristic:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def enhanced_hybrid_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = enhanced_hybrid_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Enhanced_Hybrid_Metaheuristic(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Enhanced_Hybrid_Metaheuristic", "description": "Enhancing a Hybrid Metaheuristic Algorithm by probabilistically refining individual lines for improved optimization performance.", "configspace": "", "generation": 49, "fitness": 0.24139234241011387, "feedback": "The algorithm Enhanced_Hybrid_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "e3876f82-905d-48ee-bfbd-f57de2ac61bd", "solution": "import numpy as np\n\nclass Enhanced_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Enhanced_DE_HS_Mutation_Refinement", "description": "Enhanced Differential Evolution with Harmony Search incorporating Mutation-Weighted Strategies, Refinement, and Adaptive Parameter Control for improved Black Box Optimization.", "configspace": "", "generation": 50, "fitness": 0.24139234241011387, "feedback": "The algorithm Enhanced_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "bf3dbdaa-b738-4a63-8cb0-7ad725545d85", "solution": "import numpy as np\n\nclass DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DE_HS_Mutation_Refinement", "description": "Improving Differential Evolution with Harmony Search by incorporating Mutation-Weighted Strategies and Refinement for enhanced Black Box Optimization.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "42475e00-120e-4be6-b915-8d8238f4b008", "solution": "import numpy as np\n\nclass DE_HS_Line_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = DE_HS_Line_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DE_HS_Line_Refinement", "description": "Enhancing Differential Evolution with Harmony Search through Line-by-Line Strategy Refinement for Improved Black Box Optimization.", "configspace": "", "generation": 52, "fitness": 0.24139234241011387, "feedback": "The algorithm DE_HS_Line_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "9d4f6f73-1db0-48cd-bad2-73c78f0ef7aa", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, refine_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.refine_prob = refine_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n            if np.random.rand() < self.refine_prob:\n                self.f = np.clip(self.f + np.random.uniform(-0.1, 0.1), 0, 1)\n                self.cr = np.clip(self.cr + np.random.uniform(-0.1, 0.1), 0, 1)\n                self.hmcr = np.clip(self.hmcr + np.random.uniform(-0.1, 0.1), 0, 1)\n                self.par = np.clip(self.par + np.random.uniform(-0.1, 0.1), 0, 1)\n                self.mw = np.clip(self.mw + np.random.uniform(-0.1, 0.1), 0, 1)\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for improved Black Box Optimization.", "configspace": "", "generation": 53, "fitness": 0.205760611915781, "feedback": "The algorithm Adaptive_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.5367374652473249, 0.5106161980907307, 0.4296624705282338, 0.48586239998101766, 0.4932769848980302, 0.43564726396246667, 0.5483308936297349, 0.509883323774198, 0.39523214799196527, 0.17747054166270304, 0.2498168373654126, 0.10106992319374242, 0.08420675847818837, 0.21112744368926284, 0.11546549949122764, 0.017677805431841276, 0.15911233756036514, 0.19595703681511056, 0.1844731177762381, 0.25921273478072915, 0.14964700212283133, 0.17135846345601113, 0.19862785020865126, 0.16010604290138986, 0.2071983717019532, 0.1853295562936652, 0.15994301313548964, 0.18353951211132635, 0.14318005203320494, 0.15728572904615323, 0.18383422253866366, 0.15309338937756178, 0.1296148119984296, 0.2048694066277882, 0.16884393472762527, 0.13991870856850497, 0.7994205918203824, 0.9078858606587777, 0.7910101893630228, 0.8827788894999944, 0.9119192114988302, 0.8295967457207718, 0.8851363188592122, 0.918782661795547, 0.8381512087494545, 0.14740065800170155, 0.20740799444768232, 0.17627870580739036, 0.22328053859602737, 0.2569008571990913, 0.2110554664028873, 0.22929544915114186, 0.20411454292739994, 0.21704419670155162, 0.21313424381488932, 0.21927514650558, 0.1846795121067023, 0.326954979208815, 0.2679874780285503, 0.2125937431392726, 0.14859686815890638, 0.20428320624155327, 0.2024439777288214, 0.211201889413831, 0.13605039822203158, 9.999999999998899e-05, 0.1722529309458931, 0.1408316240591102, 0.1513796825824948, 0.14962041198726728, 0.13416915385758366, 0.13113943127374117, 0.13045004790872194, 0.122063870722952, 0.11729619266215108, 0.1740848040302444, 0.1264051622310679, 0.14813337298309182, 0.12871597646407118, 0.16351415448502526, 0.092222495639812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005146323516425633, 0.028866070400404564, 0.06672268073579857, 0.04520792135742491, 0.06597491195036387, 0.017494284797114235, 0.06142276264789959, 0.016103701180461005, 0.0807170395503013, 0.10850700851918149, 0.08862691405413792, 0.04097480398513886, 0.0189892920572311, 9.999999999998899e-05, 0.00728006858715724, 9.999999999998899e-05, 9.999999999998899e-05, 0.03665269627487522, 9.999999999998899e-05, 9.999999999998899e-05, 0.05900775203358166, 0.0799768515712056, 0.04653412202885976, 0.08465484961797465, 0.0862480202682474, 0.07791465628771699, 0.056934230191708735, 0.1173003973925052, 0.04702594310475483, 0.34635076842783075, 0.3869877265059234, 0.35365466381510546, 0.32623542844789044, 0.37629865478138547, 0.42045270386607925, 0.3865465686200231, 0.4005473655447447, 0.4044959651347555, 0.09071238279995963, 0.08500396958204004, 0.07790776461944338, 0.14594279042442626, 0.11286928363003423, 0.11288350090412991, 0.04923482446255234, 0.08783679278554668, 0.0668946122940508, 0.16193608297070494, 0.1826141465081611, 0.13717115573187455, 0.16927523297697622, 0.19238215388728996, 0.1378434964530676, 0.17146500515627427, 0.17603753109158182, 0.17758322427450546, 0.21068194089538983, 0.2950471277786866, 0.2339168968856722, 0.208245251595097, 0.27610301993098396, 0.249351604392557, 0.24641644591836231, 0.29745322026932886, 0.2187751361216017, 0.17709403713093996, 0.25864327916344787, 0.18491004213779216, 0.11924704541956055, 0.181539563423461, 0.182826630253194, 0.1884496843398481, 0.20214516681857697, 0.17374750705211117, 0.1942170369744709, 0.20078373850718167, 0.18520636645245492, 0.19622627815277538, 0.21246030427841123, 0.19517770362225573, 0.20078443342990326, 0.18926634536639408, 0.2291181399062332, 0.21405566874490045, 0.1949271791837781, 0.19416960714642795, 0.2071693497357191, 0.19201045573183662, 0.202681956889187, 0.2074472795300829, 0.23714147714433642, 0.18619605265809136, 0.37646182463240374, 0.1719011949865904, 0.14834595039863274, 0.8940673138017062, 0.16764256826252877, 0.46841270404460233, 0.1599819577739341, 0.16730498351554524, 0.1687025211136024, 0.361975196004938, 0.15564116241545545, 0.355110933367067, 0.17186143878309612, 0.2438135631232513, 0.20780623860863334, 0.10439952171467215, 0.10313011576134834, 0.16416546407827004, 0.21710217376861685, 0.19034997174131096, 0.1822983388141748, 0.16460585374453762, 0.17139304866671046, 0.17722338893238176, 0.17724356168945776, 0.160971172423928, 0.1683221665381216, 0.0960927744149247, 0.08752400842717178, 0.06731909638416633, 0.08369483142984768, 0.09469653926268862, 0.07837150561505857, 0.09532068342520306, 0.08881532096411937, 0.08167292159129336]}, "mutation_prompt": null}
{"id": "23a81832-e8c4-4bc7-9de1-f9ba94a04c99", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, refine_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.refine_prob = refine_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        def refine_strategy():\n            nonlocal self\n            self.f = max(0.1, min(0.9, self.f + np.random.randn() * 0.1))\n            self.cr = max(0.1, min(0.9, self.cr + np.random.randn() * 0.1))\n            self.hmcr = max(0.1, min(0.9, self.hmcr + np.random.randn() * 0.1))\n            self.mw = max(0.1, min(0.5, self.mw + np.random.randn() * 0.1))\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n            if np.random.rand() < self.refine_prob:\n                refine_strategy()\n\n        return best_individual", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Global Search by Integrating Differential Evolution with Harmony Search with Adaptive Mutation-Weighted Strategies and Refinement for Efficient Black-Box Optimization", "configspace": "", "generation": 54, "fitness": 0.22371101356074335, "feedback": "The algorithm Adaptive_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.5123086792135554, 0.5005668226332931, 0.6431634266136402, 0.46546868119409934, 0.47136719022424023, 0.5107934983557508, 0.5382066731861308, 0.49300139951729605, 0.6553892871558482, 0.19568487673782387, 0.22333834607821212, 0.18096635681710427, 0.21523630324327792, 0.1719574881155932, 0.31360570484500083, 0.13178371163504343, 0.22378245842739575, 0.34879069838937693, 0.1782557726231797, 0.1685053607525704, 0.2885597988876747, 0.24371393075282, 0.2265138651026004, 0.2598145541353838, 0.18117120430631395, 0.2275471552753613, 0.2614092782223407, 0.16107673976380865, 0.1895808914967081, 0.24160184359187264, 0.17761483449931215, 0.15437499725920756, 0.2291908686270805, 0.14938520440314573, 0.15800866979563488, 0.19528213168520747, 0.8548734213149447, 0.9187979373409639, 0.8602193110776643, 0.8541685996737961, 0.9056720319319764, 0.8343239141286782, 0.9012424918400239, 0.9166363273740815, 0.8677856521549336, 0.18349899364255196, 0.21262308080031456, 0.20912252035177537, 0.32609788270642537, 0.2569537436804372, 0.2687581031192189, 0.26622506539593604, 0.2128830569413721, 0.22876635368929188, 0.2160274216382153, 0.21474754217603076, 0.18731884996961867, 0.33287171305216523, 0.32667417331765813, 0.2082507522645064, 0.21624092372863501, 0.21586729516339742, 0.19995549792756484, 0.23611203514300838, 0.1303446166945832, 9.999999999998899e-05, 0.14752118876966047, 0.08768101738594647, 0.21276686472766304, 0.17340367191338768, 0.14839604890166558, 0.2650455411313234, 0.14241468264589507, 0.13767203236980696, 0.12515913032515147, 0.13006087166540548, 0.13880082762154866, 0.15241356329808364, 0.16591661623143394, 0.15768744070642315, 0.1600868651412597, 9.999999999998899e-05, 9.999999999998899e-05, 0.000589090526098901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026476575281775827, 9.999999999998899e-05, 0.023802248143449334, 0.0934764090221617, 0.04811600499690427, 0.07701308691285413, 0.04359482097693668, 0.053381564374203494, 0.004409359693820836, 0.2071076052501386, 0.10572978357341867, 0.10182704258572117, 0.06788095605596411, 0.02718692799360667, 0.009913265955798112, 0.014650866341072488, 0.053504938704044935, 0.07300573342278238, 9.999999999998899e-05, 0.02783224478498958, 0.051665540574570734, 0.0940914654586893, 0.10382940156621245, 0.06639760803481698, 0.07559209754278795, 0.060493636544573404, 0.07389204046292364, 0.07771318751173206, 0.11484721617480242, 0.06549456612549698, 0.4008240979242784, 0.3670451036368968, 0.3590284806808428, 0.39975512418962433, 0.3585891992280552, 0.3711286504108796, 0.40551214801306823, 0.4690995107097411, 0.4070730703232437, 0.1306789032034349, 0.11504515282083372, 0.0775156019785096, 0.12468084602514151, 0.1465266061280236, 0.14982173588217462, 0.1229865703197307, 0.12311082335877455, 0.09894713815416001, 0.15491830367045745, 0.18153477512882032, 0.18041900864252924, 0.131834957119786, 0.22067058316730326, 0.1455408394646983, 0.23709239299898133, 0.16730608785074708, 0.2130621016886718, 0.2109937769570127, 0.3155229300320719, 0.20519586100948195, 0.24498743780062948, 0.27940608949438317, 0.2873245019391485, 0.24590728450359234, 0.3176940841419732, 0.2757849656566166, 0.20199697771180303, 0.2176909489892077, 0.17235832561295883, 0.20340725493928002, 0.18315112590381077, 0.23581467898387043, 0.21511167839726153, 0.21377501631652585, 0.2263267841897617, 0.22068736641803843, 0.2338698821950066, 0.19299070189987666, 0.23114062945560776, 0.21964996527286051, 0.19549016193245372, 0.18674857743997164, 0.2157313877708359, 0.20386388437970715, 0.21883832526775826, 0.19845946333697373, 0.2077151052120042, 0.20054899534402504, 0.20814171314701557, 0.1923288440140879, 0.20665118004189897, 0.37217484499841147, 0.197011568533914, 0.3669408462317134, 0.12490937817095382, 0.15168746944644096, 0.6549062692063073, 0.1676725420847862, 0.19494515934051637, 0.12195246393611636, 0.16727271853624193, 0.1688461888039361, 0.4434696972661871, 0.15459835062644, 0.36973906851874105, 0.2780141914413947, 0.27001615093476683, 0.20904877946107947, 0.10332661781371921, 0.10302729828038104, 0.171931235656824, 0.17130002625826823, 0.1669558726664906, 0.17583022106726787, 0.17961873937918282, 0.17934464447190424, 0.203512596912787, 0.20165480481962172, 0.19358392774269606, 0.18246965864230247, 0.08544152340296018, 0.07364402030191164, 0.09036735473763235, 0.0944347678985279, 0.07983444669672513, 0.08946347108070152, 0.10715792382501821, 0.09417866266829056, 0.07682204960280903]}, "mutation_prompt": null}
{"id": "7105c5e1-2479-4928-b880-bc7966b80e4e", "solution": "import numpy as np\n\nclass Refined_DE_HS_Mutation:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Refined_DE_HS_Mutation(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Refined_DE_HS_Mutation", "description": "Enhancing Differential Evolution with Harmony Search through probabilistic line refinement for improved Black Box Optimization. ", "configspace": "", "generation": 55, "fitness": 0.24139234241011387, "feedback": "The algorithm Refined_DE_HS_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "e07d0cd1-c9bb-42ef-bdbb-ceea071716e5", "solution": "import numpy as np\n\nclass Refined_DE_HS_Mutation:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Refined_DE_HS_Mutation", "description": "Enhancing DE-HS algorithm with probabilistic line refinement to improve convergence speed for black box optimization.", "configspace": "", "generation": 56, "fitness": 0.24139234241011387, "feedback": "The algorithm Refined_DE_HS_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "6584a159-90af-40d7-9cf2-ff3f0e9e6c6e", "solution": "import numpy as np\n\nclass EVDHS_Dynamic_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, refinement_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.refinement_prob = refinement_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def evdhs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        def refine_strategy(strategy):\n            new_strategy = []\n            for s in strategy:\n                if np.random.rand() < self.refinement_prob:\n                    new_strategy.append(s + np.random.normal(0, 0.1))\n                else:\n                    new_strategy.append(s)\n            return new_strategy\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = evdhs_step(population, best_individual)\n            new_population = [refine_strategy(ind) for ind in new_population]\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = EVDHS_Dynamic_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "EVDHS_Dynamic_Refinement", "description": "Introducing Evolutionary Differential Harmony Search with Dynamic Refinement for Enhanced Black Box Optimization.", "configspace": "", "generation": 57, "fitness": 0.23940696621164578, "feedback": "The algorithm EVDHS_Dynamic_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.5650338394922874, 0.6137523899137766, 0.5528821719752574, 0.5454749510029819, 0.5681305987520716, 0.6007232882886304, 0.5547182307372442, 0.5996975581216841, 0.552886303001793, 0.2740550111224045, 0.19001880921480252, 0.19702463446247753, 0.2512318132270267, 0.3443318204297169, 0.17832933830289455, 0.23421516052912839, 0.30091643013941016, 0.2980500663786647, 0.24206521078084275, 0.27561323391741577, 0.20390670025051993, 0.25808762685480446, 0.23523206157756538, 0.1920370548522835, 0.19933908251722854, 0.2498330299320759, 0.30192767947585564, 0.19802594020391107, 0.17841082610445413, 0.21399164929589032, 0.21291499648170242, 0.2020260053943258, 0.16014769586376354, 0.19218864870251495, 0.18967276250090337, 0.21256929703085004, 0.8560012531947272, 0.910573593114904, 0.884164440166088, 0.8958703038582856, 0.8686226209182522, 0.8923149569788972, 0.8934811529496418, 0.8258550510515673, 0.9001732055972471, 0.1902657048276073, 0.25440203639975956, 0.21506339519632023, 0.29288267095895093, 0.2859905206380443, 0.2685394043097462, 0.27403054956927275, 0.27981227951779397, 0.2505694688579634, 0.20654852957442615, 0.14504873433298726, 0.21640715065648986, 0.2701802881710441, 0.37202200095110616, 0.262131612092927, 0.16808064145155444, 0.15130959857653448, 0.2127101107726468, 0.13662969179996654, 0.1441722924236315, 0.13733077961792783, 0.13946361795155426, 0.24241140321653587, 0.18223461450910372, 0.16181167140110697, 0.23566086312932655, 0.14279173337953033, 0.1954046132845797, 0.12726577462470268, 0.13782005667504638, 0.1520492238024843, 0.14800451603804554, 0.1364054846091618, 0.1417464131684757, 0.17205716844344732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011928987548958658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03195993237302719, 0.14334155058122744, 0.03608610982477001, 0.09965198575854461, 0.06645687900117359, 0.05065306735356134, 0.0304810170164459, 0.15964949390216698, 0.05946413462068123, 0.09089770995078705, 0.01993277963580453, 0.034950011615146326, 0.04690922803395203, 0.03375816606671156, 0.060964608137688114, 0.029173209934821198, 0.049805408058764655, 0.0617650935014159, 0.028743698099433224, 0.12557175023242617, 0.06436209640791335, 0.17916574685512054, 0.1042200938275526, 0.17445145412541574, 0.08094052572746602, 0.09893759572915317, 0.11703015730928723, 0.08356133139168054, 0.3966562854127347, 0.41998696044574846, 0.4559493447861681, 0.4364910160582085, 0.4459447234221764, 0.41568828680268255, 0.4351283373246241, 0.4325177002497028, 0.43864980531053543, 0.08603291450695838, 0.08237566179917666, 0.10496396701736699, 0.1528748146272867, 0.05748887633303834, 0.13872253168103565, 0.08512276440166555, 0.10372162933692963, 0.14875516650985754, 0.2159650994302359, 0.19568095589260714, 0.28901240843338427, 0.24455123508697896, 0.22428910456518492, 0.33289727683791415, 0.21782876901169257, 0.17645175854526862, 0.18145401826380247, 0.20050177323376572, 0.29491935617246134, 0.3012444176269029, 0.3295275011340236, 0.33349701273278365, 0.2927558289598138, 0.33473745275881706, 0.3694155831469712, 0.24945520420009248, 0.1804140378150192, 0.24705600056991084, 0.20090827401025357, 0.26195228976512985, 0.2185147620915644, 0.21636538933338334, 0.2183009226712358, 0.22041739764585544, 0.19335962525128936, 0.21565425306442088, 0.19767128055063854, 0.20416842136683977, 0.21570203107660568, 0.19171605423630067, 0.2070837772087737, 0.20464902762804293, 0.22842091355692995, 0.22534679225721665, 0.3698655689718602, 0.20958505172370134, 0.23028921149836512, 0.21784052762502282, 0.20079962893320147, 0.18798308748758252, 0.20804499032240908, 0.2105254863931868, 0.1844462465753378, 0.19686874421491818, 0.1260606641461416, 0.15195120189451772, 0.8430169015216239, 0.16749072340965687, 0.7413302648569859, 0.1227720855072928, 0.16741666955862133, 0.16848317055657902, 0.6416818887266691, 0.1550027562471945, 0.436609652871881, 0.20325406506064514, 0.16691121634844808, 0.6141924371445671, 0.10381043151789948, 0.10234571278286497, 0.2573924959959393, 0.16508719422901164, 0.1933788496627068, 0.1748078938299672, 0.18250807989175166, 0.18270345248999986, 0.1937685595296299, 0.1772066146831015, 0.17694226935404644, 0.17531456496771425, 0.08230779248378717, 0.06774434282320596, 0.07362309347150309, 0.07947639573384802, 0.07922186624540062, 0.08094745755232546, 0.09480067318217766, 0.0863943986014547, 0.09935659672306973]}, "mutation_prompt": null}
{"id": "875aeded-f76c-46d3-99b9-f1ea1e04013b", "solution": "import numpy as np\n\nclass Dynamic_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, probability=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.probability = probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                        \n                    if np.random.rand() < self.probability:\n                        self.f = np.random.uniform(0, 1)\n                        self.cr = np.random.uniform(0, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Dynamic_DE_HS_Mutation_Refinement", "description": "Enhancing an Evolutionary Algorithm with Harmony Search by introducing Dynamic Mutation and Crossover Probabilities for improved Black Box Optimization.", "configspace": "", "generation": 58, "fitness": 0.22758657547267416, "feedback": "The algorithm Dynamic_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.5283783932209346, 0.5772009061955976, 0.6076738686736436, 0.5467353786636223, 0.5138001847995014, 0.5645616624899124, 0.5493776196415305, 0.5084003978617786, 0.5250430046169723, 0.25794593939051136, 0.10257262619879459, 0.2751587387213089, 0.2138276526813836, 0.11297438967918005, 0.0893759830917108, 0.1887230692876707, 0.14072450570200112, 0.22144300432778385, 0.20782924879963371, 0.23573094082726753, 0.3269191873874969, 0.17145191121942427, 0.28284835999391966, 0.28474759582905507, 0.2742700750570328, 0.24993786885582214, 0.2849605475712913, 0.20644617824918887, 0.15289623092855564, 0.20416261056902407, 0.15831328024805247, 0.21996134647111576, 0.2563639911164649, 0.1839290099183568, 0.1827036074387698, 0.23913808370481282, 0.8760654931002374, 0.8869539247997872, 0.8699376115519728, 0.8771374910644869, 0.8094465450903198, 0.9238775587212381, 0.8702479860368351, 0.8805434562094795, 0.8559973214135866, 0.19534566560729638, 0.23255537742918797, 0.20002355408165895, 0.23864640108662583, 0.21017696632487282, 0.27747190821712686, 0.2290758313752269, 0.1924662608391673, 0.22849940249460843, 0.24440112588017537, 0.20107568998525727, 0.18984868354226203, 0.2737826241078164, 0.36309951348421665, 0.2643339171485245, 0.20234130482645774, 0.22211584357362046, 0.3316763750988083, 0.11875226119581062, 0.18763411308042355, 0.15446168941711624, 0.15689342819299978, 0.12291548859136547, 0.14628016628009066, 0.1255318242962078, 0.13197467719787725, 0.1600825632723858, 0.16649370224504367, 0.12446811377280431, 0.15308273903007263, 0.12229346260384444, 0.06072802951009304, 0.1932708648718463, 0.12357119175346254, 0.1227116413693018, 0.13036068179145555, 0.0010056557082349649, 0.019293441009000323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009578235465156348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07054652115964855, 0.04092058657318742, 0.11495645771241558, 0.07212998150249639, 0.01764403839001516, 0.0018098395923860089, 0.046135024336037334, 0.05030325203425656, 0.10884377009519941, 0.02570356356753456, 0.04625359436835663, 0.013624075023632387, 0.05633700735744185, 0.059535508888768685, 0.047506190225089284, 0.0581301273080973, 0.007036218364205538, 0.023376468450843513, 0.14205070742839232, 0.03980521328487763, 0.12551394096217994, 0.058777130230939445, 0.18632151207501313, 0.1395419718557438, 0.13951155373562685, 0.07747810967535151, 0.0944649468866059, 0.39495356238768986, 0.4558165214713499, 0.38760709488099676, 0.3601725393004873, 0.40815060419671234, 0.3673832931819013, 0.3549230423810722, 0.40118352491722176, 0.35654816428186265, 0.09869634948825678, 0.10997943395167842, 0.08320092517800715, 0.09400336502514839, 0.10056897455413982, 0.0930906921428365, 0.11618348057369587, 0.15168564135200635, 0.08099158849840682, 0.18287844752465032, 0.17048883928300107, 0.20147802669706427, 0.2694553740540824, 0.21795615933289658, 0.1829963234330414, 0.21565027104033785, 0.15231300910647383, 0.16980111660224106, 0.2200447533636002, 0.29683972152467775, 0.30109726061788555, 0.2604282510728243, 0.23735490301717677, 0.32160946157126313, 0.2535198761775217, 0.28041513945698393, 0.22063833797060828, 0.16981455076944874, 0.1783737942070851, 0.19793819171545313, 0.20020755068311824, 0.15827839591277038, 0.23140366089127684, 0.2386814241341283, 0.21938612012789294, 0.1678925606101178, 0.19889042324699624, 0.18426577964565505, 0.19830693929940046, 0.19866525058938167, 0.19969563077506292, 0.18672437765310324, 0.21050782957464886, 0.1908947069764294, 0.2255477013594892, 0.24382087806576547, 0.19188106916732928, 0.20433999294811123, 0.20189780983093197, 0.18749910523650892, 0.18898240595713522, 0.2430504689545101, 0.2333893010895539, 0.20170691531300222, 0.11869956062770959, 0.12403598212990019, 0.4866048264802487, 0.6570791894050337, 0.1672424206669897, 0.822645862907327, 0.718119774814306, 0.16737850429129197, 0.16617015141233238, 0.3689760611706766, 0.1547277748703254, 0.31186976100442576, 0.20422830827681215, 0.1648203813673812, 0.20483125722632123, 0.10366661503456942, 0.37980857855389616, 0.22776200226029886, 0.19408522871425404, 0.1642290659207154, 0.19068993910361343, 0.19843054380546798, 0.16449183132136536, 0.1699444476133849, 0.17762737695980302, 0.19668176504312895, 0.182840816764671, 0.08920665884525536, 0.10959106688726539, 0.07086120229898296, 0.07908935975850673, 0.08553946783243005, 0.08879164285709196, 0.09114782889885131, 0.0843537561238068, 0.06899228416480363]}, "mutation_prompt": null}
{"id": "466f0672-ca5d-4f1e-a461-79261c91041c", "solution": "import numpy as np\n\nclass PSO_ES_Hybrid:\n    def __init__(self, budget, dim, population_size=30, c1=2.0, c2=2.0, sigma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.c1 = c1\n        self.c2 = c2\n        self.sigma = sigma\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def pso_es_step(population, velocities, best_individual):\n            new_population = []\n            for idx, particle in enumerate(population):\n                velocity = velocities[idx]\n                new_velocity = self.c1 * np.random.rand() * (best_individual - particle) + self.c2 * np.random.rand() * (population[np.random.randint(0, self.population_size)] - particle)\n                new_particle = particle + new_velocity + self.sigma * np.random.randn(self.dim)\n                new_population.append(new_particle)\n            return np.array(new_population)\n\n        population = initialize_population()\n        velocities = [np.zeros(self.dim) for _ in range(self.population_size)]\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = pso_es_step(population, velocities, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    velocities[idx] = individual - population[idx]\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = PSO_ES_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_ES_Hybrid", "description": "Combining Particle Swarm Optimization with Evolution Strategies for Enhanced Black Box Optimization.", "configspace": "", "generation": 59, "fitness": 0.22134581888421326, "feedback": "The algorithm PSO_ES_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.43727821818028656, 0.41501108850351687, 0.42272029152762536, 0.44834501856933195, 0.42265236711448917, 0.4545759765051267, 0.4591672999112555, 0.4080693920275439, 0.4369897332540007, 0.02006897804380059, 0.017590751583144604, 0.03274293633849834, 0.004481588017370086, 0.011931621097256762, 9.999999999998899e-05, 0.021367919243072575, 0.07995052507444522, 0.029967009772369768, 0.06545742729040416, 0.11314439345974048, 0.12388766745535174, 0.09010565924342973, 0.09642533180341728, 0.09048357469285817, 0.0909888982504179, 0.0840476743948142, 0.09608115781275262, 0.08803731646948132, 0.08420555938069263, 0.10120242515296463, 0.11692099929579514, 0.05867622565741948, 0.06126139698933297, 0.1284792988833664, 0.08147956593937489, 0.07104804084127192, 0.9896331794262896, 0.9914458899312234, 0.9875329173243524, 0.9513236085401848, 0.969629352431292, 0.9679607479765399, 0.9857582716964894, 0.9820107970435814, 0.9903968905429, 0.23975316021215598, 0.2775162978814748, 0.25551218713221746, 0.28213822696943425, 0.27380259480916636, 0.26751933428269026, 0.281549689716869, 0.26647035546717135, 0.2522725151977946, 0.32231338490051487, 0.22293180108057975, 0.44069369878218345, 0.3529001135753883, 0.2437108547001522, 0.3359289325751117, 0.33694426986679904, 0.5597567612873078, 0.29500952106283096, 0.14437691648648654, 0.1665804648686663, 0.17389237749736364, 0.15936890720990138, 0.17850930975593382, 0.1647813016123717, 0.16915570700447247, 0.11934740763177487, 0.19625887231300554, 0.16743632029707023, 0.16277512913342962, 0.118174467667299, 0.19282398103996556, 0.13230103464726217, 0.19546583969357234, 0.17537992143117176, 0.17392812715919537, 0.15796540813073334, 0.07816946720533757, 0.016574886321534588, 0.0016958902304404777, 0.01471555437063965, 0.03678219799378202, 0.03486885811387708, 0.02721524152001875, 0.01443848097713396, 0.0162723047027854, 0.10412290043658756, 0.11132031488994476, 0.12100949529235916, 0.08255807684550731, 0.05902301864705928, 0.07652094123337305, 0.1045161747190021, 0.06938870862196456, 0.0870171884678782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11328268708085176, 0.10215337574931671, 0.10383549193422348, 0.11826249324118765, 0.09594929556080756, 0.1161507285488027, 0.09497913974870065, 0.10491283547723362, 0.09814206400499315, 0.40374930265474573, 0.4075112747501628, 0.39328083096715505, 0.3939476435254674, 0.4281118648752106, 0.38257663275556086, 0.45414668897898014, 0.3799004247966332, 0.39433993694700176, 0.10393948322297952, 0.10173788010451956, 0.10500824322056435, 0.0982747148032388, 0.09374032247303676, 0.09923232394200399, 0.1146941888499663, 0.0757712189343216, 0.09645943626502285, 0.2425211292559063, 0.18946802751780356, 0.20483014016779666, 0.2360954434502155, 0.24241869554748086, 0.2232348299076956, 0.19902057942852047, 0.20366022713482823, 0.1660838822089894, 0.27133320110221926, 0.28097852394792155, 0.28945786263397233, 0.2830897824338835, 0.27621214622738854, 0.2713396278887149, 0.27245013638075577, 0.2913134865953598, 0.239255818867516, 0.16426741197484485, 0.20353412956212757, 0.21089157588651164, 0.21870168429256243, 0.21297037538125063, 0.22143560708059218, 0.209368772419528, 0.21891543848966566, 0.15997915562341658, 0.19811741956313234, 0.19949408305186145, 0.1957997455763958, 0.19703057262296042, 0.18808530745019203, 0.1959443824359559, 0.17538467252184342, 0.19437860294046072, 0.205604464202932, 0.1728808594496528, 0.19271357099247766, 0.20624931836948746, 0.22656260516052984, 0.19921814272997895, 0.19106236913684382, 0.23457583682846794, 0.19155622953709295, 0.18240494298572152, 0.6449268216630162, 0.12453409181037955, 0.1537780713170298, 0.6647164218206285, 0.19921341758144495, 0.19848911971488536, 0.1203037378760966, 0.16784843397357252, 0.6267218293578306, 0.5488449935326664, 0.15460823340011287, 0.5611567452831672, 0.5248843817483689, 0.1635899731678353, 0.2068923261375205, 0.16575097335257905, 0.5069521914038718, 0.5616560806290376, 0.17362827185445295, 0.16369387339085695, 0.17183597605634715, 0.16050194512526816, 0.16109682930280034, 0.17553306555667803, 0.1721125160893895, 0.16744985644098054, 0.15970318743166811, 0.07644294019243503, 0.08201551583595212, 0.086073158451768, 0.07581976387992273, 0.08386236131150637, 0.06780218463736087, 0.06484827500345325, 0.06910189985208925, 0.08733619807333237]}, "mutation_prompt": null}
{"id": "deb1e9f8-ec13-4140-bad9-b6b87456dc02", "solution": "import numpy as np\n\nclass DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DE_HS_Mutation_Refinement", "description": "Improving Differential Evolution with Harmony Search by incorporating Mutation-Weighted Strategies and Refinement for enhanced Black Box Optimization.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "ab3c0afc-1b23-4260-b267-1e25d0bd27c7", "solution": "import numpy as np\n\nclass DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DE_HS_Mutation_Refinement", "description": "Improving Differential Evolution with Harmony Search by incorporating Mutation-Weighted Strategies and Refinement for enhanced Black Box Optimization.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "fddb3cd2-b49c-42a0-ae2c-a225e3428ff7", "solution": "import numpy as np\n\nclass Dynamic_DE_HS_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, prob_refinement=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.prob_refinement = prob_refinement\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.prob_refinement:\n                        trial[i] += np.random.uniform(-0.5, 0.5)  # Dynamic strategy refinement\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Dynamic_DE_HS_Refinement", "description": "Enhancing Differential Evolution and Harmony Search with Dynamic Strategy Refinement for Improved Black Box Optimization.", "configspace": "", "generation": 62, "fitness": 0.22708064709564374, "feedback": "The algorithm Dynamic_DE_HS_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.4959315968687469, 0.5499473762286973, 0.5092744848626918, 0.47846749205402017, 0.5113702032781834, 0.5218705445104874, 0.5400674972503177, 0.4807049477755351, 0.4826907395051274, 0.3119980236854806, 0.15869582659542525, 0.1235956739691032, 0.21133613201150614, 0.24001496276332868, 0.17165603569209287, 0.1579117924135942, 0.15999496925874446, 0.19403901681955882, 0.18168795223599288, 0.16931814585054594, 0.17329900406054133, 0.1767773031543951, 0.18314195755245455, 0.27460501215265165, 0.23980227398340226, 0.2445811901768763, 0.22628299746354041, 0.14635001490380728, 0.13583408493269344, 0.13138758095098435, 0.15111588484368343, 0.13156098414562545, 0.16437972029635017, 0.12960707251414572, 0.16342949738156676, 0.21481722312605067, 0.8609890176645285, 0.8986329819512624, 0.9009597301307466, 0.894352497936366, 0.8882443112869686, 0.8414937955425934, 0.8702606227227939, 0.9001014604878823, 0.8585823911534309, 0.2008279460467921, 0.21823035666446955, 0.2470559469236142, 0.2724516360384951, 0.2826702452870007, 0.27111490117951476, 0.25920755879248414, 0.2513033630901632, 0.20228715108003703, 0.2278212874918949, 0.18576175294578134, 0.16477318041069755, 0.27059699766671885, 0.21472774382290505, 0.27293572652130615, 0.2130911749716784, 0.1880782048411761, 0.29730659781649615, 0.21550036696910124, 0.1465196296536131, 0.1400766708753779, 0.17254864041099716, 0.1493851760707996, 0.16857155689938097, 0.15044341555894347, 0.12900207724563384, 0.1433119826628375, 0.1253566991822216, 0.1665328063845566, 0.14354393463739756, 0.1379671131580431, 0.14291504735675575, 0.12583697825781526, 0.12605436158541816, 0.11586476028235504, 0.12410827477903008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019043461897548353, 9.999999999998899e-05, 0.02205380347186603, 0.02838379211425579, 9.999999999998899e-05, 9.999999999998899e-05, 0.048118424552085926, 0.05876567981221048, 0.07228166672221192, 0.07111518144140305, 0.015340177227676222, 0.017343671317036402, 0.08028679597168797, 0.06360233873196941, 0.04857068436644019, 0.02031342296931493, 0.0018589959675789913, 0.02184177531464715, 0.022443508158316527, 0.013538319721189684, 0.026371895985950466, 0.026796898184050177, 0.017146273490860953, 0.03157056816335557, 0.08268789572246338, 0.05528790587580301, 0.13243751869003373, 0.06916990865259265, 0.040240176453420595, 0.0567883278163368, 0.1292767071298011, 0.1164638856741298, 0.11316490649630906, 0.42728866314374847, 0.43518935811381365, 0.44874842811215876, 0.4170913386263376, 0.4090207222620216, 0.39449794386763926, 0.4326895343255477, 0.4306617123754185, 0.4423588446086153, 0.09624116992310705, 0.10814670836757556, 0.1387726515236436, 0.10631530468953021, 0.1264137563514578, 0.13140531413855183, 0.09345295401178988, 0.11246250014998604, 0.08095180583579564, 0.29349577565545015, 0.25033064427228247, 0.14951914486922502, 0.1673090407703095, 0.2742166043663916, 0.18298458782018634, 0.17572846523971708, 0.28054097165451064, 0.26591641398048715, 0.26595856057476985, 0.2708616254638949, 0.25330675684369997, 0.267780616057678, 0.3142483351573985, 0.30055675364470336, 0.2974504221419515, 0.3311973165815192, 0.28349465185613665, 0.16917024203852182, 0.2242970347443124, 0.195788990820417, 0.20440852597234083, 0.24569087446613969, 0.26795164803906224, 0.20411126176578642, 0.2362051818247083, 0.185859502927062, 0.21538372685309204, 0.18450963842626655, 0.1839837109783563, 0.222075119798547, 0.24387341240472538, 0.19615981079633105, 0.22883378467409343, 0.21532166127004826, 0.20513727828804795, 0.2143060231628714, 0.2189368888624802, 0.23577716047241493, 0.2956880907895455, 0.19280895318563285, 0.1840335712541893, 0.20096529508736438, 0.19562019379871587, 0.2182024030303522, 0.636720957153398, 0.17632016601899758, 0.15154309435887592, 0.6991905460279553, 0.6995027084080325, 0.19896170717351946, 0.12097508900399767, 0.16906518694709027, 0.6456451176650317, 0.35563574821342625, 0.15551772225987026, 0.37615147702432805, 0.20769399996400828, 0.2970521607067934, 0.2069512800732981, 0.10478210487104411, 0.1655028716342899, 0.2648777469756344, 0.1665756766788392, 0.17247222585066024, 0.1856926232982542, 0.1792169240581396, 0.16867291342658086, 0.17866273066136162, 0.16804752947417656, 0.17392302068728493, 0.18486472709245083, 0.0916636995911011, 0.07582989499282689, 0.08390565315619947, 0.07884069942712668, 0.07450313007057918, 0.08333352317055065, 0.08874349086407873, 0.116485619040685, 0.06634276773151615]}, "mutation_prompt": null}
{"id": "0475900e-8d81-499c-b4ac-20d2cd59f5cc", "solution": "import numpy as np\n\nclass DE_HS_Line_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, refinement_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.refinement_prob = refinement_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.refinement_prob:\n                        trial[i] = refine_line(trial, func, i)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        def refine_line(individual, func, idx):\n            step_size = 0.1\n            current_value = func(individual)\n            left_neighbor = np.copy(individual)\n            left_neighbor[idx] -= step_size\n            right_neighbor = np.copy(individual)\n            right_neighbor[idx] += step_size\n\n            if func(left_neighbor) < current_value:\n                return left_neighbor\n            elif func(right_neighbor) < current_value:\n                return right_neighbor\n            else:\n                return individual\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = DE_HS_Line_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "DE_HS_Line_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by incorporating Probability-Based Line Refinement for advanced Black Box Optimization.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {}, "mutation_prompt": null}
{"id": "3944008a-6632-49d6-bec6-919b7194b2ce", "solution": "import numpy as np\n\nclass Dynamic_DE_HS_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, strategy_change_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.strategy_change_prob = strategy_change_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n                if np.random.rand() < self.strategy_change_prob:\n                    self.f = np.clip(self.f + np.random.uniform(-0.1, 0.1), 0.1, 0.9)\n                    self.cr = np.clip(self.cr + np.random.uniform(-0.1, 0.1), 0.1, 0.9)\n                    self.hmcr = np.clip(self.hmcr + np.random.uniform(-0.1, 0.1), 0.1, 0.9)\n                    self.par = np.clip(self.par + np.random.uniform(-0.1, 0.1), 0.1, 0.9)\n                    self.mw = np.clip(self.mw + np.random.uniform(-0.1, 0.1), 0.1, 0.9)\n\n        return best_individual\n\n# Example usage:\n# optimizer = Dynamic_DE_HS_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Dynamic_DE_HS_Refinement", "description": "Introducing a Dynamic Strategy Refinement for Enhanced Differential Evolution Harmony Search Metaheuristic Optimization.", "configspace": "", "generation": 64, "fitness": 0.21756479101069373, "feedback": "The algorithm Dynamic_DE_HS_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.5292664960210445, 0.46662564827583464, 0.5635675853637645, 0.4828892198349696, 0.42798796264292527, 0.5196542351371685, 0.48322135711926173, 0.4227977373280807, 0.5961820465925869, 0.17366665967106598, 0.23060952785264732, 0.2747190918103104, 0.13820521795972907, 0.09906141278019609, 0.21128843638867867, 0.11360940399939568, 0.18292598961461637, 0.23409571225924364, 0.17851817784731794, 0.27956067429279974, 0.28819931185855174, 0.16384467345928821, 0.12982781197901183, 0.2260380189176069, 0.1527607953745297, 0.2320242637086809, 0.22599914913654462, 0.1497296149041918, 0.17713070537340314, 0.1713282437599435, 0.15795650110132864, 0.14990369258737168, 0.18575440346290328, 0.14641767267438333, 0.14919739189622983, 0.18735433107297017, 0.8839920907025349, 0.9054599957304518, 0.9021541236889892, 0.8928634038305796, 0.9342873320853468, 0.9048338422863618, 0.9152524159859871, 0.8760739371375792, 0.9055764046468727, 0.18960637365837718, 0.231204980587689, 0.19883249017293914, 0.20537614278817817, 0.24265523523070953, 0.2548517210228255, 0.23566736642175778, 0.19796264643359807, 0.22198427558610134, 0.2607607986054149, 0.19447027867747513, 0.2770326534186849, 0.2642376228101181, 0.29144511821104757, 0.20561676217970215, 0.17668237253466756, 0.2528865072729104, 0.3249316310578514, 0.13296233055337092, 0.14458564781574335, 0.11942178697347094, 0.13957377498635415, 0.14693242140836138, 0.23415172126167805, 0.14426577237730231, 0.15678042655915436, 0.12620480487993102, 0.14046947834407908, 0.19310953578658596, 0.11904609392481036, 0.12601253202946316, 0.12641434478264968, 0.15693207879733906, 0.12176485717964936, 0.11198869824728319, 0.13556056310848175, 9.999999999998899e-05, 9.999999999998899e-05, 0.03744986933850103, 0.009264761821958567, 9.999999999998899e-05, 9.999999999998899e-05, 0.010515427077117834, 9.999999999998899e-05, 9.999999999998899e-05, 0.05968540643281195, 0.041076864355789944, 0.0984604190986802, 0.03955793010585462, 0.04986908054422334, 0.019286101448265813, 0.15333441490879451, 0.061162196905512944, 0.10611062393921289, 0.018134644028143132, 0.0018682478476185205, 0.10212513505303122, 0.0016321058280990286, 0.005908640173396762, 0.05216165739972789, 0.004270587173491158, 0.0017128746143011409, 0.061828184675057685, 0.10942722442686048, 0.09995732567020765, 0.07992774335573416, 0.10667943675741587, 0.11795676958212642, 0.11169296061584233, 0.09711806544483992, 0.06215894475232708, 0.07041823530983071, 0.3824206764831952, 0.40095598734206117, 0.38154823609930766, 0.43265928607888027, 0.41801469868530206, 0.3781181069328503, 0.42556778633593306, 0.33894959731322394, 0.4338998472507152, 0.10273839562933318, 0.09370492892658477, 0.10548837904858288, 0.11711565633265586, 0.0911541623692701, 0.08528125055373925, 0.09795736261318211, 0.08495078273597734, 0.0741356974949775, 0.19751642003035252, 0.2061965708943042, 0.210970479709657, 0.2172727595019167, 0.17338163074802193, 0.15305997739465915, 0.21666425517928278, 0.23387688423200403, 0.18400417039929418, 0.23048545119785135, 0.25529218602941994, 0.228526441617788, 0.21973052816565752, 0.2820355556607198, 0.24347069992456982, 0.24746039074433324, 0.2781672280368903, 0.25567230073345915, 0.17553521792252846, 0.22836904543751357, 0.20829904016336087, 0.17677383497504928, 0.22485491772278643, 0.19331926941426159, 0.1853451408536424, 0.2675926419794361, 0.1707601873729866, 0.20356272942397569, 0.21258352440990247, 0.1962603740198129, 0.20221920024162177, 0.18504069633030917, 0.18128442985401927, 0.20442093061217614, 0.2058879141045976, 0.18573282814352066, 0.2174374875183991, 0.20946527836459028, 0.2061901695908761, 0.2193537548751442, 0.1953385374250266, 0.23693811361680572, 0.18084290264164926, 0.23446672778550737, 0.22024666393340153, 0.19057718430211557, 0.5363263431145452, 0.1700135467420132, 0.8066253205585352, 0.1676644500072889, 0.1650482150803918, 0.12075674055698304, 0.16726769842248268, 0.1679360996050846, 0.3977528964830831, 0.15493308422692642, 0.2902370795517367, 0.35481727606272395, 0.1664887841756335, 0.20585672983183023, 0.10426145409830789, 0.10295634235171292, 0.10345000975498986, 0.17167346162813135, 0.1828955070918119, 0.2037329698612419, 0.18802756755165329, 0.17391793753382356, 0.21206987927431598, 0.1702709914361592, 0.17917059585138317, 0.17280620633156574, 0.10078328216611121, 0.0851617884734418, 0.06346420919769935, 0.08014374909429589, 0.08510832718819072, 0.07711555194747743, 0.08309717644231496, 0.07921550984311831, 0.08965812078805868]}, "mutation_prompt": null}
{"id": "c5dba129-b0dc-48d6-a3c1-008e7eec3437", "solution": "import numpy as np\n\nclass Ensemble_Evo_Optimization:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def ensemble_evo_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = ensemble_evo_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Ensemble_Evo_Optimization(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Ensemble_Evo_Optimization", "description": "Ensemble Evolutionary Optimization Algorithm combining Differential Evolution and Harmony Search with Mutated Strategies and Refinement for multifaceted Black Box Optimization.", "configspace": "", "generation": 65, "fitness": 0.24139234241011387, "feedback": "The algorithm Ensemble_Evo_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.6529264489191138, 0.574685786604568, 0.5457382050262127, 0.5295830053607153, 0.5821949386505307, 0.6049842397200307, 0.5870060764547864, 0.6860953391239809, 0.6822937800578206, 0.32440166917433855, 0.24006768029193948, 0.3515940735220362, 0.26530771325617475, 0.252389785756276, 0.24111237179152223, 0.3125150201927016, 0.44652618543214984, 0.23457900276419252, 0.30099317298857153, 0.3086370686595483, 0.3589185122360242, 0.3158267586732453, 0.2756445354612568, 0.32196298036754645, 0.29917785465748603, 0.3318705168193282, 0.2478332734347226, 0.18096965462696457, 0.20758407722613148, 0.190995947884399, 0.22218787047665378, 0.3433540260936704, 0.21138560952702, 0.189061590451026, 0.24145600870172212, 0.21600192414430275, 0.8747324464313087, 0.9037115630448967, 0.8952859457302322, 0.9129295804475285, 0.8853578811421274, 0.8794098762665394, 0.8695567505447133, 0.8451152023751272, 0.8856636855694169, 0.18492363657299526, 0.23210617306416126, 0.1821964914630686, 0.28527531492219715, 0.25647786991913646, 0.22257513419069896, 0.28317835716153517, 0.22379722746182695, 0.26065420481246937, 0.20357566878140765, 0.16075785923088137, 0.22417974460146262, 0.21417611461248998, 0.32015902344163794, 0.21103051012338214, 0.22451004376065076, 0.19108884528845116, 0.21761813321181556, 0.12225280349787959, 0.15686819577951805, 0.09910047998909344, 0.12636881278588386, 0.13315109051870933, 0.32062023566219944, 0.16100735761713658, 0.13594346411644442, 0.1470298633197834, 0.15710872751347138, 0.20538239337374065, 0.12326739540081799, 0.125938747535561, 0.13872316440584054, 0.17200135788465376, 0.1267366920965438, 0.12129771683023971, 0.10919698032246228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010581229782624657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12877194065447106, 0.028000196461085425, 0.12770031705817386, 0.019397390689082195, 0.042819460052407665, 0.02338910114747761, 0.10045980719365433, 0.08324959558263312, 0.08976422442592358, 0.1129771574194427, 0.162459502317998, 0.09493671287664218, 0.04682256771414506, 0.055831253128956315, 0.05098916611881288, 0.00041394180353349075, 0.07099700863617142, 0.013559451805021716, 0.08681558274167689, 0.1327470455159513, 0.0947642219697511, 0.04563925141408964, 0.19104893607945939, 0.10652534091184129, 0.11779248816167875, 0.12492215169464727, 0.07989916593380908, 0.4822444243764713, 0.4140374494445024, 0.39718471130675015, 0.3977291398833196, 0.37609256774302946, 0.48986897925250483, 0.3854636219946391, 0.4429136436961104, 0.3770316832560535, 0.08814381464371746, 0.1415877046347177, 0.11531717718198053, 0.12902682868263693, 0.08466677992938731, 0.1482557360724408, 0.1149822819885511, 0.08749607891100109, 0.09022307097054694, 0.1642239228311888, 0.24289387161463527, 0.24716276502769652, 0.2485388368054634, 0.3083198962468825, 0.2266469146728336, 0.2117339590410967, 0.24396781284941593, 0.1719935143441227, 0.25034352620584244, 0.31323135230864085, 0.2174036893404706, 0.2443397497387284, 0.36075500480238176, 0.2366648490281582, 0.24835410089371368, 0.33754380410251184, 0.2833546485432126, 0.20162344950249744, 0.23680790081876613, 0.2272861584920255, 0.14355125845452787, 0.2255551566148305, 0.2112225343621933, 0.19882810774344906, 0.20189299438698638, 0.1993685220889594, 0.19536688633496557, 0.1898003448361596, 0.20161150576923348, 0.1887926852953703, 0.19509230905633135, 0.19415222584511216, 0.223439358978063, 0.19571113680264607, 0.21124741466825436, 0.2169519741503283, 0.2255228199206326, 0.2457024203329118, 0.20599576430379862, 0.21438915648877654, 0.20558768072098677, 0.19395432552549385, 0.19691694723312625, 0.19384229660124952, 0.18978134851393602, 0.16655630577673963, 0.15171624210066947, 0.5377901809997438, 0.16784073737220295, 0.5164927913334831, 0.7913972775853997, 0.16640655213858702, 0.16809212783561633, 0.5270216271388379, 0.1554365157717461, 0.4001423467266182, 0.24762438856797753, 0.16694837647021865, 0.2059767079796373, 0.10393567128369374, 0.10382318761536535, 0.1730430026074562, 0.18425696363034216, 0.1891383107118806, 0.19224381470971352, 0.18191467593259425, 0.18336541432225795, 0.22049468536860628, 0.17138595915306776, 0.2025055481928505, 0.19180639506737784, 0.08636143518369876, 0.09486095956499796, 0.0779705862982808, 0.08587041381218075, 0.07432971717830006, 0.0866768290664659, 0.0900613858336281, 0.08119925324757005, 0.10187440796217284]}, "mutation_prompt": null}
{"id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 66, "fitness": 0.24421669711710212, "feedback": "The algorithm Adaptive_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "f2576de0-d5d1-4442-9d70-5195ae90033c", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "eeaf1f5b-a34d-4cad-b834-f7d4cecdb5e8", "solution": "import numpy as np\n\nclass Enhanced_DE_HS_Adaptive_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Enhanced_DE_HS_Adaptive_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Enhanced_DE_HS_Adaptive_Refinement", "description": "Enhanced Differential Evolution merged with Harmony Search using Adaptive Mutation and Refinement for versatile Black Box Optimization with a probability of 0.3 for line changes.", "configspace": "", "generation": 67, "fitness": 0.24421669711710212, "feedback": "The algorithm Enhanced_DE_HS_Adaptive_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "2a6d0193-e534-419e-bcab-c01402578c5d", "solution": "import numpy as np\n\nclass Novel_Metaheuristic_Algorithm:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Novel_Metaheuristic_Algorithm(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Novel_Metaheuristic_Algorithm", "description": "Combining Differential Evolution with Harmony Search while adapting mutation and refinement strategies for robust black box optimization.", "configspace": "", "generation": 68, "fitness": 0.24421669711710212, "feedback": "The algorithm Novel_Metaheuristic_Algorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "77fa8085-8998-45ed-8cc8-162b48953d0b", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "3f3cc602-8275-438a-83af-a6b7df09b214", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement_Improved:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:  # Updated mutation probability\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement_Improved(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement_Improved", "description": "Introducing Differential Evolution with Harmony Search for adaptive mutation and refinement in versatile Black Box Optimization.", "configspace": "", "generation": 70, "fitness": 0.24421669711710212, "feedback": "The algorithm Adaptive_DE_HS_Mutation_Refinement_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "e43975fb-ba7c-442c-8445-cd841ad3e5f7", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "b13c0c7c-352e-48e3-973a-3b823dd38262", "solution": "import numpy as np\n\nclass PSO_DE_Hybrid:\n    def __init__(self, budget, dim, population_size=30, c1=2.0, c2=2.0, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def pso_de_step(population, velocities, best_individual):\n            new_population = []\n            for idx, (target, velocity) in enumerate(zip(population, velocities)):\n                p_best = population[np.argmin([func(ind) for ind in population])]\n                g_best = best_individual\n                new_velocity = self.c1 * np.random.rand(self.dim) * (p_best - target) + self.c2 * np.random.rand(self.dim) * (g_best - target)\n                new_velocity = np.clip(new_velocity, -1, 1)\n                new_position = target + new_velocity\n                if np.random.rand() < self.cr:\n                    de_mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                    crossover_points = np.random.rand(self.dim) < 0.5\n                    new_position = np.where(crossover_points, de_mutant, new_position)\n                new_population.append(new_position)\n            return np.array(new_population), np.array(new_velocity)\n\n        population = initialize_population()\n        velocities = np.random.rand(self.population_size, self.dim)\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population, velocities = pso_de_step(population, velocities, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = PSO_DE_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_DE_Hybrid", "description": "Combining Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 72, "fitness": 0.09174624962043267, "feedback": "The algorithm PSO_DE_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.28810037057625604, 0.2496419946912779, 0.26470298123665825, 0.1546052826235853, 0.13126638815643543, 0.18446835134545359, 0.19923244619995106, 0.24723169007520596, 0.20017073907646066, 0.0028018894311909737, 9.999999999998899e-05, 0.005017168520999649, 0.004497843501916066, 0.03316322350608347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04731482534419118, 0.06543771151155775, 0.038900172140669875, 0.06456520878064753, 0.051358329582098516, 0.05411969257502747, 0.05938152764545079, 0.0754996944882288, 0.059575223641595065, 0.04601091355798581, 0.07324722949326146, 0.03150809791146403, 0.060818350351841355, 0.050614874813157296, 0.02546487320919044, 0.03352804657198738, 0.03822844075688192, 0.02464461305445853, 0.08240191157142052, 0.06420705708318786, 0.06948644366462231, 0.08955766699754664, 0.06590245569477449, 0.0816082348710635, 0.07116836825818629, 0.07495675367788168, 0.0691143067119856, 0.08095311553882023, 0.0644052179919512, 0.08983997999873661, 0.09689854275169496, 0.11121062506322776, 0.07890937471618586, 0.06031073160167055, 0.049763145260454444, 0.02886484510093157, 0.1538476438117916, 0.13528216746898247, 0.11281778763610906, 0.17125691872243187, 0.15917966764402136, 0.12556427754652522, 0.1324662162008179, 0.15804284247373057, 0.12103590562390543, 0.05428307245775488, 0.03060542733945626, 0.036096388757220876, 0.006506038444334616, 0.010183678570015564, 0.06143029376957876, 0.07387367123150523, 0.012599103724825866, 0.04104918682985503, 0.05683728541804922, 0.05748590464015868, 0.07868654447714796, 0.05856272931470774, 0.08073908144475372, 0.050654586686221914, 0.06264034198685209, 0.032880585194987155, 0.053082247162457685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05411695974285036, 0.012491470185471143, 0.05334800798837236, 0.04398632928539592, 0.009088705153860843, 9.999999999998899e-05, 0.04880917094944692, 0.004083706522037378, 0.03495933513240468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029607697100376917, 0.01397636526908863, 0.008719473441381687, 0.0007251989619430077, 0.005504413211571357, 0.01434883086184513, 0.01902105695254963, 0.010041432819401619, 0.005341044278750595, 0.2578467895846851, 0.25252409832131095, 0.24140131454083535, 0.21270184750300025, 0.20443982549437711, 0.1844782088567407, 0.2816522510618684, 0.22976210057018298, 0.2484985600559222, 0.044929501510514114, 0.010688665021134303, 0.020621082617553466, 0.042506330881013854, 0.03225291540532327, 0.050718373592282706, 0.044771227647822376, 0.04176095476194819, 0.057864232348094125, 0.07680011695627909, 0.08609370886951495, 0.10696804888414257, 0.10086059439694983, 0.11607548979835902, 0.09262942593094248, 0.09352613878439553, 0.10027091073457772, 0.124951412371343, 0.15314022849307385, 0.20229982727626417, 0.16087800118450746, 0.16998247360495533, 0.1897866307440007, 0.1584477478962093, 0.15051623402680925, 0.21552158118688614, 0.16186134255122142, 0.11350501486280395, 0.10671938145420923, 0.12290620151443277, 0.11805073255870557, 0.12969852026374373, 0.10455351959601578, 0.11397379142565911, 0.13317853842405203, 0.10067529265725494, 0.14557954666223671, 0.1410960136759979, 0.20176685039200903, 0.16627093660111059, 0.1496495478260822, 0.14057062443135204, 0.16488432815897447, 0.18090692141808618, 0.16244760502583688, 0.12400031207942974, 0.13151330045809095, 0.14541840514818416, 0.1359732916980645, 0.1347058277550881, 0.1422154552522552, 0.14766641614005382, 0.14576651950152242, 0.1330321801571399, 0.09481601859304079, 0.11734267611500471, 0.15803209752858205, 0.30946666280469226, 0.12363832829944987, 0.16040906276705413, 0.1918212926976789, 0.19155954962371824, 0.1439299442369495, 0.24033334817877183, 0.19588541716937824, 0.17228886549256173, 0.13701095230819815, 0.1346904054625444, 0.06133957326113415, 0.08383422828039655, 0.07871299521349806, 0.06787198056647703, 0.14896281218184582, 0.16291327844844605, 0.14838956058662156, 0.13956003518496496, 0.16038629471902643, 0.15503134460168766, 0.14969714796693134, 0.1408669393190778, 0.14902841725389504, 0.05826931747994768, 0.04491853099184007, 0.03758387317872236, 0.05615449341482126, 0.05203663419021143, 0.05826009157303691, 0.04107765843212419, 0.04830495700555626, 0.05307610092167647]}, "mutation_prompt": null}
{"id": "9477c36e-9ffa-42fd-9170-910c0604c381", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "5c87123f-163c-410f-a072-39b18e7313bc", "solution": "import numpy as np\n\nclass Enhanced_DE_HS_Adaptive_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Enhanced_DE_HS_Adaptive_Mutation_Refinement", "description": "Introducing an Enhanced Differential Evolution algorithm with Harmony Search by incorporating Adaptive Mutation and Refinement for versatile Black Box Optimization with a probability of 0.3 for line adjustments.", "configspace": "", "generation": 74, "fitness": 0.24421669711710212, "feedback": "The algorithm Enhanced_DE_HS_Adaptive_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "f82c2c3b-8647-42cf-8142-2e3cd7cc014f", "solution": "import numpy as np\n\nclass CustomMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def custom_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = custom_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = CustomMetaheuristicAlgorithm(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "CustomMetaheuristicAlgorithm", "description": "Combining Differential Evolution and Harmony Search with adaptive mutation, refinement, and probabilistic strategy for efficient black box optimization.", "configspace": "", "generation": 75, "fitness": 0.24421669711710212, "feedback": "The algorithm CustomMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "a7a3d04c-2782-4bb9-8dd0-2dff1a4bdde4", "solution": "import numpy as np\n\nclass Enhanced_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3, refinement_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n        self.refinement_prob = refinement_prob\n\n    def __call__(self, func):\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                    if np.random.rand() < self.refinement_prob:\n                        trial[i] += np.random.normal(0, 0.05)  # Further refinement\n                new_population.append(trial)\n            return np.array(new_population)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Enhanced_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Enhanced_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by further refining the mutation strategy and population diversity for black box optimization.", "configspace": "", "generation": 76, "fitness": 0.2231428199624851, "feedback": "The algorithm Enhanced_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5565271414592459, 0.5313657429462723, 0.5138961018423347, 0.4981020052672168, 0.5226138131387685, 0.5421074869459638, 0.5234727526140003, 0.5414693845468845, 0.521737357831946, 0.26502608423505525, 0.22664430066789554, 0.1918157830532724, 0.24625527601461394, 0.18800187979897953, 0.19430702523382015, 0.22080848055993285, 0.15799052021885995, 0.17326390073818498, 0.2200402515454959, 0.13056354116036217, 0.14896308060513042, 0.2018195990150976, 0.20267017650403618, 0.16134819589268612, 0.22550269993978922, 0.25612755890715955, 0.21123790815416565, 0.1665043746320103, 0.14254076570324892, 0.13832095413283985, 0.1363520699975097, 0.1366239791925451, 0.13215337198042743, 0.187727330846154, 0.11501369042447185, 0.13815036700623096, 0.8947510080400559, 0.8463887591042016, 0.8728023115424794, 0.8499118730423104, 0.8507934026148969, 0.8970250054230416, 0.8681881319562567, 0.8519632175827655, 0.8839043375566904, 0.2887954556754996, 0.2558932081237201, 0.3074658417586611, 0.289594785672585, 0.23626514653445296, 0.26193928985716197, 0.29145777230471837, 0.2478265878184599, 0.29907660802062486, 0.23172703446946163, 0.21066988819581478, 0.20377941151711243, 0.2606766990356707, 0.27098180565118246, 0.2645425234857355, 0.19555080265205915, 0.2170750798160317, 0.20829617742525075, 0.238516944412687, 0.1550587886515794, 0.14337246726033792, 0.13761550046573778, 0.16680817612823262, 0.17044309328719898, 0.18125102252947045, 0.24299356243925263, 0.24094085060390036, 0.128780865970197, 0.1358307320303933, 0.12022915979060267, 0.1246266687014218, 0.13751952273695878, 0.15254475775664267, 0.1330829773449721, 0.18045835099228025, 0.001704752735184445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01395552939480238, 0.06988955940603936, 0.03913623170270475, 0.08282114983049593, 0.03364549000016592, 0.026086873599104332, 0.012856001201501543, 0.09992450577389644, 0.05804802911806617, 0.03417094503526519, 0.042057155852178396, 0.0340761843803411, 0.030598118419127407, 0.008239860398890908, 0.003495215221633985, 0.028803816252435333, 0.03913974962334965, 0.008989969994023128, 0.031386024690725156, 0.1442749105537814, 0.09652260603941176, 0.1450959894480044, 0.0717813845622095, 0.020992299650829382, 0.08400086968479448, 0.1434754196013659, 0.11394065944232357, 0.08503746084250108, 0.4360961197271268, 0.4420084159505948, 0.4752175327937763, 0.4640992986989865, 0.4545347541115702, 0.43971165734295015, 0.4916570937730299, 0.4707469859201796, 0.4603324105975566, 0.09811833431457417, 0.13118728172236827, 0.07230027159869112, 0.10819058678889248, 0.07107452903483735, 0.13557203594068523, 0.10801591219200712, 0.07308285938060832, 0.1266189624788402, 0.3267755096362521, 0.2459996389358151, 0.1856719933729568, 0.20127965364161637, 0.27314276989974473, 0.14844693190219116, 0.21674560838822954, 0.1984889921197751, 0.3307450427026396, 0.229806623036247, 0.29811748877816635, 0.26492521953044346, 0.17665362853171662, 0.2791313450031596, 0.3299234846604453, 0.23763330063101895, 0.3087572251656584, 0.1911325956117339, 0.20019283136207167, 0.21985039773653314, 0.2080746869076735, 0.18978020227446846, 0.23602563744422755, 0.16442644529363892, 0.19054004470156183, 0.2365651396182027, 0.21116863829269494, 0.20496833287438565, 0.2071721421502173, 0.2135236978695726, 0.21340208904149138, 0.21578929568745142, 0.21409887219683466, 0.20985388294619256, 0.2067047797473177, 0.21558890378480544, 0.2212566943527, 0.1959828629395537, 0.24027709781738404, 0.19949821574353244, 0.2326213824553246, 0.22235380035394703, 0.18590274852086086, 0.2047599440748099, 0.20845409100007073, 0.5387326424106014, 0.1746697828211723, 0.11279976134913727, 0.6130855403759079, 0.19795990829873267, 0.1956238967248699, 0.1650374541851335, 0.16811242709794316, 0.1654123211896018, 0.41409066511138704, 0.15518408751256552, 0.1655946577533145, 0.20508518700711498, 0.20929686641186518, 0.20328922597948484, 0.2810207509607766, 0.1603617464419883, 0.16062956422538177, 0.16270685991221545, 0.17848062424493527, 0.17315861630582818, 0.16888258074516949, 0.17234211142583478, 0.17519660137131599, 0.1805155201957821, 0.1828281466687357, 0.170404038516061, 0.09128699635102278, 0.07880464434457768, 0.07158079487914493, 0.084582261898965, 0.09026704013600917, 0.09577515691718586, 0.08042689409140258, 0.08085819700725838, 0.08456326873922515]}, "mutation_prompt": null}
{"id": "fcefc0f2-6eb8-43d1-bc69-8c09e5c01ea8", "solution": "import numpy as np\n\nclass Novel_Metaheuristic_Algorithm:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def novel_step(population, best_individual):\n            # Insert novel algorithmic steps here\n            pass\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = novel_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Novel_Metaheuristic_Algorithm", "description": "A novel metaheuristic algorithm combining Differential Evolution and Harmony Search with adaptive mutation and refinement for versatile black box optimization.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'NoneType' object is not iterable\").", "error": "TypeError(\"'NoneType' object is not iterable\")", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {}, "mutation_prompt": null}
{"id": "97836934-6949-4321-ab42-032873e3106c", "solution": "import numpy as np\n\nclass Enhanced_DE_HS_Adaptive_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Enhanced_DE_HS_Adaptive_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Enhanced_DE_HS_Adaptive_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization with probability-based individual line changes.", "configspace": "", "generation": 78, "fitness": 0.24421669711710212, "feedback": "The algorithm Enhanced_DE_HS_Adaptive_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "af6ee61c-bcfb-4656-a717-66cdc91397bf", "solution": "import numpy as np\n\nclass Firefly_DE_Integration:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, alpha=0.5, beta_min=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.alpha = alpha\n        self.beta_min = beta_min\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def firefly_de_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                attractiveness = np.zeros(self.population_size)\n                for j, other in enumerate(population):\n                    distance = np.linalg.norm(other - target)\n                    attractiveness[j] = self.beta_min + (1.0 - self.beta_min) * np.exp(-self.alpha * distance ** 2)\n\n                best_index = np.argmin([func(ind) for ind in population])\n                best_individual = population[best_index]\n\n                for i in range(self.dim):\n                    if np.random.rand() < attractiveness[idx]:\n                        mutant = target + self.f * (best_individual - target) + self.cr * (population[np.random.randint(0, self.population_size)] - population[np.random.randint(0, self.population_size)])\n                        target[i] = mutant[i]\n\n                new_population.append(target)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = firefly_de_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Firefly_DE_Integration(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Firefly_DE_Integration", "description": "Introducing a Novel Metaheuristic Algorithm by integrating Firefly Algorithm with Differential Evolution for Enhanced Black Box Optimization.", "configspace": "", "generation": 79, "fitness": 0.07148130493555307, "feedback": "The algorithm Firefly_DE_Integration got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.15.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09169502728636048, 0.09775681728715757, 0.0665662020931963, 0.07709668639236078, 0.07795415841203734, 0.09962537010557315, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.0012186513362246743, 0.006669962766643223, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0005801474641464743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7820143423095129, 0.8432977472136154, 0.8980028392071201, 0.6724362049652488, 0.6812344523072633, 0.7802377210632246, 0.7186238269962227, 0.799456875005646, 0.7746730325655371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.02725496812965944, 9.999999999998899e-05, 0.053257473267910416, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.14838054695461433, 0.11840839444845719, 0.09708865527373767, 0.09580441870675127, 0.16112956940342849, 0.09716408355800721, 0.1210557193025883, 0.015810654545691638, 0.003526324588325358, 9.999999999998899e-05, 0.006101769545772684, 0.0060096043508584, 0.01759993274736349, 0.004956770199710081, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.08609370886951495, 0.07966996823472927, 0.09855305120349966, 0.10852972522114013, 0.10884831195551925, 0.08808199726801991, 0.06064507323521173, 0.08706860067423894, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.13800672315110074, 0.11793547320414022, 0.1025140421398899, 0.12028165949079228, 0.17377774300845283, 0.11363346445524236, 0.03812976025022474, 0.034008147686441226, 0.05463654710198407, 0.056957211629895754, 0.06463098937612488, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.10289055837941885, 0.09762008759770757, 0.09307045902971678, 0.12245976138762271, 0.09487481333101655, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07466602457976645, 0.09173685751911032, 0.06718871428537254, 0.1207914665021157, 0.1000835029327869, 0.07245568600050101, 0.09643604708838482, 0.0693612576838919, 0.11040265245322212, 0.10051730792859848, 0.035797160906681724, 0.0506857903344724, 0.03738259240699027, 0.045511073114331335, 0.04690376827171172, 0.04019044166964181, 0.04143420019681854, 0.13480174570059533, 0.128372137474824, 0.14763022729669195, 0.1234289272177932, 0.11402400224796383, 0.12465113207635137, 0.14969714796693134, 0.11383213438624773, 0.1608982157665303, 0.0243319482753519, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 0.00164351183872391, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "d9892222-15a4-4393-a2d5-28c87e23e43f", "solution": "import numpy as np\n\nclass PSO_ADE:\n    def __init__(self, budget, dim, population_size=30, c1=1.494, c2=1.494, f=0.5, cr=0.9, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def pso_ade_step(population):\n            new_population = []\n            for idx, target in enumerate(population):\n                pbest = population[np.argmin([func(ind) for ind in population])]\n                gbest = population[np.argmin([func(ind) for ind in population])]\n                velocity = np.random.uniform(-1, 1, size=self.dim)\n                velocity = self.c1 * np.random.rand() * (pbest - target) + self.c2 * np.random.rand() * (gbest - target)\n                trial = target + velocity\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.cr:\n                        trial[i] = target[i] + self.f * (population[np.random.randint(0, self.population_size)][i] - target[i])\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = pso_ade_step(population)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                remaining_budget -= 1\n\n        return population[np.argmin([func(ind) for ind in population])]\n# Example usage:\n# optimizer = PSO_ADE(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_ADE", "description": "A novel algorithm combining Particle Swarm Optimization with Adaptive Differential Evolution for efficient black box optimization.", "configspace": "", "generation": 80, "fitness": 0.0590264437508953, "feedback": "The algorithm PSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.05.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.14152928069658066, 0.14529373055482664, 0.17099950427159272, 0.09525243720678844, 0.09082541649599318, 0.11230644541040968, 0.10557529120892395, 0.10231704947310594, 0.11153469916381875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012617484205212692, 0.03388727199744013, 0.013089245091040036, 0.05346739353516072, 0.02263220844624081, 0.03278778562535101, 0.0261720696610499, 0.022276285776259508, 0.02208369999418991, 0.01230382206680447, 0.02496696292458256, 0.002779086697913602, 0.02090695054211389, 0.01003191566576589, 0.009939819539325656, 0.003667928370258977, 0.003975957693039489, 0.006824634610988367, 0.0514058581374266, 0.05121054783706591, 0.06289312323520901, 0.06570718837312906, 0.051608235017048365, 0.05761530835608686, 0.0662883482486486, 0.05720941628403675, 0.06007858341874239, 0.052866122201866705, 0.018032528588848296, 0.025992671792055777, 0.05754390355162309, 0.01291877922327489, 0.019658107260293267, 0.011010853878576032, 0.014021861770747046, 9.999999999998899e-05, 0.1213422752852632, 0.07964449064035961, 0.0734309083355974, 0.08009780896240193, 0.04623204359038213, 0.019478741337234484, 0.050580047303699804, 0.08315761060120186, 0.05591547446575973, 0.013817740198692974, 9.999999999998899e-05, 0.021117599211134985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00437863413049544, 0.0018931978678059513, 9.999999999998899e-05, 0.029736300416711492, 0.01120791230443885, 0.005621320151284581, 0.01817772078511226, 0.006625091112798742, 0.04699278948521901, 0.025142206127687472, 0.006969192203160501, 0.012684061936076962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03130436427397654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19182882328957207, 0.18288942535102548, 0.17594296570582535, 0.1359205014067586, 0.12128180426093782, 0.12180209595626512, 0.19172380943267364, 0.15466510308203474, 0.16129958162058466, 0.005294233944277749, 0.004444698827174909, 9.999999999998899e-05, 0.023075182456807175, 0.025769564196751027, 0.030198605994431804, 0.02410465284719354, 0.022072885538943265, 0.037490017120357155, 0.09136757414926144, 0.08609370886951495, 0.06406188477479702, 0.10430897571261355, 0.10979231177013027, 0.06488651677154189, 0.09428741164045129, 0.1044789445006169, 0.08132616142394056, 0.11831736060623388, 0.12154892051292188, 0.14667329531499895, 0.16231042707661114, 0.13995957491237054, 0.14335531955551017, 0.12083324004529183, 0.17377774300845283, 0.1251424732349855, 0.06620974376408817, 0.0559042261660756, 0.0699550787391987, 0.08848191699372454, 0.07914772492381417, 0.08666819518813951, 0.0837317855149382, 0.0997711199450243, 0.0743714343016012, 0.13744497307302095, 0.13970868813412474, 0.14757732937098444, 0.13454213492512934, 0.12281803594327734, 0.12598908780928064, 0.1408718992642478, 0.13338565358408994, 0.13710468990617775, 0.08861637038393455, 0.09106255057479862, 0.08840284219054029, 0.12014490813149181, 0.09842282641184286, 0.1015141383438275, 0.09082125008686293, 0.09419043209065825, 0.06291037533617005, 0.10460976473791506, 0.09294273348291804, 0.09953939482888019, 0.09947309446903996, 0.1207914665021157, 0.1425613810886307, 0.08777238853639668, 0.09975872635034033, 0.07979085220452675, 0.11040701347161741, 0.10051730792859848, 0.10850839129434242, 0.09240014632167781, 0.07115237915522754, 0.06388688890817606, 0.07074372243707328, 0.09504864291648041, 0.07571999777108884, 0.13480174570059533, 0.12872429033326738, 0.14763022729669195, 0.13326948669366778, 0.13116545040937166, 0.1369579762472256, 0.15963259083505765, 0.15158192702624707, 0.14942876905310354, 0.030417244906081997, 0.04209736022268129, 0.035005573787000865, 0.03498950168059345, 0.04868005453514468, 0.044795777321606556, 0.03924314741811541, 0.02766425371467318, 0.03915362977234216]}, "mutation_prompt": null}
{"id": "c560a363-fff2-4c1c-904b-8e057d48ca0b", "solution": "import numpy as np\n\nclass PSO_DE_Hybrid:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.w = w\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def pso_de_step(population):\n            new_population = []\n            for idx, target in enumerate(population):\n                pbest = population[np.argmin([func(ind) for ind in population])]\n                gbest = population[np.argmin([func(ind) for ind in population])]\n                v = np.random.uniform(0, 1, size=self.dim) * v + self.w * (pbest - target) + self.cr * (gbest - target)\n                trial = target + self.f * v\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = pso_de_step(population)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                remaining_budget -= 1\n\n        return population[np.argmin([func(ind) for ind in population]])\n\n# Example usage:\n# optimizer = PSO_DE_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_DE_Hybrid", "description": "A novel optimization algorithm combining Particle Swarm Optimization with Differential Evolution for versatile black box optimization.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 39, 70, '        return population[np.argmin([func(ind) for ind in population]])')).", "error": "SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 39, 70, '        return population[np.argmin([func(ind) for ind in population]])'))", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {}, "mutation_prompt": null}
{"id": "6ded2ef4-a775-4ec2-be72-ce03de0ce691", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization with a probability of 0.3.", "configspace": "", "generation": 82, "fitness": 0.24421669711710212, "feedback": "The algorithm Adaptive_DE_HS_Mutation_Refinement got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "55ee2830-0f9c-45bb-a1cb-1998ef46f4b9", "solution": "import numpy as np\n\nclass PSO_DE_Hybrid:\n    def __init__(self, budget, dim, population_size=30, w=0.5, c1=1.49445, c2=1.49445, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def pso_de_step(population, velocities, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                # PSO update\n                velocities[idx] = self.w * velocities[idx] + self.c1 * np.random.rand(self.dim) * (best_individual - target) + self.c2 * np.random.rand(self.dim) * (population[np.random.randint(0, self.population_size)] - target)\n                target += velocities[idx]\n\n                # DE update\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - population[np.random.randint(0, self.population_size)])\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                new_population.append(trial)\n            return np.array(new_population), velocities\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population, velocities = pso_de_step(population, velocities, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = PSO_DE_Hybrid(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "PSO_DE_Hybrid", "description": "Integrating Particle Swarm Optimization with Differential Evolution for enhanced Black Box Optimization.", "configspace": "", "generation": 83, "fitness": 0.09001210262066725, "feedback": "The algorithm PSO_DE_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.08774815958588056, 0.09598090767443013, 0.11990454583623378, 0.08952233024927114, 0.0981851495423407, 0.07709668639236078, 0.12977953791473262, 0.10913976743678144, 0.12657103244280787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021068760530371544, 0.01467079663371329, 0.04390169540101396, 0.010643411704069683, 0.003681456932662641, 0.007077715044780386, 0.018248263482334326, 0.0035063114598973266, 0.017823918327625643, 9.999999999998899e-05, 0.004565772042198879, 0.028420517460377215, 0.01959972157639278, 0.0018576455390068025, 0.018117987824831094, 9.999999999998899e-05, 9.999999999998899e-05, 0.01370976713598937, 0.9802436423916577, 0.9905182027146389, 0.9871670800765638, 0.9881133704764439, 0.9821842067460828, 0.9775085917167405, 0.9889546475555188, 0.9777183186975138, 0.9835669217654057, 9.999999999998899e-05, 0.06533778208060159, 0.028147922694655825, 0.014071963134924537, 0.01149689168189394, 0.004036292702594646, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.061956061820289676, 0.05445197303501048, 0.0667108215001172, 0.08247509199085834, 0.07146567975128837, 0.031353181392244966, 0.06633615941195892, 0.031542933994083255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05571601578113772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16550774841510574, 0.14742835929973375, 0.23132227199357525, 0.13802450798678234, 0.09708865527373767, 0.10617176353820956, 0.16422724302691982, 0.1132080420179995, 0.1210557193025883, 0.01716308674449174, 0.03989086222176352, 0.020478995360230012, 0.05273059060232277, 0.009968259200983987, 0.01759993274736349, 9.999999999998899e-05, 0.020492028723380296, 0.0267656688986897, 0.08244743604251903, 0.08609370886951495, 0.07661853069764168, 0.09855305120349966, 0.10852972522114013, 0.07821667645136221, 0.08808199726801991, 0.06064507323521173, 0.07726393575557644, 0.09606267484187503, 0.12110765253116806, 0.14352810184653642, 0.13800672315110074, 0.1541915117378696, 0.1251732805457184, 0.1335354981529394, 0.17377774300845283, 0.12869606392423905, 0.04016590804516795, 0.046101290014585516, 0.07102605027072584, 0.07031183669795793, 0.07081737176175207, 0.07625772905852313, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.14957705714674863, 0.09454710294908619, 0.13345086981233123, 0.10389412019009381, 0.11019910148187717, 0.09307045902971678, 0.12245976138762271, 0.11585629691310717, 0.1261963614278906, 0.14959753707335877, 9.999999999998899e-05, 0.13359270412486568, 0.09078965792300842, 0.1315180997940293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07260338231787022, 0.07466602457976645, 0.08167024703901915, 0.07038338868444083, 0.1375479330179893, 0.06661401029160186, 0.07245568600050101, 0.09643604708838482, 0.10165679149957219, 0.11040265245322212, 0.10051730792859848, 0.06887647220469639, 0.06223279233859591, 0.10895008263572092, 0.10041915992909578, 0.04690376827171172, 0.04019044166964181, 0.04143420019681854, 0.13480174570059533, 0.1756206222394412, 0.14763022729669195, 0.11599487746987158, 0.15537224638669778, 0.15086276197376447, 0.14969714796693134, 0.17019053205632195, 0.14689007985489466, 0.03138452298837602, 0.015916393435176368, 0.03930643151853819, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 0.01926983900476209, 0.020599832598755863]}, "mutation_prompt": null}
{"id": "f09c530b-2c08-4d45-8978-1277ba3486ef", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "51562991-803a-4f2d-907a-39ab5b7b0abd", "solution": "import numpy as np\n\nclass Refined_Adaptive_DE_HS_Mutation:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Refined_Adaptive_DE_HS_Mutation(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Refined_Adaptive_DE_HS_Mutation", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization with refined strategy.", "configspace": "", "generation": 85, "fitness": 0.24421669711710212, "feedback": "The algorithm Refined_Adaptive_DE_HS_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "6c0a9116-a773-4b3c-8d8b-3d4ab8baad07", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "8af42807-5240-4f9c-920e-33504b5d4663", "solution": "import numpy as np\n\nclass Evolving_DH_AR:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def dh_ar_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = dh_ar_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Evolving_DH_AR(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Evolving_DH_AR", "description": "Evolving Differential Harmony with Adaptive Refinement for robust Black Box Optimization in high-dimensional spaces.", "configspace": "", "generation": 87, "fitness": 0.24421669711710212, "feedback": "The algorithm Evolving_DH_AR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "8d4e0081-2c38-40bc-9b67-f69b6eada886", "solution": "import numpy as np\n\nclass Hybrid_Fireworks_Algorithm:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def fireworks_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                leader_idx = np.argmin([np.linalg.norm(ind - target) for ind in population])\n                leader = population[leader_idx]\n\n                for i in range(len(target)):\n                    step_size = np.linalg.norm(target - leader)\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            target[i] += step_size * np.random.uniform(0, 1)\n                        else:\n                            target[i] = leader[i]\n                    if np.random.rand() < self.mw:\n                        target[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        target[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(target)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = fireworks_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Hybrid_Fireworks_Algorithm(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Hybrid_Fireworks_Algorithm", "description": "Introducing Hybrid Fireworks Algorithm with Dynamic Population Size and Adaptive Mutation for Enhanced Black Box Optimization.", "configspace": "", "generation": 88, "fitness": 0.06273539948613596, "feedback": "The algorithm Hybrid_Fireworks_Algorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.107361497885891, 0.07495845572289506, 0.10967506052942266, 0.08952233024927114, 0.08701491218889135, 0.1089510803685414, 0.10205001337078645, 0.09535314487966229, 0.10668686335496425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015172956371030333, 0.03188366481170357, 0.027395479412777646, 0.022277114516258023, 0.010047259597443237, 0.018697680632926872, 0.034376565013399474, 0.01057848634432157, 0.03736221822666519, 0.01399330531769627, 0.03541048087160392, 0.019276835217956978, 0.04351970638001734, 0.0016346384462362362, 0.008450506690046877, 0.006682711417965392, 9.999999999998899e-05, 0.006837564292774045, 0.07572973677505013, 0.05856841005679925, 0.0733808028491989, 0.055936336939501397, 0.056488071101188364, 0.11055710363175131, 0.06537829008042884, 0.05968369023255504, 0.09749885920717116, 0.013029459125393994, 0.008390929647689505, 9.999999999998899e-05, 0.002254629872322722, 0.005647902792396575, 0.04992985953000828, 9.999999999998899e-05, 0.045140248971391905, 9.999999999998899e-05, 0.1464173060597488, 0.10126346826899901, 0.06251896615295205, 0.1308079468998039, 0.06849114773023723, 0.07191564669710604, 0.07860140121220416, 0.10286548847925592, 0.06958049420020906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041346739215941675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018590701013907918, 0.004714620221371257, 0.006882992248438136, 0.01739936044513013, 0.041456485708615265, 0.0416401194345406, 0.033706765518093706, 0.022688972573111643, 0.0306782653587645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014511029264703379, 9.999999999998899e-05, 9.999999999998899e-05, 0.1475879113178864, 0.14911171778990084, 0.1530139148625811, 0.13380131293851116, 0.10387277626488034, 0.1290323935688441, 0.17677257785945766, 0.10328800589773601, 0.13983162385377423, 0.03371002562406522, 0.015074417179687605, 0.00010653864237142319, 0.04055538545424531, 0.02201845570234162, 0.03067432794396241, 0.007423225410476908, 0.04123581301455237, 0.041716254019011245, 0.11578686756288314, 0.13861604622292456, 0.11386254917079863, 0.12393924632923592, 0.12454601704937762, 0.09646497532315879, 0.10986951434389103, 0.10811980211491978, 0.12103391142079123, 0.1278643305521331, 0.1264758099458202, 0.14487612425541208, 0.1503644233115249, 0.13710366391120132, 0.13903396966219495, 0.14868835338054576, 0.2052115143386284, 0.12071126254805498, 0.07479715894753314, 0.08072534036756573, 0.0869958447053053, 0.09453605102089646, 0.08720071366474635, 0.07635221855243357, 0.08760934333424752, 0.12533116587853765, 0.0712113463948355, 0.14238764991659425, 0.11664228454898151, 0.15052454303219054, 0.1442777429686425, 0.12351522368502632, 0.1349346006235972, 0.13065313444179538, 0.12101811180743849, 0.1432850517887584, 0.09100037795155891, 0.01744101875789128, 0.1633195473164547, 9.999999999998899e-05, 0.11397257369421021, 0.10176858286315604, 0.11277318571760186, 0.11989021064555805, 9.999999999998899e-05, 0.10906403715948332, 0.10278426148295405, 0.11616845197716097, 0.10631344358367911, 0.12383540315243158, 0.1062996362617894, 0.09645336124157133, 0.18464825710768584, 0.11338985293768988, 0.1329280289994531, 0.13950597356101102, 0.11821194281179015, 0.0811722693956366, 0.10630863718477535, 0.06822485362435637, 0.0918578162716902, 0.11126667353125086, 0.08414734304512916, 0.17308350930925553, 0.17760554877423562, 0.15640133144300905, 0.17633424813376675, 0.1816035154705552, 0.17829364816754112, 0.18085403704570224, 0.1680580510363321, 0.17493102417144424, 0.023525550398863393, 0.03120293714840283, 0.04570219608800474, 0.038170308803356034, 0.04559387289687056, 0.04226454361592946, 0.048563213104171, 0.02494626975534231, 0.042911379272578265]}, "mutation_prompt": null}
{"id": "79f16f2b-5648-4a29-9eb9-f6de94581ed9", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "8b77454f-2723-4f60-a559-e1e3f1a47201", "solution": "import numpy as np\n\nclass Novel_Metaheuristic_Algorithm:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def novel_metaheuristic_step(population, best_individual):\n            # Insert your novel metaheuristic step here\n            pass\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = novel_metaheuristic_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Novel_Metaheuristic_Algorithm(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Novel_Metaheuristic_Algorithm", "description": "Combining Differential Evolution with Harmony Search and adaptive mutation for efficient black box optimization within a budget constraint.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'NoneType' object is not iterable\").", "error": "TypeError(\"'NoneType' object is not iterable\")", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {}, "mutation_prompt": null}
{"id": "0076fbb2-48ab-4209-a6be-471875ff0318", "solution": "import numpy as np\n\nclass Hybrid_FA_ACS_Optimization:\n    def __init__(self, budget, dim, population_size=50, alpha=0.1, beta=1.5, gamma=0.3, pa=0.25, step_size=0.1, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.pa = pa\n        self.step_size = step_size\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def hybrid_fa_acs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                new_individual = np.zeros_like(target)\n                for i in range(len(target)):\n                    new_individual[i] = target[i] + self.step_size * np.random.randn()  # Firefly movement\n                    if np.random.rand() < self.pa:\n                        cuckoo = target + self.beta * np.random.randn(self.dim)  # Cuckoo search\n                        if func(cuckoo) < func(new_individual):\n                            new_individual = cuckoo\n                    if np.random.rand() < self.mutation_prob:\n                        new_individual[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(new_individual)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = hybrid_fa_acs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Hybrid_FA_ACS_Optimization(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Hybrid_FA_ACS_Optimization", "description": "Introducing a Hybrid Firefly Algorithm with Adaptive Cuckoo Search for Efficient Black Box Optimization", "configspace": "", "generation": 91, "fitness": 0.12524612584251874, "feedback": "The algorithm Hybrid_FA_ACS_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.2183888671136499, 0.18602725270746812, 0.2007466062239761, 0.1907496479932811, 0.18553730411799152, 0.19467262759985027, 0.20389071555315907, 0.20610670897703165, 0.2426147596081183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0408709720260797, 0.06629621351115489, 0.05198237604138034, 0.05401395560947164, 0.04635170218831042, 0.05122535251632876, 0.052104314783818384, 0.057960790723202815, 0.07273388581787821, 0.04357679601587516, 0.03897355795036639, 0.03639967303369818, 0.0554617241394082, 0.03948758788878037, 0.048450105147392786, 0.03786647957000355, 0.03943766274418248, 0.03768790580245529, 0.6737708109863643, 0.6607852517382087, 0.519312292848723, 0.5375802178913767, 0.5939105656837109, 0.6703983120795343, 0.5470998878034998, 0.5756454589906068, 0.5285976258145572, 0.11228200823524803, 0.08344112782560553, 0.08555017430236567, 0.08217166200627057, 0.056626276767017814, 0.07007795481684331, 0.06439394827197686, 0.07852732535493234, 0.07109780491731676, 0.1531726619943622, 0.17137644205368907, 0.1603394936157425, 0.1315312441532409, 0.1510273601944524, 0.12578916685672414, 0.1305497862920485, 0.1557722847680323, 0.13758846116312629, 0.03824792558843182, 0.024183528077288963, 0.059561749045917156, 0.04908344713256807, 0.04279170131662702, 0.0458433009941287, 0.07296625880201901, 0.03278459459272576, 0.057956549538316526, 0.08515009090409786, 0.06745397908216166, 0.05957296143576263, 0.10650505056937054, 0.1023741538010241, 0.10220752163839175, 0.06784874959461595, 0.07973260029083762, 0.09314383956688232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06966730127599674, 0.07633150848607151, 0.13097011022503025, 0.038050609887949616, 0.06106711012150556, 0.04710035928789058, 0.0695530186916723, 0.051765631379627086, 0.07910879173498264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006637108524871982, 0.0010517698953727006, 0.01302080936504868, 0.001523600357630328, 0.0006848784322747159, 0.004359477910529153, 0.004917102308882537, 0.005034058967584909, 0.003251572769311095, 0.22472996193435701, 0.2427558853609595, 0.24582910226139398, 0.18599221653872833, 0.1821999371973234, 0.22307698588523373, 0.24004193701863918, 0.21889102198641752, 0.22979924330054302, 0.044109698195758384, 0.04439191409511967, 0.060596097098677304, 0.06726504692751534, 0.04796516209243784, 0.057106227553515576, 0.053966435747667685, 0.08619976324549283, 0.0675456789115838, 0.15373671306371928, 0.15466251895162697, 0.1340387642666343, 0.1427750540576067, 0.14284742584374943, 0.13918074635698774, 0.15661094026729716, 0.13807262140117293, 0.14502467617351544, 0.16443923983314057, 0.16026196310221097, 0.21002133296947167, 0.17288252806455462, 0.1818408841967909, 0.1701976058391772, 0.16930708784281612, 0.18594417974646893, 0.16815588354343325, 0.10989894882025164, 0.10110145061177933, 0.11782789188938025, 0.13239413285304458, 0.12844841396290085, 0.11084286803607324, 0.1166997759974685, 0.14240340656757378, 0.09418676322741226, 0.23031997477316546, 0.17777124954201828, 0.18936721691452363, 0.21863411942668687, 0.19194176414644126, 0.2374237528315174, 0.26499812628007247, 0.2124178163228737, 0.23334359704180518, 0.14196661538969546, 0.15953736576341848, 0.13746805897027792, 0.15580328368975094, 0.16021245429325304, 0.14644740666474776, 0.14656715494242512, 0.13705116486522662, 0.13407025954489982, 0.20061027583628488, 0.1737827631694614, 0.2593107206962053, 0.16290798462218425, 0.19956470091457068, 0.15369493369920617, 0.20752199983976727, 0.1446158305064148, 0.18808342603203698, 0.16454975625440327, 0.19742828688744374, 0.1980929242746231, 0.1650165427143464, 0.15704955520971542, 0.18973316968970022, 0.12032538156111972, 0.19339331929578718, 0.16132855241267663, 0.17871496334901749, 0.1886912775214018, 0.18017443653157283, 0.1742798950290524, 0.1747841370421429, 0.18307325728326695, 0.19677673810712548, 0.17917512796797397, 0.18451906224710746, 0.06395775455437946, 0.05961563950325566, 0.05537771575356887, 0.05503874651674612, 0.05788514029428948, 0.07032492176792571, 0.05838780483569994, 0.077201808061643, 0.05433314333822059]}, "mutation_prompt": null}
{"id": "fae6ee87-904c-4418-bb4d-6177d46bf406", "solution": "import numpy as np\n\nclass Adaptive_Evo_Multi_Strategy:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, diversity_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.diversity_rate = diversity_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def evo_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.diversity_rate:\n                        trial[i] += np.random.uniform(-1, 1)  # Enhancing diversity\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = evo_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_Evo_Multi_Strategy(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_Evo_Multi_Strategy", "description": "Introducing a Novel Adaptive Evolutionary Algorithm with Multi-Strategy Diversity Enhancement for Black Box Optimization", "configspace": "", "generation": 92, "fitness": 0.13789434540092127, "feedback": "The algorithm Adaptive_Evo_Multi_Strategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.37802176912710195, 0.3356018723246721, 0.372756549617287, 0.2699354728272567, 0.29638093355192063, 0.30179758338191187, 0.320933564909303, 0.37761719272279537, 0.3568186557810008, 0.04129924123244544, 0.025612635432603947, 0.007373724068942322, 0.0664363899291035, 0.048989070670496626, 0.0446555306201486, 0.0007588169807151157, 0.016381599496601673, 9.999999999998899e-05, 0.06923837032458013, 0.07354976794515167, 0.06427590322356025, 0.09480705845899084, 0.08087935551219216, 0.08964067430930411, 0.09116729335340878, 0.05332720355443421, 0.08766162451653292, 0.0732793792869928, 0.05392001482416886, 0.05479971074587142, 0.08524771969574962, 0.05222734532737705, 0.057780822943383825, 0.07034591386685896, 0.05014372239903553, 0.058251570875799685, 0.2851469549701512, 0.22632256661589634, 0.23731644878777114, 0.10978914046784793, 0.16902455811768102, 0.26327439498536054, 0.2303621882030199, 0.16805393429219462, 0.19931287328666047, 0.095302850665277, 0.07848691791486362, 0.0810205739707146, 0.1252726595420789, 0.10256112743975643, 0.13488991676241435, 0.07743690959339489, 0.11283106759760453, 0.061920927525536906, 0.16682007366614726, 0.17056297234698592, 0.16331872212343113, 0.24290417269731357, 0.21822759582176365, 0.15647648011047421, 0.13459987466093792, 0.1441839890072042, 0.16900388532523025, 0.11086100489918849, 0.043485544884869665, 0.09435287251170843, 0.1245251952982187, 0.08229105609737819, 0.11506077809937065, 0.14260541647533986, 0.0950441993448854, 0.15122760474802122, 0.15229630889706425, 0.13087123559813096, 0.13313134869228926, 0.11862462951867658, 0.15839749477368092, 0.12298930334631042, 0.15896732949738812, 0.13584335812552784, 0.13821617095826555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032610803119050846, 0.13512923472282656, 0.06825836771332128, 0.1115170074667019, 0.037579900353876816, 0.04236484229389792, 0.05064970639295008, 0.12851238398627174, 0.1027935496413871, 0.1029709302808326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0268622514362169, 0.025188501799888074, 0.020538069312520224, 0.028245951846688322, 0.0430103409654059, 0.08263362507720307, 0.06868514239542123, 0.03472559395300667, 0.028449613407591445, 0.3394530330807273, 0.36842710781000265, 0.35853363751771317, 0.3237111395576481, 0.302929389818578, 0.2708424114664453, 0.35938961136418046, 0.38082738631475177, 0.42233841003720984, 0.0228320098849506, 0.03528120622121422, 0.016564377919113027, 0.05975942836935688, 0.07861884580640977, 0.06852980506670847, 0.07880810393274607, 0.06482892120376926, 0.0719134402619871, 0.21787451541379832, 0.20854334165060995, 0.13996496171680484, 0.14115381202580646, 0.15396149702458484, 0.15035435814024656, 0.14465328867191352, 0.16917879990540463, 0.13689640713862794, 0.15133542342632134, 0.18096386443551615, 0.17069745730508823, 0.22013768094895525, 0.21911399432279188, 0.19197482322880077, 0.15605567382604035, 0.22602700077385274, 0.12620804207634428, 0.10793399682185523, 0.14094662685852632, 0.09030880447450329, 0.19170105574503882, 0.17396186292725002, 0.18285718330287293, 0.1257538363950631, 0.18997126979049106, 0.08013021332794401, 0.22671883058375775, 0.2472652640931099, 0.21045534985227066, 0.22857982655151965, 0.2274939642266408, 0.21107703770415953, 0.21475801277430118, 0.21791551907549234, 0.21599365092478007, 0.16702310508958051, 0.18404063761311296, 0.17065574618764445, 0.16732599772685264, 0.17093692655731008, 0.1715729905007254, 0.1686015432069662, 0.18351495338798485, 0.16310275553005282, 0.18347403831771303, 0.18531825725864026, 0.1824577293526356, 0.24708450672921212, 0.1656543916021943, 0.29244980037450397, 0.2568211035576652, 0.27523673291073203, 0.14470179672318662, 0.21157532336714402, 0.27417454381075734, 0.19194890446010837, 0.1383689430999675, 0.1524980340544877, 0.21168915736629024, 0.13139351086993356, 0.14013922390672684, 0.14813452886889644, 0.19162622807740226, 0.20802404956277554, 0.2001477030315515, 0.19408463636997997, 0.19486108532262392, 0.19717412846843496, 0.18336643569517241, 0.19686691725288008, 0.19814134414089968, 0.07273026984429765, 0.08699523734544201, 0.0757647959989316, 0.07753647291471366, 0.08122136202372421, 0.11078930638096574, 0.07230833435946404, 0.07315969482093465, 0.07967513400354287]}, "mutation_prompt": null}
{"id": "bbb2e9bd-912d-4da0-972e-975880b0161a", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement_Refined:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                    # Refinement step\n                    if np.random.rand() < 0.3:\n                        trial[i] += np.random.uniform(-0.1, 0.1)\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement_Refined(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement_Refined", "description": "Combining Differential Evolution and Harmony Search with adaptive mutation and refinement for versatile black box optimization.", "configspace": "", "generation": 93, "fitness": 0.22527232260755206, "feedback": "The algorithm Adaptive_DE_HS_Mutation_Refinement_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.49289285258893956, 0.48086780899860393, 0.5176428637962238, 0.5052641451446473, 0.5201657686934462, 0.5058664123717747, 0.5141885465944567, 0.5140758128401111, 0.4874477389424574, 0.1849413655378347, 0.19933917474070018, 0.19645754557629902, 0.2122375825124554, 0.1808177239193255, 0.19637508691426264, 0.21054187712105155, 0.25969329440509614, 0.23007990473828344, 0.12234845175618647, 0.2156649176849521, 0.15054376133206604, 0.16985369094260117, 0.2308660252478637, 0.22006002604369024, 0.1594583103610714, 0.21737343711194967, 0.1972456173482504, 0.13341160417181963, 0.15431725424573983, 0.13873311893857376, 0.133082345652912, 0.13335537633859806, 0.1726121378726191, 0.14799404281876483, 0.18669404186458716, 0.14150766597683084, 0.86230600407372, 0.8758543259602094, 0.8792487584865295, 0.9287325620646889, 0.9224871837759899, 0.8492762570570206, 0.901360268857196, 0.9081681063275351, 0.8729973545762063, 0.19686414347557446, 0.23510537757639993, 0.30852979037757133, 0.2723934766484395, 0.31506241706824745, 0.2782671576955391, 0.2897865767854104, 0.2343747040372135, 0.21583676778292749, 0.2622909355395242, 0.216690662606698, 0.1652879608212926, 0.19083204721127311, 0.2649259942051815, 0.2706537457372872, 0.22632555516555952, 0.23761669267839403, 0.2286332969464524, 0.19082141226047022, 0.17768179456589717, 0.19177755222318105, 0.14633172544197637, 0.1756185926122351, 0.14806154153586193, 0.2529848519851884, 0.20278225345341905, 0.16245302064650935, 0.12520722357353786, 0.14759547411592633, 0.2085487268350299, 0.12476665204928972, 0.17534012265692267, 0.1431141005231873, 0.13089851881902037, 0.15413323962147663, 0.02579899482244874, 9.999999999998899e-05, 9.999999999998899e-05, 0.04198761603235035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023034274258561305, 9.999999999998899e-05, 9.999999999998899e-05, 0.07195237774540508, 0.0338542194575282, 0.06339522569627931, 0.06872446573351931, 0.03604840076562954, 0.016883641168381813, 0.17554636873284635, 0.09414805614340804, 0.04296675138423256, 0.007810013091446355, 0.04203595833520557, 0.028052973384765978, 0.0031169623624729415, 0.0031822338672796713, 0.00648840623325142, 0.012423289900766799, 0.00259129262599056, 9.999999999998899e-05, 0.1525832433518033, 0.10654208853156599, 0.09749635986839145, 0.12343835261840741, 0.0769828277000768, 0.12229409726265672, 0.13219672061859178, 0.07501334582702135, 0.03793955888376099, 0.47947589761741694, 0.4267057975546128, 0.4230561296572646, 0.46626833765012365, 0.4206179092907082, 0.41953232530301543, 0.45720185350918086, 0.4254308002743902, 0.4323441611198007, 0.09819216235049044, 0.16500733902279696, 0.11427096118754776, 0.07612161098046, 0.12723181932131278, 0.1296075723757143, 0.15755533019910584, 0.0936664546535334, 0.09325514571331628, 0.17946707734351053, 0.21331082378887234, 0.19632137162255225, 0.23132872376651192, 0.27211270092803086, 0.18982554104898397, 0.2448076524599222, 0.19844933310202328, 0.19437898480527127, 0.3357918871204447, 0.2741381287261031, 0.3112978178846826, 0.32968353216097124, 0.23309389637704092, 0.3238370411331951, 0.3191640962184267, 0.32893207149404435, 0.23376325893965855, 0.19040087874379608, 0.2195776889150265, 0.18964641379633862, 0.18439672293542841, 0.17215035622396713, 0.2538550631598492, 0.2372204665351112, 0.24517604583914931, 0.1898650751185329, 0.21543940367114778, 0.19311990926711964, 0.19695188216182857, 0.21612245825521847, 0.2003336356438271, 0.1872124143426247, 0.2079717830717701, 0.204169011546108, 0.24022558883884682, 0.2237230775816219, 0.22591121336077946, 0.2067449076949348, 0.20708131908169458, 0.20821197247676104, 0.19901616661739918, 0.3632086034208146, 0.2179142436239052, 0.24598167252993164, 0.18534198518150502, 0.17022987824004632, 0.15099222188552708, 0.7335881040781009, 0.19891295797712516, 0.16868690624570226, 0.12155833298378638, 0.16802640021530701, 0.5895794904349433, 0.40228032368375033, 0.15596138081160693, 0.3107356527739519, 0.20461147305862937, 0.16546948912115944, 0.20289703345214616, 0.1042302380874135, 0.10391206188848989, 0.27903926678988733, 0.17252828356200667, 0.19820862904106484, 0.17357829215686738, 0.18432236395784773, 0.18695105245587307, 0.18286956053769088, 0.17876562158982912, 0.17198122278316819, 0.1787881409306874, 0.07628146751609033, 0.08052027863472555, 0.07701617713953068, 0.08386687388032621, 0.0777141736507041, 0.07663919379615214, 0.08458311547139796, 0.08682469091078782, 0.0870854531465477]}, "mutation_prompt": null}
{"id": "af4eb48b-377f-4e0d-8b06-7bd131aed737", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement_Improved(Adaptive_DE_HS_Mutation_Refinement):\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3, refinement_prob=0.3):\n        super().__init__(budget, dim, population_size, f, cr, hmcr, par, mw, mutation_prob)\n        self.refinement_prob = refinement_prob\n\n    def __call__(self, func):\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                    if np.random.rand() < self.refinement_prob:\n                        trial[i] += np.random.uniform(-0.1, 0.1)  # Refinement of strategy\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual", "name": "Adaptive_DE_HS_Mutation_Refinement_Improved", "description": "Incorporating Adaptive Mutation and Refinement to enhance Differential Evolution with Harmony Search for versatile Black Box Optimization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {}, "mutation_prompt": null}
{"id": "e2a6990a-e0ea-4eb9-9ffa-e95241900914", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "42748c2a-22c2-48bf-9cb0-067897185a99", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "646ca234-ee4e-4710-be91-89e67a230991", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
{"id": "122aeb3b-7944-4e0e-8d5d-ebeddd13fc2f", "solution": "import numpy as np\n\nclass Hybrid_PSO_GA_Optimization:\n    def __init__(self, budget, dim, population_size=30, c1=2.0, c2=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.c1 = c1\n        self.c2 = c2\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest):\n            new_velocity = velocity + self.c1 * np.random.rand() * (pbest - position) + self.c2 * np.random.rand() * (gbest - position)\n            return new_velocity\n\n        def mutate(individual):\n            for i in range(len(individual)):\n                if np.random.rand() < self.mutation_rate:\n                    individual[i] += np.random.uniform(-1, 1)\n            return individual\n\n        population = initialize_population()\n        velocities = np.zeros_like(population)\n        pbest = population.copy()\n        gbest = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            for idx, individual in enumerate(population):\n                if remaining_budget <= 0:\n                    break\n                velocities[idx] = update_velocity(individual, velocities[idx], pbest[idx], gbest)\n                new_individual = individual + velocities[idx]\n                new_individual = mutate(new_individual)\n                new_fitness = func(new_individual)\n\n                if new_fitness < func(individual):\n                    population[idx] = new_individual\n                    if new_fitness < func(pbest[idx]):\n                        pbest[idx] = new_individual\n                        if new_fitness < func(gbest):\n                            gbest = new_individual\n                remaining_budget -= 1\n\n        return gbest\n\n# Example usage:\n# optimizer = Hybrid_PSO_GA_Optimization(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Hybrid_PSO_GA_Optimization", "description": "Hybridizing Particle Swarm Optimization with Genetic Algorithm for effective Black Box Optimization.", "configspace": "", "generation": 98, "fitness": 0.11369646964046665, "feedback": "The algorithm Hybrid_PSO_GA_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.24940447591489057, 0.13201533995036518, 0.2649991064932383, 0.20647431596540644, 0.16702263353214675, 0.20987791134146594, 0.19350462751377784, 0.13025422946972975, 0.12373870017454447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042452607083483085, 0.02464596038967759, 0.030253417908206237, 0.042763712209432425, 0.030329887206876793, 0.03395942429048393, 0.019314862071468264, 0.027187907881934037, 0.05038055388172291, 0.026399187753405884, 0.042758809657733265, 0.05289154361242432, 0.06748918577350926, 0.03623055685253951, 0.03724141788634572, 0.04295872538818135, 0.012676757795682891, 0.012818822628143378, 0.9857416699043887, 0.9967343037816702, 0.9915985491368583, 0.958987770191494, 0.9865443972965198, 0.9701782857243382, 0.9865401253134611, 0.9897188769949142, 0.990279687902448, 0.07503429541492879, 0.06718725211468612, 0.031386485854249635, 0.08780141161224442, 0.01307526272293058, 0.08247380534586868, 9.999999999998899e-05, 0.03373434651166951, 9.999999999998899e-05, 0.15472252425795685, 0.09063999153320002, 0.14684786804846484, 0.12078161694397627, 0.09727229535135173, 0.13251203111469279, 0.0800314903781526, 0.11254863367886592, 0.08654987119729285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009163150568312073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03678529183939605, 9.999999999998899e-05, 9.999999999998899e-05, 0.09617801591622033, 0.053810565245546615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015383628030375407, 0.006075258682408657, 0.06091624687307917, 0.04714341815847134, 9.999999999998899e-05, 9.999999999998899e-05, 0.006819492427489249, 9.999999999998899e-05, 0.027967703717376224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.25401669527536175, 0.18008015658021126, 0.3312450831107907, 0.1253326182665485, 0.1743812856870105, 0.12436747045520502, 0.26525315619495726, 0.15698402131145017, 0.202949064463962, 0.03671457545986068, 0.06341332742397277, 0.010485258448628132, 0.03604675288227244, 0.04963223876402967, 0.04925559606829211, 0.019990975822346768, 0.02959169629046754, 0.04442939481406882, 0.07573023313669114, 0.1384894288696874, 0.11068097233123331, 0.12105022141428179, 0.15778035743569596, 0.11520915721662983, 0.10975345147640203, 0.08273567475800825, 0.08872980211104675, 0.13604395343881948, 0.19440416279548212, 0.14478402558722503, 0.18412871597188862, 0.15618649929369544, 0.16063933763756633, 0.14134945172137958, 0.1838491286143492, 0.13936364733451334, 0.04657558634075709, 0.039621289768188905, 0.07531958937493777, 0.09021648068230281, 0.12627014738233577, 0.14782573251065556, 0.08901243661733838, 0.10396990338185164, 0.08595784372260584, 0.18620624279846665, 0.12149633224237766, 0.13345086981233123, 0.14438916464552076, 0.1319139856295285, 0.12030512570898177, 0.12416619150152441, 0.13071632720252913, 0.13092398872461142, 0.14838204277733658, 0.15040866868423786, 0.15850403954607462, 0.14543510379965863, 0.14282512448256568, 0.1487353368334956, 0.16205389733909958, 0.14688571293597485, 0.047785791717066206, 0.10689248124650608, 0.11875434940352092, 0.09879047383086104, 0.22360044058140283, 0.16799120220351238, 0.15443627766828627, 0.0875240897472439, 0.11877202065826586, 0.11075759155830944, 0.16825973206127076, 0.12641643587860274, 0.07196060729474141, 0.10858874173392963, 0.1378139578374974, 0.08971159043939347, 0.08370208763369502, 0.04885519517990211, 0.08506769288059479, 0.14820715051272804, 0.128372137474824, 0.14763022729669195, 0.14641101050901684, 0.14033747877411384, 0.1452841713219053, 0.15029880981164334, 0.1447598253815079, 0.15264547425248987, 0.023741100335420873, 0.03876290441039132, 0.041919992560485286, 0.03698197329555497, 0.06289344495834137, 0.04016623404806141, 0.03418355514712912, 0.0297095107074834, 0.03294189389430868]}, "mutation_prompt": null}
{"id": "48b43692-5cb0-4d5c-a4db-79c9792498e6", "solution": "import numpy as np\n\nclass Adaptive_DE_HS_Mutation_Refinement:\n    def __init__(self, budget, dim, population_size=30, f=0.5, cr=0.9, hmcr=0.7, par=0.4, mw=0.2, mutation_prob=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.f = f\n        self.cr = cr\n        self.hmcr = hmcr\n        self.par = par\n        self.mw = mw\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def de_hs_step(population, best_individual):\n            new_population = []\n            for idx, target in enumerate(population):\n                mutant = target + self.f * (population[np.random.randint(0, self.population_size)] - target)\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_points, mutant, target)\n\n                for i in range(len(target)):\n                    if np.random.rand() < self.hmcr:\n                        if np.random.rand() < self.par:\n                            trial[i] = best_individual[i]\n                        else:\n                            idx = np.random.choice(self.population_size)\n                            trial[i] = population[idx][i]\n                    if np.random.rand() < self.mw:\n                        trial[i] += np.random.uniform(-1, 1)\n                    if np.random.rand() < self.mutation_prob:\n                        trial[i] += np.random.normal(0, 0.1)  # Adaptive mutation\n                new_population.append(trial)\n            return np.array(new_population)\n\n        population = initialize_population()\n        best_individual = population[np.argmin([func(ind) for ind in population])]\n        remaining_budget = self.budget - self.population_size\n\n        while remaining_budget > 0:\n            new_population = de_hs_step(population, best_individual)\n            for idx, individual in enumerate(new_population):\n                if remaining_budget <= 0:\n                    break\n                new_fitness = func(individual)\n                if new_fitness < func(population[idx]):\n                    population[idx] = individual\n                    if new_fitness < func(best_individual):\n                        best_individual = individual\n                remaining_budget -= 1\n\n        return best_individual\n\n# Example usage:\n# optimizer = Adaptive_DE_HS_Mutation_Refinement(budget=1000, dim=10)\n# result = optimizer(lambda x: np.sum(x**2))  # Optimize the sphere function", "name": "Adaptive_DE_HS_Mutation_Refinement", "description": "Enhancing Differential Evolution with Harmony Search by introducing Adaptive Mutation and Refinement for versatile Black Box Optimization.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97e09837-d6b0-4a03-8f29-751f4a7f5d5d", "metadata": {"aucs": [0.5711098132608756, 0.6038852216395677, 0.562299482053348, 0.5543342368476611, 0.5959095312096083, 0.6295051427534624, 0.5742563927506772, 0.6123670393764735, 0.5966552489861336, 0.2545393715975828, 0.24352644896836462, 0.3148385312915559, 0.27844187394536835, 0.2445510876801673, 0.30796381480262947, 0.2615094098083841, 0.21650342960523428, 0.27035307756490634, 0.20090452112650592, 0.2691021468588076, 0.27706717218106536, 0.25435943148634976, 0.22441516704548492, 0.3000113409728028, 0.2425600141361861, 0.22152400646766668, 0.2041635415614763, 0.15486188446784488, 0.212373178401273, 0.17951572334541455, 0.16538494082079291, 0.15064120316127116, 0.13586811630515894, 0.18307337367435317, 0.16370611366530718, 0.14353238137257718, 0.8432260061386367, 0.8602058251600948, 0.8984081917505096, 0.8809414840098377, 0.8597636572244565, 0.9128987961191167, 0.854731743588781, 0.883418048035191, 0.8512057428450308, 0.2757340730508612, 0.1912676309859901, 0.2271512097542121, 0.22635660665863455, 0.3260995888221825, 0.29780960805198864, 0.28063501895311915, 0.17523295119152604, 0.2611941594908661, 0.3455404372500609, 0.14507283814574257, 0.22389730398112428, 0.2733831352044723, 0.2001206588139699, 0.6706511258354391, 0.1626256677394986, 0.19326423677601212, 0.2106986722899633, 0.21003009184883248, 0.18194521864204694, 0.14274351416319297, 0.2427423242257407, 0.14686531252642676, 0.171856287043456, 0.2598110653736727, 0.10810044301730282, 0.1466390843582761, 0.1698179383039815, 0.21013614873998754, 0.13392686113596153, 0.1278923761099321, 0.14319744805660106, 0.15275575113119322, 0.14012812261806884, 0.04263676645493231, 0.17545555978817484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007278036323105752, 0.012424934363763573, 9.999999999998899e-05, 0.002718136028093232, 0.002348840171913391, 9.999999999998899e-05, 0.11335087581684966, 0.09173817381709903, 0.06749136510107123, 0.04928693449528998, 0.014320840399657975, 0.03812848963340765, 0.18535772601503386, 0.06897032432211347, 0.040709194816942906, 0.06168830486629451, 0.07728323945577864, 0.07038849979021777, 0.048350110898244036, 0.07454822452883858, 0.05293960559925104, 0.0922227994049144, 0.06799207886112146, 0.0423193257650224, 0.13718457389636773, 0.10615207860301257, 0.14248452535551082, 0.04413100842497186, 0.16518010315254583, 0.07984442082262189, 0.07060463132122985, 0.07437335147946411, 0.09666322656265458, 0.4478704319963802, 0.4253909510193332, 0.4728119373686608, 0.43160328938065073, 0.46189165387046227, 0.4274375621233929, 0.48250959272157934, 0.4577022767696757, 0.44502635101288057, 0.08938172110872311, 0.08869170469398924, 0.14907394018345277, 0.15581337940545148, 0.10545755072966656, 0.11143946182176534, 0.11147931647354581, 0.11259726311383944, 0.11380965399113085, 0.24937674778557561, 0.1438529921447954, 0.3109420897726114, 0.2604894489826307, 0.2697169719735272, 0.19809122347743102, 0.17585727009548702, 0.18510485768651008, 0.20633909658917082, 0.22155706416290188, 0.3392183125591298, 0.2860680705140656, 0.28737155832407457, 0.2388861454499024, 0.32310241611848256, 0.2570062591135934, 0.3542936019370627, 0.33842431808131057, 0.2031165446408385, 0.23442103431083805, 0.26577930420930684, 0.20842297465829618, 0.18937313341485473, 0.23465657334664092, 0.21792558284995023, 0.2718028577334226, 0.1983146784002816, 0.19981293972190584, 0.190538241893909, 0.20010810886203712, 0.21094130074959272, 0.20956273235121958, 0.2040897172863525, 0.28080175597032453, 0.22196698982022856, 0.21992600303579446, 0.2137996071973539, 0.20438431759383657, 0.18190632668709517, 0.22733050608771788, 0.1905509836146705, 0.19236761123339008, 0.20505914018879978, 0.20533229956369048, 0.21319824655925235, 0.7820136175824938, 0.18569426377192755, 0.11276785976781634, 0.8170392515329163, 0.19847410640443586, 0.16836327254980787, 0.5888070483794625, 0.16724066507433055, 0.8307228328677586, 0.42221143160749486, 0.15626689962978668, 0.2958785507352283, 0.16549576401108912, 0.1667590961766231, 0.2899328600112676, 0.10373756778947352, 0.1600472368193563, 0.28757447021058746, 0.1826525657062562, 0.17305230673087413, 0.16991404077413352, 0.16930791403319423, 0.16773616866439733, 0.2070510845405633, 0.17648175766683127, 0.18818327744628938, 0.17484165102674742, 0.07585560333657704, 0.0834405263093062, 0.08826835188448312, 0.07657429981562158, 0.08102167684684025, 0.07164801429785317, 0.0742479203588211, 0.0818727444273154, 0.0656517612818096]}, "mutation_prompt": null}
