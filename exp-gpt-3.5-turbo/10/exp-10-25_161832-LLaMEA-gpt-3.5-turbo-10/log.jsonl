{"id": "d6d2c467-7db1-4fd9-a4ca-e142a357c632", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            if func(new_solution) < func(harmony_memory[0]):\n                harmony_memory[0] = new_solution\n\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search algorithm that combines random selection and memory consideration for global optimization.", "configspace": "", "generation": 0, "fitness": 0.08325400454631435, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.14224224778407568, 0.16067727675113985, 0.16543562178990123, 0.17456377089222608, 0.15683120574913223, 0.17756777430092785, 0.15143215496479223, 0.17221509216496667, 0.17522400878177813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04377031880947635, 0.045007970544214015, 0.04985792033215852, 0.029995136926392996, 0.04249639006794115, 0.041084735588965304, 0.036434552387291985, 0.035708370390572286, 0.034084794657727624, 0.023758504559327043, 0.043422010001889944, 0.028841220389542288, 0.04612397095035625, 0.025703335655897663, 0.029216111337948658, 0.025171209542179218, 0.02661541706992432, 0.024031440640866264, 0.06661362043164276, 0.08017717798277624, 0.07442847575008804, 0.06486483752844852, 0.07695054492847486, 0.0766064567563508, 0.06666549330632932, 0.07720450934252554, 0.07201037479017525, 0.09628437413442004, 0.08743859475513471, 0.06796520980436704, 0.06252615830081598, 0.06643959409216371, 0.05381541610452911, 0.09071773223136748, 0.07199981930695198, 0.06844790528647082, 0.10924073878618978, 0.10204439542930377, 0.11588041015650874, 0.11894686097690044, 0.09227717355921339, 0.11171521203194135, 0.10977260308072656, 0.10721474735349457, 0.12654502882575125, 0.0023973576850390144, 0.003966668514964633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013959559764212814, 9.999999999998899e-05, 0.026983585620174888, 0.00018991700203019324, 0.0019028920136686667, 0.012708388006093418, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629400810753845, 9.999999999998899e-05, 0.015591106495777218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018295615581722435, 0.0365650764559754, 0.05539015888756693, 0.03476721979023045, 0.02199022035030307, 0.020363035667502638, 0.05035134339122138, 0.03279917193240689, 0.02257381503822775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004368768907047738, 9.999999999998899e-05, 9.999999999998899e-05, 0.17861795116435364, 0.18254348392706732, 0.17175132537893478, 0.1800434502369902, 0.21007517926278196, 0.18078571979632452, 0.17705497596115383, 0.1927627564922495, 0.2018984922487591, 0.03633364965426267, 0.06351564711418001, 0.0522782352766169, 0.06739087874190186, 0.05341785799533749, 0.054924669906268764, 0.041303417380691654, 0.05013109364939172, 0.04434704120751087, 0.13105233504756397, 0.12969684570181073, 0.12703468894278214, 0.12616618733624696, 0.13026775257918966, 0.12222882261154389, 0.12219637817132456, 0.1323610897674593, 0.12983598021655196, 0.16792830822983285, 0.15192959462489486, 0.1516197059934813, 0.15219026980578565, 0.15778008860588544, 0.16104022499076387, 0.1647078980618829, 0.1566627584367578, 0.15971554067232896, 0.10830852685751324, 0.09659451727686086, 0.10290545173885168, 0.10631865215887648, 0.11189674792269455, 0.10466594955270447, 0.10992460853099384, 0.11926609508024943, 0.09373562616749587, 0.1463001788600059, 0.15366814958414265, 0.15366824920799316, 0.14888146424685544, 0.14604967287205473, 0.16321960697825122, 0.14694286737357176, 0.14437185159010246, 0.16944750165781097, 0.10602675471953515, 0.12956392658117344, 0.13370574231393406, 0.1275883246127032, 0.1277101550215044, 0.13559835862947944, 0.1386520066343021, 0.14099274671165496, 0.1309127003903786, 0.13488685184836835, 0.1426357209732536, 0.15869670123857027, 0.18214626816997315, 0.16723249667241158, 0.2157999474066975, 0.14702054698010214, 0.16259439378563456, 0.144140905295001, 0.17105689350737452, 0.1659766261937886, 0.1177863670940702, 0.23949351686594278, 0.1946325897319745, 0.15516052142955572, 0.13341616363109587, 0.14439863208365966, 0.11226735111598662, 0.18164228643735092, 0.1774035210423608, 0.18738798592445782, 0.18386983146131508, 0.17180887366968778, 0.17697971362718345, 0.19283069952813559, 0.17922173591848145, 0.17474843406749618, 0.043765971204897114, 0.05018818192188523, 0.04197986822568511, 0.05260790372597257, 0.05548334024599566, 0.05094884789611964, 0.05409270225128626, 0.05043869174623883, 0.05201683713474814]}, "mutation_prompt": null}
{"id": "581c5a96-33df-46c8-84c6-7ec64e705117", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            if func(new_solution) < func(harmony_memory[0]):\n                harmony_memory[0] = new_solution\n\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search algorithm that combines random selection and memory consideration for global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6d2c467-7db1-4fd9-a4ca-e142a357c632", "metadata": {"aucs": [0.14224224778407568, 0.16067727675113985, 0.16543562178990123, 0.17456377089222608, 0.15683120574913223, 0.17756777430092785, 0.15143215496479223, 0.17221509216496667, 0.17522400878177813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04377031880947635, 0.045007970544214015, 0.04985792033215852, 0.029995136926392996, 0.04249639006794115, 0.041084735588965304, 0.036434552387291985, 0.035708370390572286, 0.034084794657727624, 0.023758504559327043, 0.043422010001889944, 0.028841220389542288, 0.04612397095035625, 0.025703335655897663, 0.029216111337948658, 0.025171209542179218, 0.02661541706992432, 0.024031440640866264, 0.06661362043164276, 0.08017717798277624, 0.07442847575008804, 0.06486483752844852, 0.07695054492847486, 0.0766064567563508, 0.06666549330632932, 0.07720450934252554, 0.07201037479017525, 0.09628437413442004, 0.08743859475513471, 0.06796520980436704, 0.06252615830081598, 0.06643959409216371, 0.05381541610452911, 0.09071773223136748, 0.07199981930695198, 0.06844790528647082, 0.10924073878618978, 0.10204439542930377, 0.11588041015650874, 0.11894686097690044, 0.09227717355921339, 0.11171521203194135, 0.10977260308072656, 0.10721474735349457, 0.12654502882575125, 0.0023973576850390144, 0.003966668514964633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013959559764212814, 9.999999999998899e-05, 0.026983585620174888, 0.00018991700203019324, 0.0019028920136686667, 0.012708388006093418, 9.999999999998899e-05, 9.999999999998899e-05, 0.01629400810753845, 9.999999999998899e-05, 0.015591106495777218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018295615581722435, 0.0365650764559754, 0.05539015888756693, 0.03476721979023045, 0.02199022035030307, 0.020363035667502638, 0.05035134339122138, 0.03279917193240689, 0.02257381503822775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004368768907047738, 9.999999999998899e-05, 9.999999999998899e-05, 0.17861795116435364, 0.18254348392706732, 0.17175132537893478, 0.1800434502369902, 0.21007517926278196, 0.18078571979632452, 0.17705497596115383, 0.1927627564922495, 0.2018984922487591, 0.03633364965426267, 0.06351564711418001, 0.0522782352766169, 0.06739087874190186, 0.05341785799533749, 0.054924669906268764, 0.041303417380691654, 0.05013109364939172, 0.04434704120751087, 0.13105233504756397, 0.12969684570181073, 0.12703468894278214, 0.12616618733624696, 0.13026775257918966, 0.12222882261154389, 0.12219637817132456, 0.1323610897674593, 0.12983598021655196, 0.16792830822983285, 0.15192959462489486, 0.1516197059934813, 0.15219026980578565, 0.15778008860588544, 0.16104022499076387, 0.1647078980618829, 0.1566627584367578, 0.15971554067232896, 0.10830852685751324, 0.09659451727686086, 0.10290545173885168, 0.10631865215887648, 0.11189674792269455, 0.10466594955270447, 0.10992460853099384, 0.11926609508024943, 0.09373562616749587, 0.1463001788600059, 0.15366814958414265, 0.15366824920799316, 0.14888146424685544, 0.14604967287205473, 0.16321960697825122, 0.14694286737357176, 0.14437185159010246, 0.16944750165781097, 0.10602675471953515, 0.12956392658117344, 0.13370574231393406, 0.1275883246127032, 0.1277101550215044, 0.13559835862947944, 0.1386520066343021, 0.14099274671165496, 0.1309127003903786, 0.13488685184836835, 0.1426357209732536, 0.15869670123857027, 0.18214626816997315, 0.16723249667241158, 0.2157999474066975, 0.14702054698010214, 0.16259439378563456, 0.144140905295001, 0.17105689350737452, 0.1659766261937886, 0.1177863670940702, 0.23949351686594278, 0.1946325897319745, 0.15516052142955572, 0.13341616363109587, 0.14439863208365966, 0.11226735111598662, 0.18164228643735092, 0.1774035210423608, 0.18738798592445782, 0.18386983146131508, 0.17180887366968778, 0.17697971362718345, 0.19283069952813559, 0.17922173591848145, 0.17474843406749618, 0.043765971204897114, 0.05018818192188523, 0.04197986822568511, 0.05260790372597257, 0.05548334024599566, 0.05094884789611964, 0.05409270225128626, 0.05043869174623883, 0.05201683713474814]}, "mutation_prompt": null}
{"id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm DiversityEnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d6d2c467-7db1-4fd9-a4ca-e142a357c632", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3a8f064d-1ceb-4519-9773-fa35809f2374", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6b1ab47d-8ae6-4198-bbe4-f7d8d83cac49", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fd8217f0-686e-4b2c-ae83-e9af50abe042", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ad4be9a3-f2a3-43e1-a73d-a9d9d13daabf", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchDynamicMemory:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            sorted_indices = np.argsort([func(h) for h in harmony_memory])\n            for idx in sorted_indices:\n                if func(new_solution) < func(harmony_memory[idx]):\n                    harmony_memory[idx] = new_solution\n                    break\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "EnhancedHarmonySearchDynamicMemory", "description": "Introducing Enhanced Harmony Search with Dynamic Memory Updating incorporating adaptive memory modification for better local exploration.", "configspace": "", "generation": 6, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedHarmonySearchDynamicMemory got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e924a973-dab0-46cc-abd3-eb2d6d931972", "solution": "import numpy as np\n\nclass AdaptiveMutationDEHS(DiversityEnhancedHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_prob = 0.1\n\n    def __call__(self, func):\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < self.mutation_prob:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        harmony_memory = self.initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            self.update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "AdaptiveMutationDEHS", "description": "Enhancing Diversity-Enhanced Harmony Search with Adaptive Mutation Probability to improve exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'AdaptiveMutationDEHS' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'AdaptiveMutationDEHS' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {}, "mutation_prompt": null}
{"id": "851eb062-75bd-4a25-811b-78652e6c003b", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ad0c9af7-60aa-42ec-b1f6-1874bce56da4", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "bccb92f4-969f-4516-9650-cdb8cc68c4b9", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory, exploration_rate=0.1):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < exploration_rate:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution, func):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            exploration_rate = 0.1  # Dynamic adjustment can be added here\n            new_solution = improvise_harmony(harmony_memory, exploration_rate)\n            update_harmony_memory(harmony_memory, new_solution, func)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DynamicHarmonySearch", "description": "Introducing Dynamic Harmony Search with Adaptive Memory and Improved Pitch Adjustment to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 10, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c2861e8f-cd86-45e9-93d9-56861badc950", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ced1260e-6fd2-4c7d-b864-af7485872014", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1919bcd4-0bd1-45fe-8b8f-c9429fd5e73e", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8dbd3a4a-6ab9-478f-aded-b92a3a2789a0", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9b6f8bae-1a67-48c0-8e48-d8cdad5c87c4", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e25f4ff5-185a-4411-8d74-b49cf5ccbb46", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4d3a3d41-d769-4d89-947d-c40760dd052d", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e9263081-7d07-4325-aa70-cae38477aff5", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1250e929-7a8c-4da0-aaf5-3950369821d5", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3342d6f7-193b-4391-994c-dbe9dfaf4de9", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory, prob_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < prob_memory:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n                else:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        prob_memory = 0.1\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory, prob_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n            prob_memory *= 0.999  # Update memory consideration probability\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "AdaptiveMemoryHarmonySearch", "description": "Introducing Adaptive Memory Harmony Search, a variant of Harmony Search that dynamically adjusts memory consideration during the optimization process to improve search efficiency.", "configspace": "", "generation": 20, "fitness": 0.09144843562834938, "feedback": "The algorithm AdaptiveMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "515a71a9-3203-4eaf-9878-c36eb94e5be7", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "42c8ecf6-0e61-430a-810b-59c4478670d3", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "15346bb4-7632-47eb-884f-0acf59adbb81", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "826e86fc-b002-4278-801d-f9179ac91281", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "791e6d00-5874-45e7-9029-39d919b8d4c6", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "72ae0712-f34b-4729-8442-da9799ff2a27", "solution": "import numpy as np\n\nclass DiversityEnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory)\n            update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DiversityEnhancedHarmonySearch", "description": "Introducing Diversity-Enhanced Harmony Search algorithm that incorporates a diversity mechanism to maintain population diversity during the search process.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "eea912c4-abde-4463-bc04-58c947669311", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pitch_adjustment_rate = 0.3\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n\n        def improvise_harmony(harmony_memory, iteration):\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[d] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.budget)\n                    new_harmony[d] = harmony_memory[idx, d]\n            return new_harmony\n\n        def update_harmony_memory(harmony_memory, new_solution, func):\n            worst_idx = np.argmax([func(h) for h in harmony_memory])\n            if func(new_solution) < func(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for i in range(self.budget):\n            new_solution = improvise_harmony(harmony_memory, i/self.budget)\n            update_harmony_memory(harmony_memory, new_solution, func)\n\n        return harmony_memory[np.argmin([func(h) for h in harmony_memory])]", "name": "DynamicHarmonySearch", "description": "Introducing Dynamic Harmony Search algorithm which adapts the pitch adjustment rate during the search process to balance exploration and exploitation.", "configspace": "", "generation": 27, "fitness": 0.09144843562834938, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 28, "fitness": 0.12756248002781087, "feedback": "The algorithm PSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "d5ab2add-5d63-4801-bbc2-e959aeaa0cd7", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "157179ba-ac85-4a88-b364-4abd30b92603", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "5a4a23e9-ccf6-4ab9-8f21-7899a21a9de3", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "7599c19e-2b19-427d-bec5-102f0acc2cb3", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "f88b2303-02a8-4d75-b914-a150cb240e24", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "943fc073-f8de-40d2-90d6-a3b75fa01210", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "8a965d29-8bac-442c-8ef4-bc6d4a112376", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "ca82d9f0-be9c-403b-bba2-aeea3cb89cfe", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best, inertia_weight):\n            return np.clip(inertia_weight * particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            diversity = np.mean([np.linalg.norm(p[\"position\"] - global_best) for p in particles])\n            inertia_weight = 1 / (1 + 1.5 * np.exp(-diversity))\n\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best, inertia_weight)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Improving PSO-Local Search hybrid by dynamically adjusting inertia weight and exploration rate based on population diversity.", "configspace": "", "generation": 35, "fitness": 0.12756248002781087, "feedback": "The algorithm DynamicPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "9f8a5933-c839-46cf-80c5-bc7feb2461a9", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "3c669dd7-a243-4f77-adf6-62ff89ce8cb9", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:  # Adjusted line: Changed the probability for local search\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Improving Particle Swarm Optimization (PSO) with Local Search by dynamically adjusting the exploration-exploitation balance for enhanced optimization performance.", "configspace": "", "generation": 37, "fitness": 0.12756248002781087, "feedback": "The algorithm DynamicPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "24cacea3-835f-4854-9551-110367334ec6", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "1e13d53b-da41-4072-8679-b0bf4236426c", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "9595478a-d0df-4f04-ad57-2ed082d785e7", "solution": "import numpy as np\n\nclass AdaptivePSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "AdaptivePSOLocalSearch", "description": "Enhancing PSO with Adaptive Local Search for improved global exploration and exploitation in optimization.", "configspace": "", "generation": 40, "fitness": 0.12756248002781087, "feedback": "The algorithm AdaptivePSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "8a21e769-d72c-4c35-87f4-ac1def4c007f", "solution": "import numpy as np\n\nclass PSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "PSOLocalSearch", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search for enhanced exploration-exploitation balance in optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.38748161833278694, 0.36547185481055733, 0.40644148928696144, 0.3008361977209353, 0.31781967259305344, 0.3506346116351844, 0.3403697337244386, 0.3654201025418353, 0.3276651098547996, 0.14254349508683095, 0.05732539872827658, 0.003054420725541962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051127948811051316, 0.02940805575370542, 0.031184050159586363, 0.03907296226211188, 0.05664332373702874, 0.0499872115617267, 0.035429882920875566, 0.02885025227700666, 0.08044863595002738, 0.06842171780258721, 0.05569693340023618, 0.07232549130439203, 0.10104074033842403, 0.05209261544717192, 0.039205924602820574, 0.042012952929570524, 0.01882318363912361, 0.04362086698185863, 0.15667959803127274, 0.12590797600994752, 0.09958124762823628, 0.09905975668392131, 0.09779172197147945, 0.12075531224719727, 0.11232532858866306, 0.08389810320978064, 0.10082941452050886, 0.20004518539273763, 0.12660047734792845, 0.17707335148086423, 0.19699048494081306, 0.26059466774464635, 0.19412021745528507, 0.2565580815975633, 0.11669614382442273, 0.073565985675205, 0.11652313129914327, 0.11152526281889152, 0.12833482376959204, 0.1984367938126167, 0.10673857161996225, 0.07682839639488481, 0.11717659823483151, 0.10503254579160604, 0.15488952673642575, 0.1356270265114694, 0.13355691931260172, 0.14909221385672922, 0.19049783898570727, 0.1527106409009632, 0.13605329014990442, 0.1772904524845873, 0.1353072775202303, 0.0800704381405416, 0.20404864049345028, 0.14377081101401368, 0.12975655575227152, 0.12395136661754291, 0.10517395906339022, 0.11693314035707902, 0.1257512635082465, 0.11080181760522079, 0.10909406194252969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014324102750018497, 9.999999999998899e-05, 0.003520768614291958, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918732089208002, 0.08835100943337382, 0.07409762432562261, 0.05064732071934308, 0.01859765294818283, 0.02320578267227824, 0.07738422780302934, 0.13181051320878578, 0.037155572753903465, 9.999999999998899e-05, 0.07920473630001035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06800107799754573, 0.0852655083786743, 0.06282554170027599, 0.009956790106406377, 0.08603620421555047, 0.0699220211618774, 0.042649630275087835, 0.07648045546480409, 0.06401957862682561, 0.38143229309904114, 0.36162639916967854, 0.3343477489282335, 0.3268940468040018, 0.27490776355273394, 0.29089415014925, 0.36280525835359634, 0.37139628853955564, 0.3929643033559923, 0.03868439098670129, 0.02632143190326497, 9.999999999998899e-05, 0.028408155016239056, 0.0412229439414008, 0.034403517225280456, 0.04258563281855199, 0.034921479587297966, 0.05769501969569013, 0.11812379626702219, 0.2084143161962696, 0.10903648862130799, 0.18162567588069756, 0.19220337763573647, 0.1201969904253608, 0.12779484070909153, 0.10797655312502741, 0.1193843165965971, 0.1314436535416169, 0.1248777926004232, 0.1470789914028977, 0.14896834087360544, 0.1360357530459536, 0.15480336707853348, 0.1488015677287169, 0.18063708119060173, 0.1359811848893684, 0.0797980283921268, 0.06593298411798953, 0.08954320681002004, 0.10024288510683343, 0.0888080613548844, 0.08315353425176597, 0.09894562023419673, 0.11942505421981242, 0.07918052915125284, 0.17957762886934814, 0.1423020804929307, 0.1824555575862904, 0.17400271813787915, 0.1666390044341418, 0.1764117208084397, 0.1988557743267263, 0.17300235526816854, 0.1657867341580027, 0.16778274167532747, 0.17195466709122997, 0.17206506537974653, 0.17291944304082696, 0.1948924224182752, 0.17741722337802546, 0.16739927791954456, 0.20799747620356834, 0.1593067663473794, 0.10472209052388703, 0.11518698361099888, 0.15248525509720334, 0.4340535706029415, 0.18678194089406175, 0.45104094291414454, 0.11295031602889016, 0.20052230984577957, 0.25785164027096596, 0.34962137225331624, 0.17391228863695907, 0.2614157556427875, 0.2765714123344357, 0.15297421824437407, 0.16243118542791313, 0.09876287652942506, 0.2895817930766682, 0.18685217689590305, 0.16432664989601342, 0.18278478367677897, 0.18160761879029652, 0.1804632520260291, 0.1578128901946213, 0.1837949666880203, 0.1763374877323185, 0.15906007209492623, 0.1749109079189609, 0.03809297403570633, 0.03746153320364154, 0.045793793202654864, 0.05382779977258756, 0.048666107256288726, 0.039624985644047594, 0.0457248105063256, 0.041414015184257136, 0.04552809662336399]}, "mutation_prompt": null}
{"id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 42, "fitness": 0.1309409986157305, "feedback": "The algorithm DynamicPSOLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "a7ca80b6-ba36-475f-af61-966c7b0cb69f", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "41eb8fda-07da-42b5-b47a-8ce6ccd6200f", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "af76403c-59cd-43f7-a153-574b33b669db", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "576ca8c2-495d-4771-b42e-8149f34c01c7", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "a90e0c87-c02b-4270-bfa4-ca77c25a2342", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "2b374d8c-a19b-46f3-af92-02deca1a117a", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "d662fa3c-2793-4bb8-84bc-51765042bf8e", "solution": "import numpy as np\n\nclass DynamicPSOLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "DynamicPSOLocalSearch", "description": "Enhancing PSO with dynamic mutation probabilities for improved convergence and exploration capabilities in optimization.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.4676823102955566, 0.4655010291436451, 0.4864536719618704, 0.3368719873893644, 0.26760658442992136, 0.39590007135185046, 0.3625924422030331, 0.3356249882550172, 0.34055124749942, 0.12714408788279763, 0.04364572280527479, 0.00010333282017671586, 9.999999999998899e-05, 0.0018334323472342096, 0.04205487783981354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034867942625626536, 0.02621917178011368, 0.04344434064798075, 0.0439829860301878, 0.04888139067058239, 0.04005691198014849, 0.03074262654384563, 0.02448957456713763, 0.09321469675776628, 0.12929916818921228, 0.05336916935025415, 0.05645021656278204, 0.08130448069803775, 0.05741310459200921, 0.01744886656872391, 0.03980415433137674, 0.018121150941227127, 0.044913651957462, 0.08985059390293026, 0.1045879174572748, 0.07714798106666099, 0.0868916751299248, 0.08575631713437781, 0.08425907489576911, 0.10929449410015857, 0.07500299912476405, 0.07683134674973702, 0.204088453064442, 0.0919655133349161, 0.12267657611392901, 0.2168421923904016, 0.2144282392760366, 0.21822720833785147, 0.24835363775412123, 0.10193382397915884, 0.05446418061668046, 0.11420077039997378, 0.07113080966742258, 0.12467125924436473, 0.14067220024376637, 0.08156235107474641, 0.05321152842080701, 0.10121621709217632, 0.0987215248860086, 0.16691806990905456, 0.14512765579180453, 0.18293826230276322, 0.15076077299680057, 0.18757003021799434, 0.1880969203295214, 0.13488663793658084, 0.32266798869461566, 0.16454170123430323, 0.09873383810994785, 0.15226139677782236, 0.15344250673438842, 0.24592899663879975, 0.11541651365497596, 0.044926624688067074, 0.28950424783746387, 0.14264093223410634, 0.03979964938627489, 0.28229162840379574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011002976331686454, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254697095334586, 0.09827208129480747, 0.1026617201057034, 0.05844024204989451, 0.018112247717932628, 0.048759743066329464, 0.1202607181905172, 0.08217636461018996, 0.05154375799039512, 0.015136431339879297, 0.03505466377068911, 0.057323733773747665, 0.047269919516073955, 0.04206225542208342, 0.046590319439883565, 0.009802081646087424, 0.020577316559060588, 0.00407824988417782, 0.05871295337047633, 0.09935776767336169, 0.08111553733216426, 0.021802703832587755, 0.0855367684664643, 0.06552504548522575, 0.04288746124082876, 0.07017202080237128, 0.0492225070028689, 0.4079785470980938, 0.38444584293402495, 0.37145351201967636, 0.3941571794277523, 0.30420538980142287, 0.2508899739156518, 0.3922904869217253, 0.363801410631732, 0.39878988785372593, 0.05100608504333837, 0.017598224692616182, 9.999999999998899e-05, 0.022984820314125853, 0.028445149028659578, 0.043515118826501165, 0.06316698507293572, 0.01929950935707181, 0.04866468329897544, 0.11680785822515449, 0.16781627324046933, 0.12381241046400004, 0.17705539910882417, 0.1712145818214229, 0.12032799277112904, 0.14052916741131483, 0.1308818441862597, 0.10360914778265529, 0.12004936905433894, 0.12095616888025729, 0.14876392961669882, 0.15228789746299376, 0.14367778568967005, 0.15069727423119494, 0.1468351714372964, 0.1787518922171506, 0.1384060524332955, 0.08211047791537507, 0.06065587382675386, 0.07906183995443916, 0.08628466295785309, 0.10582732470481238, 0.07985198164757568, 0.08598535670187124, 0.11046472344168945, 0.08297774478987285, 0.1949718130041853, 0.15969869177509932, 0.16731825991728966, 0.1769691614597343, 0.16571307492599896, 0.16637767331796727, 0.18274860883175614, 0.17737201754745835, 0.16396197560256565, 0.17309812644724387, 0.1745949535922635, 0.1763416501916787, 0.1837767445366132, 0.18542664151109656, 0.17585115292746956, 0.16305070794498788, 0.1865841157729562, 0.15157965349500047, 0.10748065182186728, 0.09391160062771309, 0.11231985710784198, 0.4360189857422865, 0.18060010224937217, 0.48038794151495445, 0.09654441851853013, 0.16471350568148724, 0.2681887161788743, 0.3682281409552155, 0.14054727302088, 0.2672109271246814, 0.3623707359617818, 0.14891999849969384, 0.13964359008205884, 0.09943766562411949, 0.23488548768680562, 0.13283900656125802, 0.16632198374240326, 0.18293621706815344, 0.20456014582201298, 0.17932879340253316, 0.1713941201703183, 0.18679244721061494, 0.18352916788639828, 0.16916519680876463, 0.17582906678524246, 0.04790126278878337, 0.03956419268315281, 0.047792264427767295, 0.053894085716919116, 0.06402561101607485, 0.04703247899932261, 0.0418890349900648, 0.03071320450767201, 0.05824984319252613]}, "mutation_prompt": null}
{"id": "c43194b8-8afb-422e-9f36-ca62c978b742", "solution": "import numpy as np\n\nclass HybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "HybridPSOLocalSearchMutation", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search and Mutation Probabilities to enhance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 49, "fitness": 0.1398307335268643, "feedback": "The algorithm HybridPSOLocalSearchMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "8018e155-f821-4c3c-b2d0-d8f2097c1ebf", "metadata": {"aucs": [0.5438403099968414, 0.515785230679816, 0.5570495545145402, 0.4034626861127094, 0.42020972849352545, 0.41043087328195926, 0.4799368381846226, 0.4568199711670642, 0.43688416633640703, 0.08310013151660245, 0.06948058053858785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04058124606362912, 0.027212029094902168, 0.05708395752391093, 0.04406099359834714, 0.051146610909392765, 0.062333791839845776, 0.035575420824122794, 0.03085296367881274, 0.05226499010042662, 0.08967371112563383, 0.0536943761887545, 0.07060675205894773, 0.08322986569887503, 0.06861526046416222, 0.05816068956110554, 0.04548974924645066, 0.014085104208724997, 0.041312104050885146, 0.2727874701037264, 0.1368998750223538, 0.2367285709884438, 0.10632964204980311, 0.09623889638814964, 0.126616590339255, 0.14980084408497663, 0.08986111791237361, 0.09671832391716739, 0.24007052946964091, 0.08683609626378563, 0.2498523211669721, 0.27271179179474214, 0.2549320280483953, 0.21155296156299042, 0.2586793541862994, 0.09708126807707573, 0.06060071867022232, 0.1437246090559141, 0.09370488976370839, 0.1489115141102193, 0.17007281793870266, 0.09176395154744166, 0.11353325676163073, 0.08124964087014763, 0.10034245875754255, 0.15902500221423777, 0.14893513976587003, 0.13632273284047625, 0.0598799244850754, 0.2413587202413019, 0.22933196837351566, 0.06717943930831882, 0.25238007828446685, 0.16291511021971183, 0.09403164070035275, 0.15989482765318608, 0.015547715605656598, 0.14268240885213745, 0.13136300570434756, 0.08023505241076945, 0.11735611906086141, 0.16176950267943846, 0.035258748318606536, 0.17415004717459537, 9.999999999998899e-05, 9.999999999998899e-05, 0.006031612069592129, 9.999999999998899e-05, 0.00015255546962966715, 9.999999999998899e-05, 0.010826307149340963, 9.999999999998899e-05, 0.01990383640191229, 0.11039747682416068, 0.08829458211343932, 0.05996934763056849, 0.05918696990855443, 0.024194976033605986, 0.06462950476611384, 0.07995702011109229, 0.0765337822964155, 0.056478962609783245, 0.022815152435833985, 0.033526944513143975, 0.033094110955518174, 0.06504248399835255, 0.040525553830157324, 0.022382265346275187, 0.05935443282356012, 0.008818334115860305, 0.030664378194571906, 0.08065102972046312, 0.10091668829131362, 0.08577514470932934, 0.032343418688369985, 0.10032214985870047, 0.05852966437813356, 0.06030336160450622, 0.09107615345634024, 0.06520417356892394, 0.4080290016439787, 0.37510598283405305, 0.3953311832630102, 0.3483066543356236, 0.2928956747837498, 0.37124906206318686, 0.4301292401719812, 0.40099843788218026, 0.4097477888241575, 0.05790314815963482, 0.028917772124794294, 9.999999999998899e-05, 0.037818580934331436, 0.0387695700340982, 0.04442462519895363, 0.05707872106591605, 0.02807669810139868, 0.04756452795784749, 0.1418399727093823, 0.15585983009563298, 0.15406834494225763, 0.1782259390032448, 0.19922562784789477, 0.1276587497920163, 0.14149827492673628, 0.13861967486706506, 0.11845289295606831, 0.1222859722304982, 0.12946578492793193, 0.14732403418372797, 0.15405777694683387, 0.13242306194140707, 0.14751360154527648, 0.15838159263427876, 0.17916029902767783, 0.1369799513478056, 0.09380268146136828, 0.06722812730908068, 0.09832530138291784, 0.09776068224400114, 0.08919284759654111, 0.09330456617316629, 0.08771716336823121, 0.11522754093961773, 0.07717624245443278, 0.17769974355846352, 0.14200877246761578, 0.16302483936451895, 0.1892297018936907, 0.1592790669695623, 0.17506528701777646, 0.17714423840055116, 0.15412909458000323, 0.1770804939696189, 0.17002562332546567, 0.22347899743798594, 0.1698260715058797, 0.16382881539106653, 0.17054783647293736, 0.16038037583986575, 0.16474944001061453, 0.19792815278092935, 0.1473700251633311, 0.1406831711366272, 0.1306856765787292, 0.1619570392284131, 0.49567161818358085, 0.1869087740914981, 0.49376033592780344, 0.10831918463850543, 0.20059129920863206, 0.31723487085921864, 0.4018151404768544, 0.15237578095713578, 0.2465029715297704, 0.5391230779327817, 0.1538756888701095, 0.16001252883677075, 0.10615137482899994, 0.16387833186564804, 0.12220026090940517, 0.16971175433296082, 0.1889041955928541, 0.17382117361005534, 0.18754198837375136, 0.16862316814044476, 0.1984466228012297, 0.18242029820668293, 0.18946993911032795, 0.18114385603446448, 0.04059865827514986, 0.03989882225723218, 0.050888621332335626, 0.057138302665428964, 0.06238303648198229, 0.05035368577002752, 0.04998872913254704, 0.041413396979378514, 0.041624502583705314]}, "mutation_prompt": null}
{"id": "dbad6e5f-65f6-4f69-aa7f-bf376a9b3986", "solution": "import numpy as np\n\nclass HybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "HybridPSOLocalSearchMutation", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search and Mutation Probabilities to enhance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c43194b8-8afb-422e-9f36-ca62c978b742", "metadata": {"aucs": [0.5438403099968414, 0.515785230679816, 0.5570495545145402, 0.4034626861127094, 0.42020972849352545, 0.41043087328195926, 0.4799368381846226, 0.4568199711670642, 0.43688416633640703, 0.08310013151660245, 0.06948058053858785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04058124606362912, 0.027212029094902168, 0.05708395752391093, 0.04406099359834714, 0.051146610909392765, 0.062333791839845776, 0.035575420824122794, 0.03085296367881274, 0.05226499010042662, 0.08967371112563383, 0.0536943761887545, 0.07060675205894773, 0.08322986569887503, 0.06861526046416222, 0.05816068956110554, 0.04548974924645066, 0.014085104208724997, 0.041312104050885146, 0.2727874701037264, 0.1368998750223538, 0.2367285709884438, 0.10632964204980311, 0.09623889638814964, 0.126616590339255, 0.14980084408497663, 0.08986111791237361, 0.09671832391716739, 0.24007052946964091, 0.08683609626378563, 0.2498523211669721, 0.27271179179474214, 0.2549320280483953, 0.21155296156299042, 0.2586793541862994, 0.09708126807707573, 0.06060071867022232, 0.1437246090559141, 0.09370488976370839, 0.1489115141102193, 0.17007281793870266, 0.09176395154744166, 0.11353325676163073, 0.08124964087014763, 0.10034245875754255, 0.15902500221423777, 0.14893513976587003, 0.13632273284047625, 0.0598799244850754, 0.2413587202413019, 0.22933196837351566, 0.06717943930831882, 0.25238007828446685, 0.16291511021971183, 0.09403164070035275, 0.15989482765318608, 0.015547715605656598, 0.14268240885213745, 0.13136300570434756, 0.08023505241076945, 0.11735611906086141, 0.16176950267943846, 0.035258748318606536, 0.17415004717459537, 9.999999999998899e-05, 9.999999999998899e-05, 0.006031612069592129, 9.999999999998899e-05, 0.00015255546962966715, 9.999999999998899e-05, 0.010826307149340963, 9.999999999998899e-05, 0.01990383640191229, 0.11039747682416068, 0.08829458211343932, 0.05996934763056849, 0.05918696990855443, 0.024194976033605986, 0.06462950476611384, 0.07995702011109229, 0.0765337822964155, 0.056478962609783245, 0.022815152435833985, 0.033526944513143975, 0.033094110955518174, 0.06504248399835255, 0.040525553830157324, 0.022382265346275187, 0.05935443282356012, 0.008818334115860305, 0.030664378194571906, 0.08065102972046312, 0.10091668829131362, 0.08577514470932934, 0.032343418688369985, 0.10032214985870047, 0.05852966437813356, 0.06030336160450622, 0.09107615345634024, 0.06520417356892394, 0.4080290016439787, 0.37510598283405305, 0.3953311832630102, 0.3483066543356236, 0.2928956747837498, 0.37124906206318686, 0.4301292401719812, 0.40099843788218026, 0.4097477888241575, 0.05790314815963482, 0.028917772124794294, 9.999999999998899e-05, 0.037818580934331436, 0.0387695700340982, 0.04442462519895363, 0.05707872106591605, 0.02807669810139868, 0.04756452795784749, 0.1418399727093823, 0.15585983009563298, 0.15406834494225763, 0.1782259390032448, 0.19922562784789477, 0.1276587497920163, 0.14149827492673628, 0.13861967486706506, 0.11845289295606831, 0.1222859722304982, 0.12946578492793193, 0.14732403418372797, 0.15405777694683387, 0.13242306194140707, 0.14751360154527648, 0.15838159263427876, 0.17916029902767783, 0.1369799513478056, 0.09380268146136828, 0.06722812730908068, 0.09832530138291784, 0.09776068224400114, 0.08919284759654111, 0.09330456617316629, 0.08771716336823121, 0.11522754093961773, 0.07717624245443278, 0.17769974355846352, 0.14200877246761578, 0.16302483936451895, 0.1892297018936907, 0.1592790669695623, 0.17506528701777646, 0.17714423840055116, 0.15412909458000323, 0.1770804939696189, 0.17002562332546567, 0.22347899743798594, 0.1698260715058797, 0.16382881539106653, 0.17054783647293736, 0.16038037583986575, 0.16474944001061453, 0.19792815278092935, 0.1473700251633311, 0.1406831711366272, 0.1306856765787292, 0.1619570392284131, 0.49567161818358085, 0.1869087740914981, 0.49376033592780344, 0.10831918463850543, 0.20059129920863206, 0.31723487085921864, 0.4018151404768544, 0.15237578095713578, 0.2465029715297704, 0.5391230779327817, 0.1538756888701095, 0.16001252883677075, 0.10615137482899994, 0.16387833186564804, 0.12220026090940517, 0.16971175433296082, 0.1889041955928541, 0.17382117361005534, 0.18754198837375136, 0.16862316814044476, 0.1984466228012297, 0.18242029820668293, 0.18946993911032795, 0.18114385603446448, 0.04059865827514986, 0.03989882225723218, 0.050888621332335626, 0.057138302665428964, 0.06238303648198229, 0.05035368577002752, 0.04998872913254704, 0.041413396979378514, 0.041624502583705314]}, "mutation_prompt": null}
{"id": "8bdd6564-53cd-435d-b0ba-7a705dfdc3fc", "solution": "import numpy as np\n\nclass HybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "HybridPSOLocalSearchMutation", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search and Mutation Probabilities to enhance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c43194b8-8afb-422e-9f36-ca62c978b742", "metadata": {"aucs": [0.5438403099968414, 0.515785230679816, 0.5570495545145402, 0.4034626861127094, 0.42020972849352545, 0.41043087328195926, 0.4799368381846226, 0.4568199711670642, 0.43688416633640703, 0.08310013151660245, 0.06948058053858785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04058124606362912, 0.027212029094902168, 0.05708395752391093, 0.04406099359834714, 0.051146610909392765, 0.062333791839845776, 0.035575420824122794, 0.03085296367881274, 0.05226499010042662, 0.08967371112563383, 0.0536943761887545, 0.07060675205894773, 0.08322986569887503, 0.06861526046416222, 0.05816068956110554, 0.04548974924645066, 0.014085104208724997, 0.041312104050885146, 0.2727874701037264, 0.1368998750223538, 0.2367285709884438, 0.10632964204980311, 0.09623889638814964, 0.126616590339255, 0.14980084408497663, 0.08986111791237361, 0.09671832391716739, 0.24007052946964091, 0.08683609626378563, 0.2498523211669721, 0.27271179179474214, 0.2549320280483953, 0.21155296156299042, 0.2586793541862994, 0.09708126807707573, 0.06060071867022232, 0.1437246090559141, 0.09370488976370839, 0.1489115141102193, 0.17007281793870266, 0.09176395154744166, 0.11353325676163073, 0.08124964087014763, 0.10034245875754255, 0.15902500221423777, 0.14893513976587003, 0.13632273284047625, 0.0598799244850754, 0.2413587202413019, 0.22933196837351566, 0.06717943930831882, 0.25238007828446685, 0.16291511021971183, 0.09403164070035275, 0.15989482765318608, 0.015547715605656598, 0.14268240885213745, 0.13136300570434756, 0.08023505241076945, 0.11735611906086141, 0.16176950267943846, 0.035258748318606536, 0.17415004717459537, 9.999999999998899e-05, 9.999999999998899e-05, 0.006031612069592129, 9.999999999998899e-05, 0.00015255546962966715, 9.999999999998899e-05, 0.010826307149340963, 9.999999999998899e-05, 0.01990383640191229, 0.11039747682416068, 0.08829458211343932, 0.05996934763056849, 0.05918696990855443, 0.024194976033605986, 0.06462950476611384, 0.07995702011109229, 0.0765337822964155, 0.056478962609783245, 0.022815152435833985, 0.033526944513143975, 0.033094110955518174, 0.06504248399835255, 0.040525553830157324, 0.022382265346275187, 0.05935443282356012, 0.008818334115860305, 0.030664378194571906, 0.08065102972046312, 0.10091668829131362, 0.08577514470932934, 0.032343418688369985, 0.10032214985870047, 0.05852966437813356, 0.06030336160450622, 0.09107615345634024, 0.06520417356892394, 0.4080290016439787, 0.37510598283405305, 0.3953311832630102, 0.3483066543356236, 0.2928956747837498, 0.37124906206318686, 0.4301292401719812, 0.40099843788218026, 0.4097477888241575, 0.05790314815963482, 0.028917772124794294, 9.999999999998899e-05, 0.037818580934331436, 0.0387695700340982, 0.04442462519895363, 0.05707872106591605, 0.02807669810139868, 0.04756452795784749, 0.1418399727093823, 0.15585983009563298, 0.15406834494225763, 0.1782259390032448, 0.19922562784789477, 0.1276587497920163, 0.14149827492673628, 0.13861967486706506, 0.11845289295606831, 0.1222859722304982, 0.12946578492793193, 0.14732403418372797, 0.15405777694683387, 0.13242306194140707, 0.14751360154527648, 0.15838159263427876, 0.17916029902767783, 0.1369799513478056, 0.09380268146136828, 0.06722812730908068, 0.09832530138291784, 0.09776068224400114, 0.08919284759654111, 0.09330456617316629, 0.08771716336823121, 0.11522754093961773, 0.07717624245443278, 0.17769974355846352, 0.14200877246761578, 0.16302483936451895, 0.1892297018936907, 0.1592790669695623, 0.17506528701777646, 0.17714423840055116, 0.15412909458000323, 0.1770804939696189, 0.17002562332546567, 0.22347899743798594, 0.1698260715058797, 0.16382881539106653, 0.17054783647293736, 0.16038037583986575, 0.16474944001061453, 0.19792815278092935, 0.1473700251633311, 0.1406831711366272, 0.1306856765787292, 0.1619570392284131, 0.49567161818358085, 0.1869087740914981, 0.49376033592780344, 0.10831918463850543, 0.20059129920863206, 0.31723487085921864, 0.4018151404768544, 0.15237578095713578, 0.2465029715297704, 0.5391230779327817, 0.1538756888701095, 0.16001252883677075, 0.10615137482899994, 0.16387833186564804, 0.12220026090940517, 0.16971175433296082, 0.1889041955928541, 0.17382117361005534, 0.18754198837375136, 0.16862316814044476, 0.1984466228012297, 0.18242029820668293, 0.18946993911032795, 0.18114385603446448, 0.04059865827514986, 0.03989882225723218, 0.050888621332335626, 0.057138302665428964, 0.06238303648198229, 0.05035368577002752, 0.04998872913254704, 0.041413396979378514, 0.041624502583705314]}, "mutation_prompt": null}
{"id": "9d86c52e-2906-4081-b170-ef78033a1a80", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "AdaptiveHybridPSOLocalSearchMutation", "description": "Enhancing exploration and exploitation in optimization through the integration of Particle Swarm Optimization (PSO) with Local Search and Mutation Probabilities using adaptive probabilities for improved performance.", "configspace": "", "generation": 52, "fitness": 0.1398307335268643, "feedback": "The algorithm AdaptiveHybridPSOLocalSearchMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "c43194b8-8afb-422e-9f36-ca62c978b742", "metadata": {"aucs": [0.5438403099968414, 0.515785230679816, 0.5570495545145402, 0.4034626861127094, 0.42020972849352545, 0.41043087328195926, 0.4799368381846226, 0.4568199711670642, 0.43688416633640703, 0.08310013151660245, 0.06948058053858785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04058124606362912, 0.027212029094902168, 0.05708395752391093, 0.04406099359834714, 0.051146610909392765, 0.062333791839845776, 0.035575420824122794, 0.03085296367881274, 0.05226499010042662, 0.08967371112563383, 0.0536943761887545, 0.07060675205894773, 0.08322986569887503, 0.06861526046416222, 0.05816068956110554, 0.04548974924645066, 0.014085104208724997, 0.041312104050885146, 0.2727874701037264, 0.1368998750223538, 0.2367285709884438, 0.10632964204980311, 0.09623889638814964, 0.126616590339255, 0.14980084408497663, 0.08986111791237361, 0.09671832391716739, 0.24007052946964091, 0.08683609626378563, 0.2498523211669721, 0.27271179179474214, 0.2549320280483953, 0.21155296156299042, 0.2586793541862994, 0.09708126807707573, 0.06060071867022232, 0.1437246090559141, 0.09370488976370839, 0.1489115141102193, 0.17007281793870266, 0.09176395154744166, 0.11353325676163073, 0.08124964087014763, 0.10034245875754255, 0.15902500221423777, 0.14893513976587003, 0.13632273284047625, 0.0598799244850754, 0.2413587202413019, 0.22933196837351566, 0.06717943930831882, 0.25238007828446685, 0.16291511021971183, 0.09403164070035275, 0.15989482765318608, 0.015547715605656598, 0.14268240885213745, 0.13136300570434756, 0.08023505241076945, 0.11735611906086141, 0.16176950267943846, 0.035258748318606536, 0.17415004717459537, 9.999999999998899e-05, 9.999999999998899e-05, 0.006031612069592129, 9.999999999998899e-05, 0.00015255546962966715, 9.999999999998899e-05, 0.010826307149340963, 9.999999999998899e-05, 0.01990383640191229, 0.11039747682416068, 0.08829458211343932, 0.05996934763056849, 0.05918696990855443, 0.024194976033605986, 0.06462950476611384, 0.07995702011109229, 0.0765337822964155, 0.056478962609783245, 0.022815152435833985, 0.033526944513143975, 0.033094110955518174, 0.06504248399835255, 0.040525553830157324, 0.022382265346275187, 0.05935443282356012, 0.008818334115860305, 0.030664378194571906, 0.08065102972046312, 0.10091668829131362, 0.08577514470932934, 0.032343418688369985, 0.10032214985870047, 0.05852966437813356, 0.06030336160450622, 0.09107615345634024, 0.06520417356892394, 0.4080290016439787, 0.37510598283405305, 0.3953311832630102, 0.3483066543356236, 0.2928956747837498, 0.37124906206318686, 0.4301292401719812, 0.40099843788218026, 0.4097477888241575, 0.05790314815963482, 0.028917772124794294, 9.999999999998899e-05, 0.037818580934331436, 0.0387695700340982, 0.04442462519895363, 0.05707872106591605, 0.02807669810139868, 0.04756452795784749, 0.1418399727093823, 0.15585983009563298, 0.15406834494225763, 0.1782259390032448, 0.19922562784789477, 0.1276587497920163, 0.14149827492673628, 0.13861967486706506, 0.11845289295606831, 0.1222859722304982, 0.12946578492793193, 0.14732403418372797, 0.15405777694683387, 0.13242306194140707, 0.14751360154527648, 0.15838159263427876, 0.17916029902767783, 0.1369799513478056, 0.09380268146136828, 0.06722812730908068, 0.09832530138291784, 0.09776068224400114, 0.08919284759654111, 0.09330456617316629, 0.08771716336823121, 0.11522754093961773, 0.07717624245443278, 0.17769974355846352, 0.14200877246761578, 0.16302483936451895, 0.1892297018936907, 0.1592790669695623, 0.17506528701777646, 0.17714423840055116, 0.15412909458000323, 0.1770804939696189, 0.17002562332546567, 0.22347899743798594, 0.1698260715058797, 0.16382881539106653, 0.17054783647293736, 0.16038037583986575, 0.16474944001061453, 0.19792815278092935, 0.1473700251633311, 0.1406831711366272, 0.1306856765787292, 0.1619570392284131, 0.49567161818358085, 0.1869087740914981, 0.49376033592780344, 0.10831918463850543, 0.20059129920863206, 0.31723487085921864, 0.4018151404768544, 0.15237578095713578, 0.2465029715297704, 0.5391230779327817, 0.1538756888701095, 0.16001252883677075, 0.10615137482899994, 0.16387833186564804, 0.12220026090940517, 0.16971175433296082, 0.1889041955928541, 0.17382117361005534, 0.18754198837375136, 0.16862316814044476, 0.1984466228012297, 0.18242029820668293, 0.18946993911032795, 0.18114385603446448, 0.04059865827514986, 0.03989882225723218, 0.050888621332335626, 0.057138302665428964, 0.06238303648198229, 0.05035368577002752, 0.04998872913254704, 0.041413396979378514, 0.041624502583705314]}, "mutation_prompt": null}
{"id": "0b117681-4ba8-435a-a390-0564e76f70db", "solution": "import numpy as np\n\nclass HybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.1\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "HybridPSOLocalSearchMutation", "description": "Integrating Particle Swarm Optimization (PSO) with Local Search and Mutation Probabilities to enhance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c43194b8-8afb-422e-9f36-ca62c978b742", "metadata": {"aucs": [0.5438403099968414, 0.515785230679816, 0.5570495545145402, 0.4034626861127094, 0.42020972849352545, 0.41043087328195926, 0.4799368381846226, 0.4568199711670642, 0.43688416633640703, 0.08310013151660245, 0.06948058053858785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04058124606362912, 0.027212029094902168, 0.05708395752391093, 0.04406099359834714, 0.051146610909392765, 0.062333791839845776, 0.035575420824122794, 0.03085296367881274, 0.05226499010042662, 0.08967371112563383, 0.0536943761887545, 0.07060675205894773, 0.08322986569887503, 0.06861526046416222, 0.05816068956110554, 0.04548974924645066, 0.014085104208724997, 0.041312104050885146, 0.2727874701037264, 0.1368998750223538, 0.2367285709884438, 0.10632964204980311, 0.09623889638814964, 0.126616590339255, 0.14980084408497663, 0.08986111791237361, 0.09671832391716739, 0.24007052946964091, 0.08683609626378563, 0.2498523211669721, 0.27271179179474214, 0.2549320280483953, 0.21155296156299042, 0.2586793541862994, 0.09708126807707573, 0.06060071867022232, 0.1437246090559141, 0.09370488976370839, 0.1489115141102193, 0.17007281793870266, 0.09176395154744166, 0.11353325676163073, 0.08124964087014763, 0.10034245875754255, 0.15902500221423777, 0.14893513976587003, 0.13632273284047625, 0.0598799244850754, 0.2413587202413019, 0.22933196837351566, 0.06717943930831882, 0.25238007828446685, 0.16291511021971183, 0.09403164070035275, 0.15989482765318608, 0.015547715605656598, 0.14268240885213745, 0.13136300570434756, 0.08023505241076945, 0.11735611906086141, 0.16176950267943846, 0.035258748318606536, 0.17415004717459537, 9.999999999998899e-05, 9.999999999998899e-05, 0.006031612069592129, 9.999999999998899e-05, 0.00015255546962966715, 9.999999999998899e-05, 0.010826307149340963, 9.999999999998899e-05, 0.01990383640191229, 0.11039747682416068, 0.08829458211343932, 0.05996934763056849, 0.05918696990855443, 0.024194976033605986, 0.06462950476611384, 0.07995702011109229, 0.0765337822964155, 0.056478962609783245, 0.022815152435833985, 0.033526944513143975, 0.033094110955518174, 0.06504248399835255, 0.040525553830157324, 0.022382265346275187, 0.05935443282356012, 0.008818334115860305, 0.030664378194571906, 0.08065102972046312, 0.10091668829131362, 0.08577514470932934, 0.032343418688369985, 0.10032214985870047, 0.05852966437813356, 0.06030336160450622, 0.09107615345634024, 0.06520417356892394, 0.4080290016439787, 0.37510598283405305, 0.3953311832630102, 0.3483066543356236, 0.2928956747837498, 0.37124906206318686, 0.4301292401719812, 0.40099843788218026, 0.4097477888241575, 0.05790314815963482, 0.028917772124794294, 9.999999999998899e-05, 0.037818580934331436, 0.0387695700340982, 0.04442462519895363, 0.05707872106591605, 0.02807669810139868, 0.04756452795784749, 0.1418399727093823, 0.15585983009563298, 0.15406834494225763, 0.1782259390032448, 0.19922562784789477, 0.1276587497920163, 0.14149827492673628, 0.13861967486706506, 0.11845289295606831, 0.1222859722304982, 0.12946578492793193, 0.14732403418372797, 0.15405777694683387, 0.13242306194140707, 0.14751360154527648, 0.15838159263427876, 0.17916029902767783, 0.1369799513478056, 0.09380268146136828, 0.06722812730908068, 0.09832530138291784, 0.09776068224400114, 0.08919284759654111, 0.09330456617316629, 0.08771716336823121, 0.11522754093961773, 0.07717624245443278, 0.17769974355846352, 0.14200877246761578, 0.16302483936451895, 0.1892297018936907, 0.1592790669695623, 0.17506528701777646, 0.17714423840055116, 0.15412909458000323, 0.1770804939696189, 0.17002562332546567, 0.22347899743798594, 0.1698260715058797, 0.16382881539106653, 0.17054783647293736, 0.16038037583986575, 0.16474944001061453, 0.19792815278092935, 0.1473700251633311, 0.1406831711366272, 0.1306856765787292, 0.1619570392284131, 0.49567161818358085, 0.1869087740914981, 0.49376033592780344, 0.10831918463850543, 0.20059129920863206, 0.31723487085921864, 0.4018151404768544, 0.15237578095713578, 0.2465029715297704, 0.5391230779327817, 0.1538756888701095, 0.16001252883677075, 0.10615137482899994, 0.16387833186564804, 0.12220026090940517, 0.16971175433296082, 0.1889041955928541, 0.17382117361005534, 0.18754198837375136, 0.16862316814044476, 0.1984466228012297, 0.18242029820668293, 0.18946993911032795, 0.18114385603446448, 0.04059865827514986, 0.03989882225723218, 0.050888621332335626, 0.057138302665428964, 0.06238303648198229, 0.05035368577002752, 0.04998872913254704, 0.041413396979378514, 0.041624502583705314]}, "mutation_prompt": null}
{"id": "f07cf501-be27-4012-9dd6-b19df344788b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 54, "fitness": 0.1523744240880275, "feedback": "The algorithm EnhancedHybridPSOLocalSearchMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "c43194b8-8afb-422e-9f36-ca62c978b742", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "8db5c97d-2455-493b-ad05-7d666afdc203", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "ad092776-db28-4d0d-9120-9def1dd16067", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "1bf566f2-ce02-4bf3-be43-ded08d04854e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "b7c43372-eb68-48bb-ac12-067425130b6e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "817f550f-1006-4121-9ce0-c2912d983447", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "d2d948d1-fde3-44f4-b27b-32faf3a6bbba", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "2337a740-f448-4e70-8b78-45094a989fa0", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.base_mutation_prob = 0.2\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.base_mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                        self.base_mutation_prob = self.base_mutation_prob * 1.01 if mutation_fitness < particle[\"fitness\"] else self.base_mutation_prob * 0.99\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "AdaptiveHybridPSOLocalSearchMutation", "description": "Modifying the mutation probability dynamically based on local search success to enhance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 61, "fitness": 0.14198237735233374, "feedback": "The algorithm AdaptiveHybridPSOLocalSearchMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.506603249128625, 0.5255782602646233, 0.5820524988014704, 0.40304787309639833, 0.4109549242417304, 0.4370947543706899, 0.4208253990925366, 0.3974209167874573, 0.44699133211356834, 0.11645070112305111, 0.06984042472010188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023687675953284804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05263464390106254, 0.031194631477132084, 0.03626921510601444, 0.055831347814847, 0.04151599954042373, 0.03180047786713025, 0.03694819043154007, 0.029578414009826304, 0.05436255721539751, 0.08612071940331534, 0.06928302328714286, 0.07674471987673714, 0.08230210873329957, 0.06755195472120645, 0.05566587654562938, 0.08041836500842581, 0.017228773255117846, 0.06533905986744615, 0.09677617083229029, 0.11993063104095636, 0.18238844824611178, 0.1070417998491987, 0.09761226825124736, 0.10018045134518139, 0.1309928220133535, 0.08963863586642307, 0.08826519218778028, 0.2718879938795995, 0.28279059865881206, 0.2268098957532324, 0.2324847571381231, 0.2308213239067579, 0.2365053301396398, 0.25646373123422395, 0.11086724022936201, 0.07411134920851725, 0.10785747339783558, 0.11192109213944712, 0.14274821371944835, 0.11134060125310696, 0.11579295688759361, 0.09274315314079506, 0.11302078100034418, 0.10939017345284541, 0.18178599824166397, 0.15852218209530233, 0.17102794862024917, 0.10751074979585373, 0.24209900726088918, 0.10499632548946336, 0.1834552408882345, 0.342584778953816, 0.15155913843323854, 0.08972259229741997, 0.18825190219516585, 0.14556075147500558, 0.2222494603625772, 0.12079977157992838, 0.08994875746096076, 0.12330473066380132, 0.1414833555182904, 0.06609686147446736, 0.15006219254854514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009720322575259677, 9.999999999998899e-05, 9.999999999998899e-05, 0.12207307364692443, 0.09159003185124748, 0.08494231044560197, 0.060907958678902085, 0.024960463615983808, 0.06490422246699978, 0.11112600631456682, 0.10911307832284023, 0.05374980910344129, 0.029464167865165147, 0.003846600153128543, 0.07058317166198735, 0.04182181181933442, 0.02973767417424955, 0.05074114927331086, 0.05692220085678723, 0.04189777677590334, 0.05132418401052696, 0.10639115075433869, 0.11737244871188046, 0.08873774483374852, 0.03733521101380899, 0.11281843379370893, 0.06704654943670052, 0.057306866149157254, 0.10129090342386049, 0.06813971686590647, 0.3918956491759089, 0.3656529051979992, 0.4020316950502807, 0.3640677055393684, 0.29600018694882124, 0.3149732249513644, 0.41147783733363763, 0.4144729092098791, 0.4000122656307372, 0.03903350200850908, 0.015235430213072165, 9.999999999998899e-05, 0.027849167066189562, 0.02772770805995184, 0.07256746722957319, 0.051607765972275454, 0.021802887264856463, 0.04679292987151806, 0.12170769479903176, 0.18701016162431194, 0.12295821327771683, 0.21417560987583217, 0.17632612375030254, 0.11755047793360429, 0.13812821495157857, 0.11992245959069536, 0.14125438844083582, 0.12435181157374575, 0.12967468069578114, 0.1532753969981181, 0.1521116656329068, 0.13479264503997235, 0.15363984951415044, 0.1549121932771259, 0.1951063832227362, 0.14455172236534186, 0.10800625901319783, 0.06359675563306666, 0.09450135819629779, 0.08929914326746524, 0.09593322078981781, 0.12007423241231152, 0.09405628356470697, 0.14457505627646605, 0.09175599703463999, 0.17642120467798594, 0.1434869822738154, 0.18420564334229794, 0.17568508564129892, 0.16367253242528734, 0.17481011053165696, 0.16514464688605146, 0.15584133623702767, 0.18101811841121374, 0.16931465963260195, 0.17384623067755967, 0.18550583403807308, 0.1734560515513205, 0.18987622244228486, 0.16350802014205168, 0.16223920434857386, 0.20602015393673456, 0.14892866589289422, 0.10683232971378243, 0.11159991032438266, 0.16098118680994689, 0.6044768464153513, 0.19012889468988192, 0.5964743182922178, 0.11914107958902076, 0.19978827936282395, 0.13380109389211103, 0.3517451949619126, 0.15537603152953305, 0.2605965936176442, 0.35830849105608253, 0.16002009448035714, 0.1667500007595918, 0.10119380518631693, 0.2703082274465186, 0.14434958125813313, 0.18869403872358703, 0.18340930516505383, 0.18819577740564186, 0.1957397485777308, 0.19310870862188523, 0.1978751633331549, 0.1877515416398976, 0.18013043389512118, 0.19309932435805244, 0.03974109388511682, 0.04080088003966087, 0.055655626485089815, 0.050065623318130914, 0.0733885257364214, 0.04121980674012771, 0.04553881744774557, 0.03857176996495071, 0.04379746833907505]}, "mutation_prompt": null}
{"id": "e4c616d5-decf-42ae-9fe7-d65741f48bad", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "7c92ee32-ea4a-414c-8525-2e3c09811d5a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "d9971e9a-6639-4dd4-8ce4-0afa5d311fcd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "34254d52-6f0c-4a27-9339-6114ea5b66b6", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "9f6db19c-103f-49be-9f7b-138ea2448464", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "de02ff5d-838b-4e81-8486-6e5b00ebf319", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by modifying the mutation probability to improve exploration and exploitation for efficient optimization.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5086718046529839, 0.5189190203678152, 0.5861252704655591, 0.45446894396135973, 0.42020676975534765, 0.5040563000736105, 0.45787452643071525, 0.4749093441983858, 0.4930419409912411, 0.07865826529742859, 0.0420166754712511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046702735922888094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054077364736994205, 0.04772772565830041, 0.03500112515308906, 0.06443156763342428, 0.04623596208270542, 0.0695708224559588, 0.035444394318334016, 0.027711411985472667, 0.07950135435349948, 0.05448523606620914, 0.07513464756502342, 0.07504901465083857, 0.09627593807864576, 0.058349642255223766, 0.05615120314301436, 0.07584593218934221, 0.021780793140391275, 0.05487859691913399, 0.3822673028696717, 0.1063164633654805, 0.29791241153418546, 0.10941185419795074, 0.11798163388561933, 0.11255812541902055, 0.23107026088106075, 0.09343317048289301, 0.12498782131848107, 0.3077184028386585, 0.13217261635954458, 0.18769782975562443, 0.2977608936952564, 0.24119820448049245, 0.32190088154044993, 0.3068770433278458, 0.18293025740454638, 0.08422285642906824, 0.12795637005852079, 0.11110401928753677, 0.14675788578422655, 0.17836763309545933, 0.125823408790792, 0.15052382891145333, 0.12275457932537248, 0.09999831271189374, 0.16576969077130832, 0.14677204464889315, 0.1744088863014187, 0.07379145652797237, 0.31844916480578245, 0.2795857478506848, 0.1760203777687187, 0.2915775803267592, 0.10408947252128731, 0.0915877094376163, 0.13786938708775887, 0.12016885386114773, 0.2439369268981164, 0.118880044375967, 0.12511026570889372, 0.11473221493318542, 0.1535381581624975, 0.06247030805382181, 0.16727843660265895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011899660967529813, 0.0015810784493954788, 9.999999999998899e-05, 0.011653264511244599, 9.999999999998899e-05, 9.999999999998899e-05, 0.10333251465490101, 0.07431648805759172, 0.09961229843372132, 0.06387406221890812, 0.035056096520652114, 0.07354828441772354, 0.10490737336593758, 0.11461750358504563, 0.06772497361957452, 0.088142772109712, 0.028089137094603256, 0.08207315529576431, 0.05264950308594529, 0.06875753100870097, 0.0385343235606499, 0.05234024381904001, 0.04416174672251405, 0.023365612608236885, 0.1328046929024307, 0.04846318020797846, 0.10463981379427445, 0.040624602880917515, 0.09856426626120407, 0.06062360852504567, 0.055501649692368704, 0.12000944634230726, 0.07118383927212979, 0.4097710405963241, 0.38824060369476543, 0.3767678350654453, 0.3943821794356127, 0.33196754466695333, 0.3502174723838454, 0.445702484327696, 0.39199374001955134, 0.3994655392431249, 0.04423458832335159, 0.02523971040493056, 9.999999999998899e-05, 0.043825175743230305, 0.02922603736456819, 0.04163444583392906, 0.05024868860772458, 0.02540147885502375, 0.053086484852924, 0.1295014632538679, 0.16296098107633117, 0.13948342308641526, 0.21778757293296558, 0.23138166956376072, 0.15489231471574494, 0.1583122675390468, 0.12797871640452052, 0.14494013767826142, 0.129746686134105, 0.14291499455043855, 0.15314693672699087, 0.15008733877460667, 0.13399827972485523, 0.15129173134746066, 0.18540794971385555, 0.19641964456768246, 0.14763173524918638, 0.08671341215012873, 0.06312186151859445, 0.10499809317500297, 0.09074831583356957, 0.0914554619366198, 0.0888049836089485, 0.11445229484200758, 0.1345247897728976, 0.07869783218951654, 0.19481887404795617, 0.14023770142702197, 0.18022625761904343, 0.17195595041744582, 0.16538567215214917, 0.16296217503518162, 0.1831063167849506, 0.15710190993849116, 0.1615299200778174, 0.17584916081058433, 0.17840950607488726, 0.18034704961260162, 0.18682540979340934, 0.1730204602559965, 0.16312062646544723, 0.16881866550308844, 0.21906067976915877, 0.15098920330655952, 0.12907721407457085, 0.15160157270792973, 0.17475468079533407, 0.6660799925997907, 0.19561619923460483, 0.5702485796271601, 0.12022541588342717, 0.2508033987951739, 0.3440877527238225, 0.4402751414870496, 0.18104847616586817, 0.2685562407133548, 0.4180366637025672, 0.1517945906403817, 0.17251201399424332, 0.10543913721020304, 0.28322684897433237, 0.19222766837168104, 0.1968656991465384, 0.17952020431123417, 0.18293700078248865, 0.18078723365105598, 0.19004855399638276, 0.1835101185100294, 0.18456255540592692, 0.18170393315696187, 0.18699177379285992, 0.039333557367021266, 0.0431444079129546, 0.055966912012287096, 0.057517297063646056, 0.06120965020813329, 0.04569507073045165, 0.05208075055323513, 0.045897569354045875, 0.04792240242319512]}, "mutation_prompt": null}
{"id": "14cca813-1645-43d0-a452-c19a32537fc6", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 68, "fitness": 0.2568715085792655, "feedback": "The algorithm EnhancedHybridPSOLocalSearchDEMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.18.", "error": "", "parent_id": "f07cf501-be27-4012-9dd6-b19df344788b", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "c291b991-0d5b-4b5c-aa39-34b6c07e31d8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "dc3799a2-dd18-4de5-8fff-c200768dfe86", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "c54049d4-f8fa-4587-92dd-5f7304faf87a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "1b910526-66ba-40be-9e59-9161ebc86cf2", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "ba6f5838-6ded-47e9-8035-078898fa0452", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "abdb5d0f-05f1-4666-83f5-9306a6d48eeb", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "2ccf2378-ae81-4285-a4a8-8500f74103a7", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "10279076-da44-4e95-b1f3-a288ba0f52f3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "12287d41-dc13-4e97-a3e2-6250e697f3bb", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"], self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutationRefined", "description": "Incorporating particle swarm optimization with differential evolution mutation and local search to enhance population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 59, 17, '                candidate_fitness = func(candidate_position)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 59, 17, '                candidate_fitness = func(candidate_position)\\n'))", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {}, "mutation_prompt": null}
{"id": "da39ef53-46f6-431a-b434-d7ffb9ae7f68", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "0d143587-e561-47c7-aced-101e34d6d94c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "5544cb22-1a1a-435b-8054-4672c9e0950c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "510dc89e-d2d5-4af1-bb43-c12d616940f1", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "3c062585-1ab2-4afa-a97a-deb40f919067", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "2d99c334-26e3-4c33-8a18-815a85557eeb", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "dab80318-510f-4652-a636-558282eb35e9", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "36c27b84-1cc1-4e77-87cf-3b19915bd7cd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "92fb0552-4aa8-48ab-a75c-cfea418f2af2", "solution": "import numpy as np\n\nclass FineTunedEnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.1  # Fine-tuned mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "FineTunedEnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation by incorporating a differential evolution strategy and fine-tuning the mutation probability for improved population diversity and convergence speed in black box optimization.", "configspace": "", "generation": 86, "fitness": 0.2475914688621223, "feedback": "The algorithm FineTunedEnhancedHybridPSOLocalSearchDEMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.18.", "error": "", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.552686132716426, 0.5247579832662606, 0.5686287737361462, 0.6146980046778687, 0.5277391739212551, 0.5404983553714261, 0.5587707295771955, 0.5389444971456653, 0.6278872430394745, 0.24788255888631483, 0.21931275280219154, 0.18757857063420447, 0.18808570593968288, 0.21468817645592986, 0.25407431953531556, 0.16895425116815932, 0.37303749733239044, 0.24388727669424726, 0.10428616364112908, 0.0850941460922191, 0.08451815403753027, 0.11967573823309197, 0.09688166599671255, 0.11697214090143804, 0.08859537835884657, 0.10402145800486107, 0.07914970375996022, 0.08706059766004237, 0.07139620504723898, 0.07595769949137743, 0.08951413459452273, 0.0743256162092173, 0.07543523647905459, 0.09598890285601991, 0.08069763200100022, 0.07933261101543354, 0.8375818440922327, 0.721648663291143, 0.7842331004310913, 0.7744426029149627, 0.9574955499274977, 0.8538307883946107, 0.7886783648761242, 0.8297382678098544, 0.9118359697677276, 0.2264052040204524, 0.2642077381159009, 0.3161449097111715, 0.23835054846969694, 0.2645296818638795, 0.24663248679871563, 0.2656950230492289, 0.2646765986898285, 0.29968635363743257, 0.5152017772715785, 0.33005673635480803, 0.33627269671929794, 0.30611486447173186, 0.4354519012425804, 0.6527632483632992, 0.278690300964224, 0.287345567897637, 0.3304318010960967, 0.17509844288271614, 0.14152692268030787, 0.14584239722023373, 0.12329247595739712, 0.21840314795918025, 0.15903290565467088, 0.14947199649885823, 0.17877229280705853, 0.1466647009602795, 0.14904904187269308, 0.12561529147605743, 0.17861666860160164, 0.13556475572489834, 0.15651143503309684, 0.1672846440702206, 0.20877010699833476, 0.15922558718399982, 0.1458732010018392, 0.2204813691193357, 0.11959821552295524, 0.18408419760446182, 0.21043651944453368, 0.1852734459825881, 0.16277911543553258, 0.1728787805593569, 0.2019724427522609, 0.15944898991237333, 0.3013534352938315, 0.2955294533712669, 0.34926748680603015, 0.37709169917716534, 0.3500581273110499, 0.3091768959229425, 0.28733071561340207, 0.34741429986369055, 0.3051038524664694, 0.07260306537991545, 0.04831008068350673, 0.03658267285374217, 0.10257437006776304, 0.06531651523700455, 0.10561913709290982, 0.15273501278204948, 0.19920140987728463, 0.0956667757215004, 0.18987517019399625, 0.08642716682034512, 0.11647827965498014, 0.13076406057073076, 0.07748786328428192, 0.08722260498012546, 0.15956893193761812, 0.1348233415530833, 0.09546925849732091, 0.443516687631733, 0.42473865910902797, 0.4287952753966664, 0.4093620180802544, 0.39333066749372736, 0.37915675228518053, 0.47061061939239157, 0.40856087552640985, 0.4716578626369068, 0.07724840439490255, 0.09571455973100129, 0.08238084199774698, 0.0925321943079982, 0.07882806263395814, 0.09454391438983034, 0.11455865745042082, 0.1047453592142159, 0.09349456434054793, 0.17274670372906276, 0.20247133594085265, 0.17459774625684765, 0.17201452760805314, 0.17013754346434617, 0.14224443446276946, 0.1996043414737645, 0.19987708843248597, 0.1814642773305175, 0.25450056904253493, 0.23589088771698075, 0.22960330654695305, 0.25475260879765127, 0.24094826574212713, 0.22094233444653943, 0.2551723884056377, 0.2460983612554637, 0.27326919748741607, 0.17999731920798645, 0.18326910661407092, 0.18015918463759695, 0.2231281520352577, 0.19941670712492643, 0.20859286951236822, 0.18026021410316184, 0.1996478255870454, 0.1653151157048982, 0.19929797030068153, 0.1810653043272309, 0.20529335214645394, 0.19891357761528006, 0.19455161570078094, 0.17504564386109578, 0.20697905214573098, 0.19375363568317383, 0.1928512666652834, 0.2230758665206315, 0.18668678443786968, 0.18351754337578863, 0.1878731989264405, 0.18024517716295918, 0.17254001410174902, 0.1700866214497312, 0.17987574368675174, 0.1913433328922296, 0.3561070101213164, 0.4161325407245854, 0.3032546720135896, 0.6655714035674687, 0.2691128742394039, 0.5816717630668793, 0.18354046139140168, 0.3060782363982918, 0.38742704792375304, 0.33531618747593595, 0.31356218913142875, 0.4193770439003379, 0.31043948416690215, 0.19353947989520426, 0.3145995117518532, 0.215032264624051, 0.20225494315012715, 0.2119442809839588, 0.18255906086278062, 0.19099618080584002, 0.1866799681258995, 0.19215018233156078, 0.2190878046288155, 0.1964402260856125, 0.18250173560828264, 0.1832676894781463, 0.181226382770577, 0.07877637419474015, 0.0769694446024356, 0.07928762168423642, 0.08812539864084734, 0.06792835195273583, 0.07056831312438139, 0.09266233067624818, 0.07972831865430052, 0.07316785433088258]}, "mutation_prompt": null}
{"id": "e5e9c667-95fc-4b58-8565-80e43784fe17", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "acf84f4c-da24-45c6-9a5e-365fcf247356", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "3707ee73-2da3-422d-8a71-8b1b41d82760", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "d5f820a6-c0dd-4810-966b-a367acb1cc81", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "151f0309-64cf-4adf-b09d-34a4395e0c79", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "82017632-40be-4501-8243-d050082b4d11", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "6bdc4c12-3932-40f7-9380-cf4a1afa3909", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "1b071203-2e3d-42f8-82df-21e015ea50ce", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "9b57695e-59c8-4a3b-9b40-eaea7fe31c9a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "d75a0257-bc92-4f6f-8db4-6b2742876bc7", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "4910d68a-4e58-4cec-b249-beebd1bfbf1f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "70bf5f4f-0636-47f1-85ca-a274c7f4ee2a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
{"id": "c5201d19-90ed-4310-872d-5d9a1a7eab6d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOLocalSearchDEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.max_velocity = 0.2\n        self.local_search_prob = 0.1\n        self.mutation_prob = 0.2  # Updated mutation probability\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        def update_velocity(particle, global_best):\n            return np.clip(particle[\"velocity\"] + self.c1 * np.random.rand() * (particle[\"best\"] - particle[\"position\"]) + self.c2 * np.random.rand() * (global_best - particle[\"position\"]), -self.max_velocity, self.max_velocity)\n\n        def update_position(particle):\n            new_position = particle[\"position\"] + particle[\"velocity\"]\n            return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        particles = [{\"position\": p, \"velocity\": np.zeros(self.dim), \"best\": p, \"fitness\": func(p)} for p in initialize_particles()]\n        global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        for _ in range(self.budget):\n            for particle in particles:\n                new_velocity = update_velocity(particle, global_best)\n                new_position = update_position({\"position\": particle[\"position\"], \"velocity\": new_velocity, \"best\": particle[\"best\"], \"fitness\": particle[\"fitness\"]})\n                new_fitness = func(new_position)\n                if new_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = new_position\n                    particle[\"fitness\"] = new_fitness\n                    if new_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = new_position\n                if np.random.rand() < self.local_search_prob:\n                    local_search_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.1, self.dim), self.lower_bound, self.upper_bound)\n                    local_search_fitness = func(local_search_position)\n                    if local_search_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = local_search_position\n                        particle[\"fitness\"] = local_search_fitness\n                        if local_search_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = local_search_position\n                if np.random.rand() < self.mutation_prob:\n                    mutation_position = np.clip(particle[\"position\"] + np.random.normal(0, np.random.rand()*0.2, self.dim), self.lower_bound, self.upper_bound)\n                    mutation_fitness = func(mutation_position)\n                    if mutation_fitness < particle[\"fitness\"]:\n                        particle[\"position\"] = mutation_position\n                        particle[\"fitness\"] = mutation_fitness\n                        if mutation_fitness < func(particle[\"best\"]):\n                            particle[\"best\"] = mutation_position\n                \n                # Integrate DE Mutation\n                candidate_position = np.clip(particle[\"position\"] + 0.5 * (particles[np.random.choice(range(len(particles)))][\"position\"] - particles[np.random.choice(range(len(particles)))][\"position\"]), self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate_position)\n                if candidate_fitness < particle[\"fitness\"]:\n                    particle[\"position\"] = candidate_position\n                    particle[\"fitness\"] = candidate_fitness\n                    if candidate_fitness < func(particle[\"best\"]):\n                        particle[\"best\"] = candidate_position\n\n            global_best = min(particles, key=lambda x: x[\"fitness\"])[\"position\"]\n\n        return min(particles, key=lambda x: x[\"fitness\"])[\"position\"]", "name": "EnhancedHybridPSOLocalSearchDEMutation", "description": "Enhancing the HybridPSOLocalSearchMutation algorithm by incorporating differential evolution strategy to improve population diversity and convergence speed for black box optimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14cca813-1645-43d0-a452-c19a32537fc6", "metadata": {"aucs": [0.5165980360001692, 0.5714519406830295, 0.7021317282922362, 0.5600990009303461, 0.5931169764095354, 0.6430437808143916, 0.5509895416544289, 0.5789840101069161, 0.5692619249616935, 0.23106347498365376, 0.1480600922676547, 0.22451696138563715, 0.3052253387847559, 0.2346244549298091, 0.260538269337385, 0.2022263740174075, 0.2058279092122437, 0.2592838594916299, 0.09289846208957786, 0.15114933702966915, 0.07126933164737004, 0.0900460397263243, 0.09693653755585796, 0.11264995917855436, 0.08884061754632078, 0.09737962996773275, 0.09145701363871306, 0.0980087307034746, 0.088299955151107, 0.06942289085323028, 0.0809386885202461, 0.06011789783636756, 0.08643591562420383, 0.06882009361539787, 0.07260821038445431, 0.07158379112993085, 0.7541761632862372, 0.7539300932819721, 0.8068922451438092, 0.8243366814443375, 0.8867455853814423, 0.8263032208560266, 0.8168618254941197, 0.9152249254772475, 0.8971496965074396, 0.3193693495206468, 0.2520082645333038, 0.306756516334195, 0.3465088823951863, 0.25293945363232717, 0.3129874710578965, 0.329599255761271, 0.285765517157347, 0.2450662848542864, 0.5847931728353175, 0.3285189606049921, 0.6330112369483055, 0.5153103644077968, 0.4586419337840313, 0.5780316411027423, 0.26341767003455563, 0.3489713286302465, 0.320851762150724, 0.14986173685164883, 0.16462225148212017, 0.13359368228719481, 0.13803873154481772, 0.1657640624639789, 0.13198567296173846, 0.34996204672357345, 0.12914963251084044, 0.14114049959148867, 0.2256855380092576, 0.15023759068224407, 0.13418871258908038, 0.15571933064063304, 0.11145735116325528, 0.12995988189179475, 0.18314999240573904, 0.15058333624262144, 0.11895980132817707, 0.1765805585817818, 0.16956032702314283, 0.20391030757719464, 0.23038880614964952, 0.13201501117403625, 0.1999375217939774, 0.20168156445757957, 0.1806178831350992, 0.19548681396659895, 0.3574265219874604, 0.3192228129966128, 0.3196714928375437, 0.3809185517819944, 0.29097010345501095, 0.3851460710097808, 0.31131580604632825, 0.3838179461919444, 0.425720493588019, 0.1292142127368452, 0.1439033999179986, 0.05794082517449517, 0.04824864313084687, 0.14325275239459445, 0.0639504715787601, 0.16827898505308203, 0.1872454982146765, 0.13121393004198145, 0.12023177789409911, 0.10985672715483508, 0.21855777875732174, 0.04895955566479826, 0.14434214241042576, 0.1739167433047154, 0.17095172131873881, 0.22789685814034621, 0.07191501754248164, 0.4129844872012153, 0.4248424875405592, 0.40335764602784774, 0.420487217489946, 0.42281464150150594, 0.48476822852459, 0.42670042021654575, 0.41396452151129104, 0.43601601791283406, 0.09006598058977633, 0.0994563219806549, 0.08436425938330194, 0.08451614582428024, 0.12331967150684009, 0.09516169539312724, 0.09293370398301248, 0.08340118721578471, 0.09451554871359602, 0.15883969180214375, 0.18305920677278897, 0.15428246827313852, 0.2052411855642403, 0.1853396289447835, 0.20116069803050574, 0.15365053623243452, 0.17144266143201525, 0.17841495028640553, 0.24367764703734296, 0.2481181667309842, 0.25387587723433724, 0.2635016851659693, 0.25176868072395986, 0.2529221704756104, 0.30586849021723017, 0.2584294186984767, 0.18431998210658773, 0.18493715544792322, 0.21321870639050589, 0.13378077709283642, 0.22343499741409334, 0.17460719580642348, 0.1989838457630997, 0.18263293488952514, 0.2100136192483354, 0.17279398397817858, 0.19471612033928698, 0.18432771144786197, 0.1949945349418476, 0.20056470105059243, 0.1851390424227468, 0.18734058614623905, 0.19566529186578308, 0.18576833373102375, 0.180393021697261, 0.17924949161617965, 0.17376959677750203, 0.17053455944588392, 0.213906798055705, 0.1824297693210385, 0.17945690475574005, 0.18238936874136769, 0.18286122226064894, 0.1826416680100612, 0.2711235993267548, 0.4861334675482055, 0.17234554726348028, 0.37728506027200526, 0.3757412705470954, 0.4109096143573392, 0.3360929286521518, 0.5169608597080451, 0.4451187882176534, 0.2983395243426389, 0.1985316395095924, 0.5019831895397295, 0.4315450150384095, 0.3519523557777563, 0.45659779764805475, 0.22091657407071574, 0.19791989286427147, 0.20719059210980917, 0.18695549764322827, 0.18875676372052952, 0.18914342852067456, 0.1942236763039792, 0.1948280876134133, 0.18468225450239883, 0.20583641740959624, 0.19573356516218088, 0.19596653267380792, 0.0745853863305107, 0.07694392586299614, 0.08531871965607885, 0.07458474023626238, 0.07925704529172328, 0.08203318974703266, 0.07633547672124363, 0.07759358782838421, 0.06824280956599271]}, "mutation_prompt": null}
