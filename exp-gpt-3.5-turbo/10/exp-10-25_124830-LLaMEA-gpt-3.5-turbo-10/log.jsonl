{"id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "416a7b14-9d21-4340-adb5-31695872bbfc", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "61418c9f-56fc-490c-a41d-ccd9caeb53a5", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "3d6d8e2b-5822-4637-980d-b006ff0f7c5c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "a6bb5e39-6fe7-4066-9bdb-c0cdf394d974", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "a4c07843-d4ba-4bcf-bb9d-62f587636648", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "41dbdd84-8cab-45be-8977-dfd6030a226a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "7fa71318-ce00-4182-a984-9a77fa251466", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "05ec0bbe-1c14-40a9-b3cc-df9496d63ecd", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "d22ff33b-9442-4324-bf58-c410dea6c5bc", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "15756506-0c9e-4005-b911-864c6b120134", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "29223e5f-2f8c-4d2e-b609-718857b4b47a", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "cf1652d8-fe8d-4dd6-b546-6e8a0cb2ed31", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "92bba6c2-ccdc-44c8-95a1-c77e47c3308c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "48db321b-4942-4931-9b5b-e83d618fdd5b", "solution": "import numpy as np\n\nclass NovelEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = np.random.uniform(-5.0, 5.0, (budget, dim))\n\n    def novel_mutation(self, parent, scale=0.1):\n        direction = np.random.normal(0, 1, self.dim)\n        return parent + direction * scale\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            parents = np.random.choice(self.population, size=2, replace=False)\n            child = self.novel_mutation(parents[0]) if func(parents[0]) < func(parents[1]) else self.novel_mutation(parents[1])\n            if func(child) < func(parents[0]):\n                self.population[np.argmax([func(parents[0]), func(child)])] = child\n        return self.population[np.argmin([func(ind) for ind in self.population])]", "name": "NovelEA", "description": "An Evolutionary Algorithm utilizing a novel mutation operator for diverse exploration in the search space", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "bc37ebef-34f0-44ff-a389-d956c6a0e93d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {}, "mutation_prompt": null}
{"id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 16, "fitness": 0.1676431694781053, "feedback": "The algorithm DynamicGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "4b59c0d1-6f11-4592-a20c-adc8df1e2b31", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "ccd5b0f0-5a9a-4e28-b7e9-81ff016608a1", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "1ae7a4bb-9ef1-4b6a-9825-6e203fabd6a4", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "d22dfaa5-ec82-4590-a33b-0cb2c80eeb2a", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "2f44f93c-3680-4e47-98b6-1f5ad67593c8", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "2055ac24-1a08-4263-bba4-f46bbbca9a5b", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "fc479e88-c3ba-4fd9-a089-95a1b338aefe", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "a6e9b829-23d7-4fe5-9e7c-d5c60af6dcd3", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "a1719d2a-fe1d-4477-9a95-0584fdb9da27", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "654631d2-c46f-43e3-9665-8cd8278b9e50", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "8a7babcb-3568-4199-a1fd-9204699b28bb", "solution": "import numpy as np\n\nclass DynamicGWO_LevyFlight:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO_LevyFlight", "description": "An algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size, enhanced with Levy flights for improved exploration capabilities.", "configspace": "", "generation": 26, "fitness": 0.1676431694781053, "feedback": "The algorithm DynamicGWO_LevyFlight got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "108ae4a5-adca-491f-bdf3-4cbb99368d19", "solution": "import numpy as np\n\nclass DynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicGWO", "description": "A novel algorithm based on Grey Wolf Optimization (GWO) with dynamic population size and adaptive step size for efficient exploration and exploitation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "ee6444ad-c601-4691-bd60-1469503ef106", "solution": "import numpy as np\n\nclass AdaptiveGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(10 * np.sqrt(dim))  # Dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveGWO", "description": "A metaheuristic algorithm based on the principles of Grey Wolf Optimization (GWO) with dynamic population size, adaptive step size, and Levy flight for global exploration.", "configspace": "", "generation": 28, "fitness": 0.1676431694781053, "feedback": "The algorithm AdaptiveGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.28975913106821793, 0.29246856445809644, 0.2976265186765873, 0.2874847521079521, 0.2788302135727515, 0.2576261731058156, 0.2631504274541394, 0.27301850572337694, 0.2837677901411242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09178555149880685, 0.07503526363732016, 0.09445161680463388, 0.10482131158601404, 0.08977305253897705, 0.09180418535062107, 0.0782661279499256, 0.07835456876994229, 0.07756636155695051, 0.0724243953371897, 0.06868753176281694, 0.07878054995375494, 0.06985381225138987, 0.0755033008177255, 0.06602850667602211, 0.07539086874295842, 0.0661880910078364, 0.07145796155732242, 0.9728629642925175, 0.953069184619168, 0.93834272615368, 0.9247537055165066, 0.992717240774533, 0.9460691500551708, 0.9616512656657858, 0.9970447935772317, 0.9630279292096885, 0.15477891402800614, 0.1389288546866273, 0.15650288205839402, 0.15418825610339482, 0.14138314666826812, 0.14887056326853776, 0.14869234785112073, 0.13702675342397364, 0.12778117224133434, 0.22288880891162843, 0.22759907446686867, 0.21095107588514106, 0.19886060248368864, 0.19755133601089248, 0.18812716886442205, 0.22006104234762525, 0.2064178837793893, 0.20000895154575926, 0.09895779298905649, 0.08630210920278847, 0.1082684219704888, 0.10125726152265291, 0.0901671356855217, 0.09579060561079644, 0.10819938015442221, 0.09574970411096506, 0.08982953954262107, 0.12560709257045344, 0.11157137633313285, 0.13119457806680823, 0.10838647502209242, 0.12174591971785609, 0.11830676546142493, 0.110671858333097, 0.12617660829859867, 0.119624518927267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020600094230132093, 0.003545723200522488, 0.00018505750483821526, 0.05302426602835453, 0.06682075194254267, 0.08269172000395208, 0.06494746502573656, 0.05823667656172149, 0.0395220966003732, 0.07571555301163535, 0.07327378260948159, 0.07347178362163864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037014602524041984, 0.02450217304114044, 0.033543456716681797, 0.02471936432772104, 0.023114384163739343, 0.026434472102639495, 0.023951884505849508, 0.056821624493558764, 0.027622060861787978, 0.2846359431153209, 0.2725066830560212, 0.2881575892656685, 0.27514699000843457, 0.3046073547530408, 0.2740729658448162, 0.2916957860545364, 0.3023998766256464, 0.3110982229034204, 0.07824871372739473, 0.0852435977445486, 0.08902703507962617, 0.0836237445060164, 0.08647311513712175, 0.09106233264847763, 0.08333921525567622, 0.08813550936204195, 0.09774057234245759, 0.13505820893462894, 0.1536433920501713, 0.12674747234116257, 0.1309502317081095, 0.13492962845423373, 0.1339056240737898, 0.17261924815689722, 0.13143242516056963, 0.15970129312992154, 0.2216341806073333, 0.21330184954203002, 0.21681606617139337, 0.2391929482568006, 0.2321735727360954, 0.23149497921201845, 0.2096902084303215, 0.23167230239378045, 0.21212202942188663, 0.16660741836716386, 0.16661738412111005, 0.1673880001513035, 0.16420114104249883, 0.19597009398503795, 0.16634048889551722, 0.16413388677218954, 0.17467959879290462, 0.15676117792667066, 0.20836430132877748, 0.20251645935075113, 0.19516087077632638, 0.20084158239519645, 0.20513606662454498, 0.1980174845371332, 0.19068778291850275, 0.19018514595865188, 0.19139617582868174, 0.17617599984174737, 0.17086907567172382, 0.17462427350253074, 0.16528472045831621, 0.16799891548123813, 0.1739541204533963, 0.1659486042624605, 0.16809794897275843, 0.16634801300794166, 0.19818795767256858, 0.19983433059082778, 0.1413188123045075, 0.33029486421964505, 0.1864193305976084, 0.29192797703900764, 0.15567174391920358, 0.33996915810999384, 0.14790690064939027, 0.17905362634031408, 0.1678336449758846, 0.19302555815032196, 0.22085874397013094, 0.18988591198420046, 0.2152788300940739, 0.1928179667093668, 0.20072898458616373, 0.21047314316053123, 0.19736563106943494, 0.18988443303776448, 0.17703371497638798, 0.17983426079376552, 0.18464099153651692, 0.17260659722144556, 0.17408557721102058, 0.1874266834438929, 0.19005670080759496, 0.08811670488007006, 0.07021170929180331, 0.08289485077400893, 0.07271996779151246, 0.07131269189627887, 0.07772446340939865, 0.08126250395307943, 0.06933592778197051, 0.07282709229593132]}, "mutation_prompt": null}
{"id": "f8494565-5b5f-460b-9e34-89d05ece0125", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "EnhancedDynamicGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters and enhanced exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.1681577824241607, "feedback": "The algorithm EnhancedDynamicGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "01eafa6e-1f14-41f6-8d9c-73cdf49e1e45", "metadata": {"aucs": [0.2963381061416871, 0.290379037120329, 0.2862042708641803, 0.2454016757096581, 0.27779721534362034, 0.236573594638103, 0.258813089789248, 0.25355499112467483, 0.2948517586406839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0836700172830257, 0.0790310030040613, 0.08414103572029885, 0.0930723506468637, 0.08262318727968065, 0.10589644621746175, 0.07883060113246032, 0.08389394944808026, 0.08277002178414072, 0.08261809771693629, 0.06467059277117004, 0.0669604012489855, 0.07841905118815118, 0.07621911216095123, 0.0709902653206631, 0.09384744143353074, 0.05754011185596919, 0.06164929852203771, 0.9443462123142351, 0.8471041406806878, 0.899763717322815, 0.9064612841533765, 0.9850660278704256, 0.9770518053304165, 0.9938668189318349, 0.9680667500744823, 0.9667049460020392, 0.14062886227459148, 0.1294034569625273, 0.12972608146888087, 0.14300045887076707, 0.16115659165299423, 0.15429717088272432, 0.1469978209949575, 0.14360535841685884, 0.15414175120618911, 0.20762438940584327, 0.21569219888128865, 0.2295189374994454, 0.199665420757015, 0.21342228880977332, 0.195010501817391, 0.18600316962998498, 0.20693551285222034, 0.22963635113412595, 0.09809248540284266, 0.11924701856977193, 0.09104222862565403, 0.08988960533810042, 0.07593439298493054, 0.08807268233015764, 0.09828661385170834, 0.14412521723129956, 0.11668386174803669, 0.11544986020093295, 0.12504374630597326, 0.1080529151609757, 0.11309300629772989, 0.11038519626660925, 0.1223185054039857, 0.12064799110064817, 0.1172698568208409, 0.11605776642391197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04703754653432457, 0.06076654967269057, 0.08590767752655704, 0.0406941951512132, 0.06257289787540776, 0.08958565040457867, 0.0661334769988895, 0.11034327007013112, 0.07957793103511268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01816464119701633, 0.034469592789281744, 0.029983795687856918, 0.020537792285945433, 0.019635949629776772, 0.031077399496542424, 0.035831771878712115, 0.029706697315583508, 0.016536610071480773, 0.27901181488935467, 0.32874382690923043, 0.2838096391800019, 0.27373463028408673, 0.2971299401924068, 0.28281106446627347, 0.3070733197601583, 0.31173705466080215, 0.2985977435146815, 0.07867452398778185, 0.07114347837624957, 0.08980338145358524, 0.07752397134514855, 0.07227682604807228, 0.07753101867414536, 0.0894218920943406, 0.07237974937878733, 0.07604893581996053, 0.13293300598585867, 0.1516229898594671, 0.13655113582712963, 0.15765931866767402, 0.1751222764028455, 0.13612718314662708, 0.15913829432774096, 0.11499789430526375, 0.13374391954898712, 0.2241335341393027, 0.22621838788773974, 0.2153186824568697, 0.23445449685355757, 0.23535244994482218, 0.22546353780666173, 0.20727806696515194, 0.2172048318742309, 0.2202198110890644, 0.1514290067140428, 0.15230654044612768, 0.15661148979841533, 0.17025432224523085, 0.18320150060414275, 0.17651118533235166, 0.16230949467407751, 0.16418572314451463, 0.16693919815928804, 0.202388801509212, 0.21378570972955135, 0.20816114598516755, 0.20411580166811905, 0.2033329763188545, 0.20954627095117329, 0.23077089056973754, 0.18966281365465443, 0.2019187633027003, 0.17035610297064085, 0.1746247994716177, 0.17155650198925654, 0.1684608752821778, 0.17938249433581532, 0.16817655681552335, 0.1757556367867663, 0.17024890634767087, 0.17423254234941776, 0.17780358225364157, 0.17428452478861822, 0.13430148830158983, 0.3449881848963273, 0.18875672537199806, 0.4317882847395802, 0.2738364404157787, 0.18516378886350204, 0.24078370393524218, 0.332743105421749, 0.17581930243061417, 0.15115008734545787, 0.18375028417761086, 0.16426366836548933, 0.2158887519284718, 0.16792189775711863, 0.20260518578209363, 0.19285000912900896, 0.1864798152914766, 0.19546223543652008, 0.21990636716903467, 0.18728466423984436, 0.17911107456757835, 0.18387515825212863, 0.19935160328394697, 0.1746524802184538, 0.18655257743496845, 0.07952529688006449, 0.07468724384378889, 0.08799676488345554, 0.08432505609888563, 0.07884724832258694, 0.0783746614993972, 0.07526713461934509, 0.06840707713287886, 0.07944570327040279]}, "mutation_prompt": null}
{"id": "2e4f1a45-9051-4ede-86dd-e08d27de7ca7", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO_Levy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness\n", "name": "EnhancedDynamicGWO_Levy", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and incorporate a Levy flight step for improved exploration.", "configspace": "", "generation": 30, "fitness": 0.1681577824241607, "feedback": "The algorithm EnhancedDynamicGWO_Levy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "f8494565-5b5f-460b-9e34-89d05ece0125", "metadata": {"aucs": [0.2963381061416871, 0.290379037120329, 0.2862042708641803, 0.2454016757096581, 0.27779721534362034, 0.236573594638103, 0.258813089789248, 0.25355499112467483, 0.2948517586406839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0836700172830257, 0.0790310030040613, 0.08414103572029885, 0.0930723506468637, 0.08262318727968065, 0.10589644621746175, 0.07883060113246032, 0.08389394944808026, 0.08277002178414072, 0.08261809771693629, 0.06467059277117004, 0.0669604012489855, 0.07841905118815118, 0.07621911216095123, 0.0709902653206631, 0.09384744143353074, 0.05754011185596919, 0.06164929852203771, 0.9443462123142351, 0.8471041406806878, 0.899763717322815, 0.9064612841533765, 0.9850660278704256, 0.9770518053304165, 0.9938668189318349, 0.9680667500744823, 0.9667049460020392, 0.14062886227459148, 0.1294034569625273, 0.12972608146888087, 0.14300045887076707, 0.16115659165299423, 0.15429717088272432, 0.1469978209949575, 0.14360535841685884, 0.15414175120618911, 0.20762438940584327, 0.21569219888128865, 0.2295189374994454, 0.199665420757015, 0.21342228880977332, 0.195010501817391, 0.18600316962998498, 0.20693551285222034, 0.22963635113412595, 0.09809248540284266, 0.11924701856977193, 0.09104222862565403, 0.08988960533810042, 0.07593439298493054, 0.08807268233015764, 0.09828661385170834, 0.14412521723129956, 0.11668386174803669, 0.11544986020093295, 0.12504374630597326, 0.1080529151609757, 0.11309300629772989, 0.11038519626660925, 0.1223185054039857, 0.12064799110064817, 0.1172698568208409, 0.11605776642391197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04703754653432457, 0.06076654967269057, 0.08590767752655704, 0.0406941951512132, 0.06257289787540776, 0.08958565040457867, 0.0661334769988895, 0.11034327007013112, 0.07957793103511268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01816464119701633, 0.034469592789281744, 0.029983795687856918, 0.020537792285945433, 0.019635949629776772, 0.031077399496542424, 0.035831771878712115, 0.029706697315583508, 0.016536610071480773, 0.27901181488935467, 0.32874382690923043, 0.2838096391800019, 0.27373463028408673, 0.2971299401924068, 0.28281106446627347, 0.3070733197601583, 0.31173705466080215, 0.2985977435146815, 0.07867452398778185, 0.07114347837624957, 0.08980338145358524, 0.07752397134514855, 0.07227682604807228, 0.07753101867414536, 0.0894218920943406, 0.07237974937878733, 0.07604893581996053, 0.13293300598585867, 0.1516229898594671, 0.13655113582712963, 0.15765931866767402, 0.1751222764028455, 0.13612718314662708, 0.15913829432774096, 0.11499789430526375, 0.13374391954898712, 0.2241335341393027, 0.22621838788773974, 0.2153186824568697, 0.23445449685355757, 0.23535244994482218, 0.22546353780666173, 0.20727806696515194, 0.2172048318742309, 0.2202198110890644, 0.1514290067140428, 0.15230654044612768, 0.15661148979841533, 0.17025432224523085, 0.18320150060414275, 0.17651118533235166, 0.16230949467407751, 0.16418572314451463, 0.16693919815928804, 0.202388801509212, 0.21378570972955135, 0.20816114598516755, 0.20411580166811905, 0.2033329763188545, 0.20954627095117329, 0.23077089056973754, 0.18966281365465443, 0.2019187633027003, 0.17035610297064085, 0.1746247994716177, 0.17155650198925654, 0.1684608752821778, 0.17938249433581532, 0.16817655681552335, 0.1757556367867663, 0.17024890634767087, 0.17423254234941776, 0.17780358225364157, 0.17428452478861822, 0.13430148830158983, 0.3449881848963273, 0.18875672537199806, 0.4317882847395802, 0.2738364404157787, 0.18516378886350204, 0.24078370393524218, 0.332743105421749, 0.17581930243061417, 0.15115008734545787, 0.18375028417761086, 0.16426366836548933, 0.2158887519284718, 0.16792189775711863, 0.20260518578209363, 0.19285000912900896, 0.1864798152914766, 0.19546223543652008, 0.21990636716903467, 0.18728466423984436, 0.17911107456757835, 0.18387515825212863, 0.19935160328394697, 0.1746524802184538, 0.18655257743496845, 0.07952529688006449, 0.07468724384378889, 0.08799676488345554, 0.08432505609888563, 0.07884724832258694, 0.0783746614993972, 0.07526713461934509, 0.06840707713287886, 0.07944570327040279]}, "mutation_prompt": null}
{"id": "ea5e36bf-9d0e-404d-a793-eebe072bd0b7", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "EnhancedDynamicGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters and enhanced exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8494565-5b5f-460b-9e34-89d05ece0125", "metadata": {"aucs": [0.2963381061416871, 0.290379037120329, 0.2862042708641803, 0.2454016757096581, 0.27779721534362034, 0.236573594638103, 0.258813089789248, 0.25355499112467483, 0.2948517586406839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0836700172830257, 0.0790310030040613, 0.08414103572029885, 0.0930723506468637, 0.08262318727968065, 0.10589644621746175, 0.07883060113246032, 0.08389394944808026, 0.08277002178414072, 0.08261809771693629, 0.06467059277117004, 0.0669604012489855, 0.07841905118815118, 0.07621911216095123, 0.0709902653206631, 0.09384744143353074, 0.05754011185596919, 0.06164929852203771, 0.9443462123142351, 0.8471041406806878, 0.899763717322815, 0.9064612841533765, 0.9850660278704256, 0.9770518053304165, 0.9938668189318349, 0.9680667500744823, 0.9667049460020392, 0.14062886227459148, 0.1294034569625273, 0.12972608146888087, 0.14300045887076707, 0.16115659165299423, 0.15429717088272432, 0.1469978209949575, 0.14360535841685884, 0.15414175120618911, 0.20762438940584327, 0.21569219888128865, 0.2295189374994454, 0.199665420757015, 0.21342228880977332, 0.195010501817391, 0.18600316962998498, 0.20693551285222034, 0.22963635113412595, 0.09809248540284266, 0.11924701856977193, 0.09104222862565403, 0.08988960533810042, 0.07593439298493054, 0.08807268233015764, 0.09828661385170834, 0.14412521723129956, 0.11668386174803669, 0.11544986020093295, 0.12504374630597326, 0.1080529151609757, 0.11309300629772989, 0.11038519626660925, 0.1223185054039857, 0.12064799110064817, 0.1172698568208409, 0.11605776642391197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04703754653432457, 0.06076654967269057, 0.08590767752655704, 0.0406941951512132, 0.06257289787540776, 0.08958565040457867, 0.0661334769988895, 0.11034327007013112, 0.07957793103511268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01816464119701633, 0.034469592789281744, 0.029983795687856918, 0.020537792285945433, 0.019635949629776772, 0.031077399496542424, 0.035831771878712115, 0.029706697315583508, 0.016536610071480773, 0.27901181488935467, 0.32874382690923043, 0.2838096391800019, 0.27373463028408673, 0.2971299401924068, 0.28281106446627347, 0.3070733197601583, 0.31173705466080215, 0.2985977435146815, 0.07867452398778185, 0.07114347837624957, 0.08980338145358524, 0.07752397134514855, 0.07227682604807228, 0.07753101867414536, 0.0894218920943406, 0.07237974937878733, 0.07604893581996053, 0.13293300598585867, 0.1516229898594671, 0.13655113582712963, 0.15765931866767402, 0.1751222764028455, 0.13612718314662708, 0.15913829432774096, 0.11499789430526375, 0.13374391954898712, 0.2241335341393027, 0.22621838788773974, 0.2153186824568697, 0.23445449685355757, 0.23535244994482218, 0.22546353780666173, 0.20727806696515194, 0.2172048318742309, 0.2202198110890644, 0.1514290067140428, 0.15230654044612768, 0.15661148979841533, 0.17025432224523085, 0.18320150060414275, 0.17651118533235166, 0.16230949467407751, 0.16418572314451463, 0.16693919815928804, 0.202388801509212, 0.21378570972955135, 0.20816114598516755, 0.20411580166811905, 0.2033329763188545, 0.20954627095117329, 0.23077089056973754, 0.18966281365465443, 0.2019187633027003, 0.17035610297064085, 0.1746247994716177, 0.17155650198925654, 0.1684608752821778, 0.17938249433581532, 0.16817655681552335, 0.1757556367867663, 0.17024890634767087, 0.17423254234941776, 0.17780358225364157, 0.17428452478861822, 0.13430148830158983, 0.3449881848963273, 0.18875672537199806, 0.4317882847395802, 0.2738364404157787, 0.18516378886350204, 0.24078370393524218, 0.332743105421749, 0.17581930243061417, 0.15115008734545787, 0.18375028417761086, 0.16426366836548933, 0.2158887519284718, 0.16792189775711863, 0.20260518578209363, 0.19285000912900896, 0.1864798152914766, 0.19546223543652008, 0.21990636716903467, 0.18728466423984436, 0.17911107456757835, 0.18387515825212863, 0.19935160328394697, 0.1746524802184538, 0.18655257743496845, 0.07952529688006449, 0.07468724384378889, 0.08799676488345554, 0.08432505609888563, 0.07884724832258694, 0.0783746614993972, 0.07526713461934509, 0.06840707713287886, 0.07944570327040279]}, "mutation_prompt": null}
{"id": "4685ee08-bb06-4ce4-8b7d-4823eebb961f", "solution": "import numpy as np\n\nclass EnhancedDynamicGWOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim) * np.log(1 + dim))  # Enhanced dynamic population size with logarithmic adjustment\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "EnhancedDynamicGWOImproved", "description": "Enhance the Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm by incorporating a dynamic population size adjustment strategy to improve exploration and exploitation balance for better optimization performance.", "configspace": "", "generation": 32, "fitness": 0.16622732027401657, "feedback": "The algorithm EnhancedDynamicGWOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "f8494565-5b5f-460b-9e34-89d05ece0125", "metadata": {"aucs": [0.30885896064153817, 0.2736085503246415, 0.29288125212635774, 0.23955342176523853, 0.25674924245832387, 0.26918693151929907, 0.2785226116203732, 0.2711994786497487, 0.3014543404908838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08296537073266896, 0.07794913192080388, 0.09734647012989539, 0.07695913393341403, 0.08552111420919684, 0.07270828406747165, 0.08305931663124211, 0.07757171784448269, 0.06939613020595603, 0.06274348788940987, 0.07904879243472152, 0.071832927419885, 0.06580456771006449, 0.0720800966399171, 0.06709716647695185, 0.0731401190611447, 0.07543574065845515, 0.06006522928927838, 0.9702107166493673, 0.944603506480885, 0.9711916302934418, 0.955175723478824, 0.9894169778544575, 0.9696380987206776, 0.9472304209195053, 0.9474251162647539, 0.9708382380853205, 0.14134032084998216, 0.1363271482462577, 0.15113602120125036, 0.15677644452421535, 0.14751763054628897, 0.14734802688493032, 0.12947326710237572, 0.1533119636066651, 0.1726286316908221, 0.2671334562691299, 0.20508101420636937, 0.19797850286823204, 0.20917296483657588, 0.19732351069091614, 0.18671023123980635, 0.19833079758552075, 0.20062595005823058, 0.19991153810719953, 0.09312049134449207, 0.10960698304679095, 0.09101256617139875, 0.09229328122325586, 0.08372287358863328, 0.09156184802673706, 0.07134619319350677, 0.06692804405242003, 0.09686014244507457, 0.12086555988040038, 0.1523088806175631, 0.11872752767417127, 0.12155571629361528, 0.11424959966848636, 0.1222865661738739, 0.12612181900517894, 0.12350560270338207, 0.11552640558986071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05853737799103442, 0.08206637146135132, 0.052184941111312444, 0.035333809687025486, 0.031016030587921017, 0.052335696350156446, 0.050716358535274786, 0.05763931813414469, 0.08170630120704114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046910727149420905, 0.01576372391364189, 0.035152678708761376, 0.02462364901619918, 0.01628564368496721, 0.03226439270415682, 0.013935434832216598, 0.031901456540262885, 0.01626246195468173, 0.28297302353193, 0.29194006051422927, 0.2838070571648176, 0.27612478385596617, 0.28360049184684955, 0.28430700139355924, 0.2869349554627466, 0.3099732311356508, 0.29307347261634, 0.06887146197988514, 0.07836555880763896, 0.07422018583450185, 0.08113110069006302, 0.08139786075553368, 0.08396042409493532, 0.07363595585266991, 0.08315887186046644, 0.09100864776379891, 0.14196204050102246, 0.13016287749998623, 0.13235614840302146, 0.13808890327967582, 0.13006782971335795, 0.14625121342238467, 0.13764968758817686, 0.12749619367063003, 0.13247088398780904, 0.2162867734295495, 0.21306901994384653, 0.2313980468275152, 0.23426775236991215, 0.2329401562807044, 0.2225372773444928, 0.21866363824429558, 0.21348330375875402, 0.21146093179199044, 0.16958738254406525, 0.14389948927957752, 0.1524090503312231, 0.18369210319073104, 0.1779848204288148, 0.17943940996682828, 0.1647768179323582, 0.14730913178516913, 0.1528977922229584, 0.19643162231025402, 0.18942704281795342, 0.18904010461113707, 0.19568618765735413, 0.18230964784939518, 0.2028489028820324, 0.19070433210782067, 0.20946381484516785, 0.20811514497044092, 0.17251938138319223, 0.1677597310149156, 0.1730576809105594, 0.17400912439887506, 0.16633462089898055, 0.1681353055907815, 0.17273154661919565, 0.173192135894364, 0.1733177926982089, 0.17845130891181016, 0.35142780491657544, 0.2442958493497136, 0.3115629587124944, 0.18011274349127493, 0.3371497092788337, 0.16726373925789617, 0.3186459290201643, 0.1687637356975843, 0.1875683902690949, 0.17490619687217457, 0.19129218142924842, 0.18221496416282734, 0.18121314874322403, 0.1712989551869285, 0.20426444742803318, 0.15559324547326925, 0.211536814863043, 0.18042079591973925, 0.17748012426041027, 0.1839418104701558, 0.18375777412345673, 0.18621825577580187, 0.1863214087519569, 0.18968780717255918, 0.18952514883760463, 0.1948423787198088, 0.07250309508415287, 0.06865772584359997, 0.0698061930750351, 0.07956240154826133, 0.06949746719041738, 0.07737802546535599, 0.07930187249174159, 0.07360202743428923, 0.07332389321621013]}, "mutation_prompt": null}
{"id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 33, "fitness": 0.1791754139560418, "feedback": "The algorithm AdaptiveLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "f8494565-5b5f-460b-9e34-89d05ece0125", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "240fbf4b-c75c-4874-8eb5-b7523fa61206", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "4df26d2b-2d79-4425-ab28-9de52d07abf4", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "f72709ef-8375-415a-96ce-bde1626aed36", "solution": "import numpy as np\n\nclass RefinedLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "RefinedLevyFlightGWO", "description": "Implement a variant of Enhanced Dynamic Grey Wolf Optimization (EDGWO) by incorporating Levy flights with adaptive step size and refined parameter updates for enhanced exploration-exploitation balance.", "configspace": "", "generation": 36, "fitness": 0.1791754139560418, "feedback": "The algorithm RefinedLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "181fe46a-2e30-4cb7-985a-baa0bac3055c", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "03db5e11-63d0-47ef-b6a4-6dd09922d33c", "solution": "import numpy as np\n\nclass HybridBatGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "HybridBatGWO", "description": "Enhance the exploration capability of the Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm by introducing a novel Hybrid Bat Algorithm with Dynamic Frequency and Amplitude adaptation for improved convergence speed and accuracy.", "configspace": "", "generation": 38, "fitness": 0.1791754139560418, "feedback": "The algorithm HybridBatGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "d4e67cb4-bf1f-40a6-b63c-c4a4d13fb92b", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "ab324865-24f2-4027-8552-238c7ecdb9a5", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "162b5a4b-bfe0-4731-bef9-43b8c203ebcb", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "39ecead5-3662-4ce2-844e-4de386686733", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "6c9728ec-3445-49b4-841c-957edae7f17f", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "7d1734c4-2689-441b-b726-97b93ababe88", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "EnhancedDynamicGWO", "description": "Enhance exploration and exploitation balance by incorporating adaptive Levy flights and dynamic population sizing in an Enhanced Dynamic Grey Wolf Optimization algorithm for black box optimization.", "configspace": "", "generation": 44, "fitness": 0.1791754139560418, "feedback": "The algorithm EnhancedDynamicGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "e0686d7e-72b7-4943-b2cf-4e30da4ccf9c", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "8cae52a9-9f65-47aa-b5e6-d69a8732a748", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "e2c82f07-4b24-4b71-9f09-ce242a4e2cae", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "d919c926-7cc3-48a4-9e71-2968b5d64a68", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "3d23eea0-cd5f-45d3-9454-e1a32dcd656c", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "6d74db9b-1ebb-494f-bca6-30876f960005", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "f6197768-dff7-4e9b-9dd7-a9a08bfca40f", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "81e29927-80de-470f-93aa-993965cc03e4", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "466ebb4f-2f41-4b47-9692-f6b48cd40a1d", "solution": "import numpy as np\n\nclass RefinedAdaptiveLevyFlightGWO(AdaptiveLevyFlightGWO):\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                \n                # Updated position update strategy incorporating crossover and differential evolution components\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - self.beta)\n                X = self.alpha - A * D\n                J = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if j == J or np.random.uniform(0, 1) < 0.5:\n                        wolves[i]['position'][j] = X[j]\n                    elif np.random.uniform(0, 1) < 0.5:\n                        wolves[i]['position'][j] = self.alpha[j] + np.random.uniform(-1, 1) * (self.alpha[j] - self.beta[j])\n                    else:\n                        wolves[i]['position'][j] = self.alpha[j] + np.random.uniform(-1, 1) * (self.alpha[j] - self.beta[j]) + np.random.uniform(-1, 1) * (self.delta[j] - self.alpha[j])\n\n                # Levy flight\n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "RefinedAdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, adaptive levy flight step size, and improved position update strategy incorporating crossover and differential evolution components.", "configspace": "", "generation": 53, "fitness": 0.16151156848649814, "feedback": "The algorithm RefinedAdaptiveLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.2975927338778632, 0.27572341815226875, 0.3108526803133309, 0.28319494118043453, 0.26232183312567325, 0.2355874493991693, 0.28395401898885597, 0.32956648393033106, 0.2623543581362966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09243225949930023, 0.08981313259588586, 0.08259261891756942, 0.07493977287598119, 0.0793867781382378, 0.06507931480559492, 0.07764451348629131, 0.06680137488866089, 0.07436979408050015, 0.0765983305351059, 0.07995270560888457, 0.061509384684559354, 0.07314845911252266, 0.06911465779597181, 0.08013895495152068, 0.06400810769791165, 0.06773159340006496, 0.05446945017857374, 0.9842994242296613, 0.9926919122694788, 0.9902789990621405, 0.9928452313191007, 0.966493153746529, 0.9877674146713239, 0.9838896216233786, 0.9869304858007589, 0.9891053872926923, 0.1472743776547375, 0.11328903048094197, 0.11196350343881056, 0.14169043893661015, 0.17868429690270027, 0.13512923304583624, 0.11658303198336684, 0.13265232723175135, 0.13603594856742207, 0.17679572587515735, 0.21949225815159212, 0.20262700345750817, 0.17397255466119166, 0.1794551952664296, 0.1932445205946397, 0.16702916392719147, 0.18901453060376538, 0.17875481968506357, 0.12499071344024137, 0.08289962423516894, 0.09823106960151295, 0.06456678768809965, 0.06891179600679442, 0.08254029153727227, 0.05582498400175173, 0.07575282333639954, 0.06695508520465432, 0.1329783184860216, 0.11850904453141409, 0.11712769955670099, 0.12681424817572662, 0.12438836684167232, 0.11835699607335248, 0.11100767537037737, 0.0997172131350067, 0.1402619063627284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05300248255849582, 0.032071314856029653, 0.05221221177755675, 0.03837652432401062, 0.02386975737775887, 0.052377861747005205, 0.05816280650316363, 0.041647087325537124, 0.0490552736705957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02594494688192428, 0.013938713911167744, 0.01276083953253837, 0.008319328674754933, 0.00602595677562201, 0.005060606147947899, 0.020401699584092103, 0.01948455714196584, 0.02939048083875828, 0.2857781307918126, 0.28417492783532894, 0.308501277926163, 0.2608852828686211, 0.271414605775431, 0.3257147281323155, 0.28589226748134633, 0.3085365258241024, 0.2634105452585467, 0.07723112673098653, 0.05952097315808347, 0.060860954208547424, 0.08067140903338421, 0.07364727421721962, 0.08183644830782744, 0.07975272570914238, 0.0774883329099102, 0.07315613443662261, 0.13466496618645452, 0.14339955153832473, 0.1459708338105744, 0.14684265197880308, 0.13975290655967343, 0.12796326263940705, 0.1328443460483575, 0.15184961105487838, 0.1553228394376207, 0.19863118036759064, 0.20361788030891126, 0.21245120097808545, 0.22877960417906673, 0.21725792460288462, 0.2151624800738784, 0.1999698525523228, 0.2068833979011354, 0.19206427313447672, 0.15387256678635564, 0.1533814385594383, 0.14096247268410955, 0.16396039940662954, 0.15447303224477915, 0.1544206633673595, 0.14328494718035012, 0.1717550322956416, 0.141018434598157, 0.20177323854951978, 0.18598511372547633, 0.18694168151673973, 0.1793005048610683, 0.19474173595258393, 0.20472340971114766, 0.18001809899133292, 0.19257638618589368, 0.17037071655034797, 0.17595657610004056, 0.17677070601614486, 0.170424914915843, 0.17152656589996773, 0.173277256836058, 0.1660838414602256, 0.16911883391455884, 0.17020989654220609, 0.16910837371160414, 0.2019249409758238, 0.20169735160703628, 0.22178527766742995, 0.19712300728727394, 0.13321877429943774, 0.2644878422962721, 0.20830781899666895, 0.23917268877687525, 0.1838019060525512, 0.17155971760853483, 0.22168203392873442, 0.1702660146414432, 0.18691933752347312, 0.18314233599280705, 0.2485517212686308, 0.18703859223015584, 0.16669884946264957, 0.2051487607946505, 0.18483153837524702, 0.19588412090642404, 0.19018028033500256, 0.1901286192738013, 0.18738942977922712, 0.17646002241143433, 0.1727657275933927, 0.16956975701883825, 0.18525651002247145, 0.06296332575348274, 0.0668127052682248, 0.07251939591656686, 0.07504473288444191, 0.06823730762428082, 0.06826226707378025, 0.06561708553070966, 0.06626821785840908, 0.07433570147503266]}, "mutation_prompt": null}
{"id": "7e886c71-bd1a-4033-8b60-a24aa37c9472", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "d6bf99c1-382e-4a1c-8b04-b611ac992195", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "a23d2420-66b3-44c2-a1ea-73042c100899", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                \n                # Opposite-based learning\n                wolves[i]['position'] = 2 * np.mean(wolves[i]['position']) - wolves[i]['position']\n        \n        return best_fitness\n", "name": "EnhancedDynamicGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, adaptive levy flight step size, and added opposition-based learning for improved exploration.", "configspace": "", "generation": 56, "fitness": 0.10527524436318722, "feedback": "The algorithm EnhancedDynamicGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.1801497200499813, 0.18426825954294823, 0.1940313220608848, 0.11333980105065711, 0.10373779645848857, 0.12239064222228024, 0.17727379808463606, 0.19378746240464584, 0.190451263770678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05891004412807599, 0.06133928900128649, 0.058402086419795385, 0.03496317334618704, 0.047152736264412076, 0.04205093082763578, 0.029358338242986393, 0.02848986322854219, 0.041101498357268285, 0.08252099275572855, 0.06343947627860291, 0.07670452196398458, 0.059951692638282816, 0.042985235284997314, 0.04210736770174717, 0.033397784526528085, 0.022003962322824422, 0.026673028904258933, 0.04684977645082655, 0.04417946053578947, 0.04579809265809087, 0.05638033331936476, 0.05608151249676918, 0.05077839632043035, 0.06404143633796178, 0.05148078480823148, 0.056282829993646755, 0.06274794416174423, 0.01339649898853279, 0.050997411195596976, 0.11016892469006556, 0.08443310009648197, 0.07805654835131859, 0.06114870109410009, 0.07995580261332691, 0.016795482692664176, 0.16606812515833103, 0.15288147046918255, 0.1468126827745333, 0.10297608065181507, 0.11659848011734286, 0.11605657358039956, 0.14839366488875871, 0.10901220809127898, 0.10805938461538878, 0.017596267323845893, 0.041735052893202784, 0.04184021316429076, 9.999999999998899e-05, 0.0022939212082891958, 9.999999999998899e-05, 0.0004788051420342443, 0.00039616552874810473, 9.999999999998899e-05, 0.13302342871286732, 0.1451100518477373, 0.16181374396263493, 0.14453710858415247, 0.13475605357522769, 0.17122326036319369, 0.1337315063011476, 0.1486575412463702, 0.13377513020550724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10495433614197114, 0.09310822798122065, 0.09137903630675825, 0.08551966275582668, 0.0892839948897054, 0.08342632625187074, 0.03839673958427847, 0.03617976301428394, 0.08140733047053617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20761210489022452, 0.1945184453471589, 0.19713793647547628, 0.17959040839538642, 0.16251138906129303, 0.19355373322634228, 0.25663251242766394, 0.21050467195535216, 0.23634859400323827, 0.03234406630746467, 0.029676448569890046, 0.04149880861481836, 0.07073403998981043, 0.07022763223907547, 0.07974710355215797, 0.056789901539071264, 0.059279915908862835, 0.07810022437647746, 0.12782270951750818, 0.15116943346073808, 0.13592438010662555, 0.16100533925886606, 0.1453316076886163, 0.14404993078401462, 0.15039137068622477, 0.14013464853727509, 0.14655460818387023, 0.18524336692874455, 0.183746532372693, 0.18136729211975366, 0.19232068864060559, 0.20197539312061374, 0.18788082593924582, 0.17316989239232117, 0.17532953546778685, 0.173232483625541, 0.12048911089140024, 0.13099607607472552, 0.1384250360767746, 0.1397366895723966, 0.12760821409479672, 0.13282029122930528, 0.12142056529695988, 0.11658730245089188, 0.11716866869252607, 0.21211540733654533, 0.20724343324607597, 0.21051373978178167, 0.22185943877105496, 0.19389022787121146, 0.20281879072299636, 0.22867919945776327, 0.22321729444290694, 0.20845433291696258, 0.1535982508482141, 0.15644090680158684, 0.15950738333493808, 0.16972549716131347, 0.1761506996691089, 0.16355583004519614, 0.17861678060694808, 0.17484645032360024, 0.1760529871920531, 0.17098453354050858, 0.1646827721341222, 0.21118245673780167, 0.19922187677633196, 0.17176069932477822, 0.16843203688496688, 0.18032528188300945, 0.21719872071457214, 0.21601611325694647, 0.24799240934749256, 0.3239598521385678, 0.2850743988907768, 0.2517366500008532, 0.22438153108248327, 0.23380697122155192, 0.20607151190892703, 0.19727817810370984, 0.21331086305950475, 0.18791898493004378, 0.1786245913954343, 0.1846026903615774, 0.18427054579444713, 0.17859059175238667, 0.17860993569635852, 0.19012171107120213, 0.18862405618642597, 0.17181938132180552, 0.07723952184465088, 0.09456155554459433, 0.08806139583160744, 0.07925734666294026, 0.07883210251478556, 0.07725632192724896, 0.0713569341084681, 0.06971808023989257, 0.07463613519080203]}, "mutation_prompt": null}
{"id": "b8cbf430-fc9e-4317-9d22-5ab58ea2260f", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n\n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n\n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n                \n            update_alpha_beta_delta(wolves)\n\n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n\n        return best_fitness", "name": "EnhancedDynamicGWO", "description": "Implement Enhanced Dynamic Grey Wolf Optimization (EDGWO) with fine-tuned parameters, improved exploration-exploitation balance, and adaptive levy flight step size for better exploration, refining some individual lines to enhance performance.", "configspace": "", "generation": 57, "fitness": 0.1791754139560418, "feedback": "The algorithm EnhancedDynamicGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "41b4799d-07f1-49bc-94df-dc044f35ae28", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "7cd8290e-2f07-459f-ab13-b88e3e4e1a24", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "453a1415-dbff-4db5-8630-31670d47efe1", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "e441e315-a71c-40db-ad35-ae0cdc41ffa1", "solution": "import numpy as np\n\nclass EnhancedDynamicGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "EnhancedDynamicGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, adaptive levy flight step size, and additional diversity maintenance strategies for further optimization performance.", "configspace": "", "generation": 61, "fitness": 0.1791754139560418, "feedback": "The algorithm EnhancedDynamicGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "4fbc20ba-5765-443d-8b20-aa86d08431dd", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "b16e480e-7542-4428-8f98-4bbe2a4a80d0", "solution": "import numpy as np\n\nclass ModifiedLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.log(dim))  # Modified dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "ModifiedLevyFlightGWO", "description": "Implement a modified Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with adaptive levy flight step size and population size for improved exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": 0.17637736596635775, "feedback": "The algorithm ModifiedLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.36199362968655835, 0.3573809659437477, 0.32472050338746583, 0.2648139463423159, 0.26511235333903405, 0.27540014482204445, 0.2970107817859283, 0.3102369320488383, 0.30657630807688363, 9.999999999998899e-05, 9.999999999998899e-05, 0.010665795937715106, 0.012079726564246496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10276437900668645, 0.09132736342923675, 0.10653596824170708, 0.07734028009835714, 0.09778714136080491, 0.08792717005867978, 0.09138732770469982, 0.09873702536482798, 0.09543433145198454, 0.0812687836153293, 0.07567560870316137, 0.07353798797275957, 0.08453634065237003, 0.08403429198909473, 0.08387843995031341, 0.07595933599967752, 0.07000473850592515, 0.07747378194075716, 0.9731744093290086, 0.8687831522955465, 0.9333000102642139, 0.92153629865972, 0.9021326497169097, 0.9443137117833788, 0.9504067854085098, 0.8633147839519546, 0.9561626918655755, 0.16872898801886427, 0.17797838250350018, 0.15436665050932552, 0.16123726794331472, 0.181578920761158, 0.17022296142524596, 0.14679470416330964, 0.17421533080132756, 0.16790218825588799, 0.2647374541415758, 0.24019310551258632, 0.25161459443147327, 0.19999617736205377, 0.21302228664339973, 0.2056230494774821, 0.2284544850368323, 0.20787217721888274, 0.202292559468639, 0.10708759061542572, 0.11658226315290776, 0.11861465512248293, 0.1270902202458365, 0.11446004262717857, 0.11436509910254478, 0.11676120924823785, 0.10235415792996483, 0.11289234281795235, 0.14030701273493473, 0.13994435825300622, 0.13542070363805747, 0.13906812451039585, 0.13618053659001506, 0.15349056396056315, 0.14748487002256938, 0.1443741544679299, 0.15146364289515823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02119339517771912, 0.09928924068542488, 0.079730572150986, 0.09125676161423746, 0.07480834044913864, 0.08163320311323496, 0.058974731293939264, 0.0900207780190031, 0.06930874817615518, 0.10565364856426918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05064228873190746, 0.028543642211755982, 0.034180025123433544, 0.02309699745934468, 0.04417329631884326, 0.025107375069479576, 0.023522969927951998, 0.027205078002997318, 0.030194151059665608, 0.3162504926724239, 0.3071014618115814, 0.306034771927139, 0.2995437905360937, 0.2953610494625458, 0.2860416279472522, 0.3310378099138399, 0.32959890533368785, 0.33195089869746375, 0.07616876434799902, 0.08123854565854804, 0.07926108723927605, 0.10763393241056152, 0.11266237675847046, 0.09237523277013682, 0.08699505649521777, 0.08970472663764939, 0.10209501862573911, 0.17304297827373671, 0.14969328240867474, 0.1507677952461789, 0.14184084116607232, 0.13944078689530393, 0.1457749187093319, 0.15144849645425962, 0.14504974822386707, 0.1323529944889027, 0.22893390727646734, 0.23811524731591216, 0.22720428699395112, 0.24805071650874067, 0.24361992847446512, 0.2490373187316578, 0.22484654877504173, 0.24364637507332, 0.22345517388179714, 0.17463054587084248, 0.17171556157091472, 0.17671894922926057, 0.19952250799064586, 0.18640934148021848, 0.20717704126184944, 0.15969958007017815, 0.1681251154459824, 0.17030979705623883, 0.20375914475385049, 0.20438347888834607, 0.20536912558582265, 0.2100012643455681, 0.21456348362937228, 0.21441949928027826, 0.20795316298790845, 0.2069263639303205, 0.20825409953093665, 0.1697666060572084, 0.1797514206018026, 0.17703337192999857, 0.17153971831141024, 0.17344950573364348, 0.17178633966280754, 0.1824201328608135, 0.1702424042431474, 0.17953299334604267, 0.1851994908057264, 0.18099775976342825, 0.18033623592907877, 0.21460625042393267, 0.35829718755350337, 0.35979110472637776, 0.38123758099773164, 0.14976856826050766, 0.1498474439494315, 0.25717526639427635, 0.16110597038995944, 0.19807292232125984, 0.1876849630317704, 0.23183902945968815, 0.1979007785522503, 0.2753676694285757, 0.11254726368145007, 0.1515323196699192, 0.19003994714845007, 0.19108523025583368, 0.18594941344183746, 0.18284722253661956, 0.18435727275149716, 0.18026903709117925, 0.21325648730207636, 0.19371319675231158, 0.1978783652772398, 0.08474821568853552, 0.07961399558183824, 0.07933494242747952, 0.08341561928655228, 0.08298255586639425, 0.07876634901601609, 0.08790000317375002, 0.07861931084874818, 0.08615467713385982]}, "mutation_prompt": null}
{"id": "3d13e046-2b78-4e18-81ea-972d8e28eee7", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "a11a16f8-0938-4c22-b087-0c1213067fb1", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "ee785fab-7040-453f-b911-1b2623114783", "solution": "import numpy as np\n\nclass DynamicPopulationSizeGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Dynamic population size strategy\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicPopulationSizeGWO", "description": "Enhance the Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with a dynamic population size strategy to adapt to different problem dimensions.", "configspace": "", "generation": 66, "fitness": 0.1791754139560418, "feedback": "The algorithm DynamicPopulationSizeGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "466750e5-26f0-4ccf-8a0f-4fab3455fe55", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "74f079c5-a199-41c0-9167-4f241cdd3518", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "ac74c738-c579-4694-956a-0eb12dae395d", "solution": "import numpy as np\n\nclass ImprovedLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                \n                # Introduce a differential evolution-like mechanism\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = wolves[idxs[0]]['position'] + a * (wolves[idxs[1]]['position'] - wolves[idxs[2]]['position'])\n                trial = mutant + np.random.uniform(0, 1, self.dim) * (wolves[i]['position'] - mutant)\n                trial = boundary_check(trial)\n                \n                if func(trial) < wolves[i]['fitness']:\n                    wolves[i]['position'] = trial\n                    wolves[i]['fitness'] = func(trial)\n        \n        return best_fitness", "name": "ImprovedLevyFlightGWO", "description": "Improve the Enhanced Dynamic Grey Wolf Optimization (EDGWO) by introducing diversity through a novel strategy that dynamically adjusts the levy flight step size and incorporates a differential evolution-like mechanism for enhanced exploration.", "configspace": "", "generation": 69, "fitness": 0.15932130268051892, "feedback": "The algorithm ImprovedLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.27873065801858, 0.2939791159302423, 0.2833986607813871, 0.23290815993746894, 0.2827372698268841, 0.2574885102555631, 0.2633775470371167, 0.2511940704086001, 0.29220528792389455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08306886144151415, 0.06373955666024578, 0.08435350140086917, 0.07060329765142381, 0.07294022902673913, 0.09241437823985943, 0.08253087500000833, 0.07072237507275092, 0.08166048558234851, 0.07066086567227736, 0.0725215762502921, 0.06359206578365573, 0.07498015384125234, 0.0651629402914754, 0.06086161864176465, 0.06090011649336935, 0.06201816507650615, 0.06823848857455161, 0.9382294069560264, 0.9274030409414606, 0.9027604858806324, 0.961155371835597, 0.8252417710411605, 0.9710781194308704, 0.9727797643795504, 0.9689916930922589, 0.9847547891630919, 0.12805849657220658, 0.11790439486311366, 0.1403314580686934, 0.13332548049574056, 0.15952180503244595, 0.14058190007200466, 0.15748045738779803, 0.13877811916774063, 0.1479107582628736, 0.23675782452080274, 0.2167948785974253, 0.20611615314164078, 0.19196695523464957, 0.180619935809056, 0.210851266298696, 0.17857235681751626, 0.17298598320542846, 0.22282364532251497, 0.10521234084771136, 0.10099017214977501, 0.09259618619835586, 0.08048071199003137, 0.06987736540839995, 0.06840679623359869, 0.10256332418944436, 0.06634987106470269, 0.07818560522451823, 0.13958011524222436, 0.12523852523784995, 0.12320488008691755, 0.1373598026812355, 0.12430446848766019, 0.12635868044041343, 0.1251191351099573, 0.11347507986673044, 0.13962608625541084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031905619143447805, 0.06310136797532373, 0.048473223293069134, 0.0652410062619736, 0.06740638512415009, 0.054480714525589224, 0.10508972156825402, 0.038435381770626, 0.046425422789632464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0397992562297923, 0.015654180278313667, 0.025611134009197123, 0.016354999600558084, 0.025503143056773148, 0.018060483996251375, 0.02130869979627148, 0.014630073002766975, 0.030803659303520137, 0.26483747922867884, 0.27120665402899136, 0.31015174343275276, 0.2857757397018764, 0.27070089828869603, 0.25980096656914786, 0.28432272341717446, 0.3081661936037353, 0.301402802207847, 0.06715674880041456, 0.06327389265706462, 0.10408403968898816, 0.07766429985101875, 0.06449243167508956, 0.06977632209513163, 0.10401028888621566, 0.0679433892818535, 0.0748778698102589, 0.11857332589059244, 0.1377688356485942, 0.12472284114592891, 0.11850470662911394, 0.11980643744296848, 0.12739433238447362, 0.11077902666883821, 0.12400998586173595, 0.15243031153596298, 0.21028580527048102, 0.20424848162879183, 0.19852603279955283, 0.22778723785241428, 0.21691998932494772, 0.22958896611270552, 0.19191070342111238, 0.22026265538403866, 0.1967609414176068, 0.16474274017775936, 0.16025321391828706, 0.15006732531451017, 0.17313072079408753, 0.16438558781579016, 0.16052706448873777, 0.1467932568425413, 0.15617653545589893, 0.14429642711374346, 0.18446003963713087, 0.18533773555998811, 0.19258383432868653, 0.18060343141897717, 0.17512992313548803, 0.1928368437228959, 0.19668647140687479, 0.17627370254866292, 0.18662454946567097, 0.16443495503125594, 0.17265491396823163, 0.17107691149373516, 0.16119088524352843, 0.1669179014130645, 0.16289124420046575, 0.16872263985722546, 0.17176874650057383, 0.16337145678082032, 0.17422073288548912, 0.17293282677093536, 0.257381623653951, 0.22816319519898798, 0.181497623075492, 0.17003460916385116, 0.21319245387973507, 0.16273230605541955, 0.15812934034729165, 0.16027042380079093, 0.16956999561741415, 0.16540953151363158, 0.17145070307450982, 0.1668900729725714, 0.16658732107306662, 0.18462633482395663, 0.19251987337764853, 0.2232510071642948, 0.1728857281974726, 0.18750247757508054, 0.1995393218286332, 0.19052920722986677, 0.18324440040827827, 0.1778150493605708, 0.1836611277752166, 0.17214035506536873, 0.20813920103486472, 0.07593648013308762, 0.07674204581389044, 0.07018116346618886, 0.07445001537450557, 0.06379588610534193, 0.06404891483716568, 0.06497849868263983, 0.06654188917363191, 0.06786672434973773]}, "mutation_prompt": null}
{"id": "35d5e6bf-b230-4daf-820a-bf7f38edfc08", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "c3ff7bdc-e4b1-46c5-9aee-0a5b74c174ed", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "3f5fe91a-e193-41af-9508-27c04a753064", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness\n", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration, with a 10% probability of changing individual lines.", "configspace": "", "generation": 72, "fitness": 0.1791754139560418, "feedback": "The algorithm AdaptiveLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "4d3a253d-3a90-4448-9cfc-595e4a81c2a9", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "61b7d935-5bde-4a36-ba00-fa1013844fc1", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "a2a786bf-b729-4a81-a338-9f722db2e088", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "1259781f-883b-48f3-ae14-66867642f30d", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "12fafe3e-9d45-43eb-bc2c-8385987c22a7", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "55dd5c89-e582-4944-a626-1f571c994644", "solution": "import numpy as np\n\nclass DynamicLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n\n                # Introducing a dynamic mutation strategy\n                mutation_prob = np.random.random()\n                if mutation_prob < 0.1:\n                    wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                    wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicLevyFlightGWO", "description": "Enhance the population diversity by introducing a dynamic adaptive mutation strategy using Levy flights for exploration in the Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm.", "configspace": "", "generation": 78, "fitness": 0.17643169898193817, "feedback": "The algorithm DynamicLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.3231675620208877, 0.33095542843204606, 0.3190579156359268, 0.2749203314110421, 0.27340802774343065, 0.2853972855225183, 0.29901164386751966, 0.2871598249443067, 0.28684610577158387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005543180961603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0884725560947256, 0.097152794634362, 0.08297528619629757, 0.08531993698752172, 0.09074082749531664, 0.08180053378857322, 0.08042705533600425, 0.08990026607956914, 0.08791145073657736, 0.08474462128473825, 0.08789126094686439, 0.0714586902849138, 0.08087574281422294, 0.08027259330378889, 0.0740522795756926, 0.07785187487679635, 0.08309705148781754, 0.08357117765610234, 0.9640675130086327, 0.9793205283345155, 0.9230430190573324, 0.8931599949149212, 0.9575464838076212, 0.8071691085518945, 0.9561231162243344, 0.9528296745329038, 0.9405314193916618, 0.17153927529643131, 0.15642692390851698, 0.15988253490752558, 0.17001681276694747, 0.16705340490836318, 0.17801524083956832, 0.15402827980687472, 0.15787437486962586, 0.17595454921639397, 0.24076166221659312, 0.22620838637777707, 0.24333044960440398, 0.2113789718969118, 0.20859976242348, 0.23336020810311842, 0.20326928928549537, 0.22254148878895696, 0.20727873310662592, 0.11905144219052677, 0.12003158997095542, 0.10217325124456167, 0.09376857231400137, 0.10846766666731311, 0.08357019329359805, 0.11655348376053531, 0.10869109884576666, 0.10550000300037299, 0.16649339547967135, 0.1496418816405809, 0.16112835765302047, 0.13803817643278926, 0.14013661105762298, 0.15204923850122654, 0.1394075896022321, 0.14923549258831914, 0.1370051384579165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006789608886576981, 9.999999999998899e-05, 9.999999999998899e-05, 0.07709181116055064, 0.10935543194708319, 0.07219619032809366, 0.05772008809805229, 0.06472416594240227, 0.04156223928345537, 0.09557382758748967, 0.1324949316609213, 0.07244964297081002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029922827519902273, 0.02551503010141809, 0.03093637835428309, 0.027784062432852474, 0.051629630747473176, 0.026896502707779324, 0.023577096282229704, 0.04310521482876373, 0.03212269791620126, 0.3190096325331325, 0.2868128537273743, 0.29736149909433485, 0.32572196970089884, 0.2822815758952645, 0.29044168956106386, 0.31076711306296934, 0.3184474375487757, 0.33569633339617777, 0.09565599373326716, 0.09009719871747113, 0.07531269259348883, 0.10644486156115451, 0.08123876392408458, 0.09424106671561183, 0.09170653651846838, 0.0993076901203096, 0.09025164624766802, 0.14869223484061678, 0.14565355264493862, 0.13878420054101281, 0.13885546758194378, 0.1420928639603002, 0.15589453915279605, 0.24686455132020824, 0.20077151356934764, 0.14132835539181088, 0.23353195740256527, 0.23736642886884607, 0.24059091734778482, 0.2402885099605142, 0.25288864743626505, 0.24959955476129247, 0.2196041205790018, 0.22215907499579346, 0.21380746122112493, 0.16634992744971655, 0.16412360451077057, 0.16229333967396065, 0.21036096873356114, 0.1924829601740029, 0.19393771320082653, 0.16347070914156647, 0.16082805877377926, 0.15530068295686617, 0.1946686338907876, 0.2443540512617316, 0.20569029672352712, 0.20522596569185314, 0.21567519805249202, 0.19646570040941447, 0.19930934711838588, 0.19943754957614157, 0.21316385759347478, 0.17303569124265084, 0.17224184445347313, 0.17320553775402203, 0.1854791539539078, 0.17409662110925328, 0.1820684770428903, 0.17477112188654187, 0.1844067558432695, 0.17661359542945287, 0.18334287417466366, 0.18383086879381694, 0.18075631306170203, 0.3960232980732473, 0.18582036091507437, 0.3126012173137994, 0.13712571938782003, 0.16825915553964732, 0.3787038521821283, 0.3435438820612451, 0.19489269058399605, 0.3584731375570984, 0.18683475835369845, 0.1807563321017437, 0.189850754093142, 0.18003127933584162, 0.14781872451205746, 0.2618038403339946, 0.17542074878196623, 0.18691939254561296, 0.1904356545683864, 0.17403201066740825, 0.19254573416213472, 0.17439801697032054, 0.1792400653604589, 0.17536202920229316, 0.1856157583664343, 0.08238085566261255, 0.07976282641061838, 0.09175901933779329, 0.07590313914273972, 0.07718325256206093, 0.08014382845380785, 0.07929393848249511, 0.08185558762643541, 0.08771312004883147]}, "mutation_prompt": null}
{"id": "bc451ea9-142f-4399-a86e-5b85d8dd3808", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "12aab73b-3465-4488-9216-b12a76da53bc", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "d7076017-216a-4647-ac11-6342939289a2", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "3b5939d1-7bdd-4ec3-9de2-56d30bcf050c", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "695a04e9-dbc4-40b0-967b-4032424dac23", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "c94aed10-1f83-46c6-9cf5-b1d7d8c02aab", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "4b37eadf-d394-4522-83f9-46d2f151d486", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "0d4b26e4-74e8-4d83-8943-fbed8bd37ec4", "solution": "# import numpy as np\n\nclass ImprovedAdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "ImprovedAdaptiveLevyFlightGWO", "description": "Improve Enhanced Dynamic Grey Wolf Optimization (EDGWO) with adaptive levy flight and dynamic population size for enhanced exploration-exploitation balance.", "configspace": "", "generation": 86, "fitness": 0.1791754139560418, "feedback": "The algorithm ImprovedAdaptiveLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "9e9278ff-31ea-491c-8935-27670a904c45", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "0ee2717a-a7ef-4a81-ab63-6716726d9a67", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "f70e553f-f5f1-4c9a-aca1-176679b0c2b1", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "f11f55f7-76a0-4526-8247-b49a39cf1453", "solution": "import numpy as np\n\nclass DynamicAdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight(beta=1.5):\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                mutation = np.random.standard_cauchy(self.dim)\n                wolves[i]['position'] += step * mutation\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "DynamicAdaptiveLevyFlightGWO", "description": "Enhance the AdaptiveLevyFlightGWO algorithm by introducing a dynamic adaptive population size and a mutation strategy based on Cauchy distribution for improved exploration-exploitation balance.", "configspace": "", "generation": 90, "fitness": 0.16318317333248733, "feedback": "The algorithm DynamicAdaptiveLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.2791256256694844, 0.296236221099356, 0.2911527519450883, 0.29705428081877594, 0.2659362165446273, 0.2757234744353009, 0.29836424203876855, 0.2545545407755855, 0.29667453706000835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0712737824261338, 0.07066505040175874, 0.08023278513955301, 0.07150985715645275, 0.07014508875945558, 0.0862722358795247, 0.07651912875793188, 0.07813248264127592, 0.08593301496582717, 0.0630615963301494, 0.06869015495040842, 0.05827438585872424, 0.06049233021277867, 0.07762666194601187, 0.05413365558050176, 0.06771088395075253, 0.0621466182897642, 0.06669508413988456, 0.9696340105437777, 0.9833707264154418, 0.9640649726533446, 0.9585187930204752, 0.9601900345046553, 0.9770516186134213, 0.9394543297173243, 0.963208585183254, 0.9677431234856273, 0.12398988547912415, 0.14527855767486175, 0.1513963622485227, 0.1432011050731904, 0.1589169097051687, 0.12416819787942057, 0.1333919185746274, 0.13566401572721787, 0.12978529043798404, 0.20436770507658153, 0.19409268193940432, 0.18611512224715354, 0.18759611745140425, 0.1979875160577491, 0.18589622608100076, 0.17818622985341903, 0.18280777280079696, 0.20118791250337853, 0.09311453796568003, 0.08962064743588238, 0.09869473739159274, 0.08090731480331703, 0.0745607846138282, 0.08942988265988827, 0.09030648445377432, 0.08989600109871376, 0.0712612881482031, 0.12959498822580862, 0.12449865916679959, 0.13085839802380272, 0.10877173533252049, 0.10609681781619162, 0.10551874972372277, 0.10016204540707385, 0.10104150791486954, 0.11657878494646212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002600926393578229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08093978168067029, 0.07747090088552211, 0.08019090873968182, 0.06524530826566077, 0.04918171337127042, 0.0270164561778804, 0.06914457933139184, 0.08226076774744706, 0.08742863304057591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011856898863771503, 0.025220574085965897, 0.013283726996771827, 0.026779883966112306, 0.018561245588414543, 0.008115982524996124, 0.017689225367772288, 0.0309005833137167, 0.02252115358310114, 0.2740142001962439, 0.2812518737275973, 0.27618887031518946, 0.3074969258380972, 0.315208285426276, 0.26906874688648186, 0.2742960843655192, 0.2786570331050673, 0.2833093659325334, 0.07438121464262237, 0.06269558745036097, 0.06926548588706771, 0.08444079317945252, 0.07545099991698867, 0.0891926977733376, 0.0742872389650765, 0.07768388243912727, 0.07777854068971879, 0.1329699435717706, 0.1323613044542541, 0.12747146364723816, 0.14474361191884033, 0.13535432005167802, 0.13278824556441782, 0.13333957044175293, 0.16362232904207485, 0.13009921553394344, 0.2034271980061073, 0.2084824388265739, 0.2122257169891948, 0.22817277241483613, 0.21798556102349698, 0.254235656429036, 0.20852260850820048, 0.2098622431345719, 0.20484145491591477, 0.16881340359045116, 0.14552883204537115, 0.15422465001885066, 0.16662490660243057, 0.17903446440005244, 0.16176519800029165, 0.14830890451419598, 0.1487080477402205, 0.15793484335352515, 0.20414442752988893, 0.20926230321344008, 0.1898696810217061, 0.1910827466497924, 0.1903843009487759, 0.1932416785444231, 0.1855454529021553, 0.22562021715427127, 0.188102303374029, 0.16497781763027963, 0.17871015376487198, 0.16707482919835126, 0.17801869208487897, 0.17513821615353553, 0.16706064311906377, 0.18340794183068476, 0.1771667863231029, 0.1697066232054667, 0.31127056990033486, 0.18474304966000987, 0.16550486403576292, 0.1894699029924687, 0.27358264335450244, 0.17409459669006833, 0.17194352513476518, 0.26522162329236787, 0.16242837809902377, 0.19401467628868885, 0.17263417392249047, 0.1778879415714686, 0.2129195798438902, 0.1863023779924874, 0.17671068462095485, 0.2044300088920593, 0.19516954563265831, 0.1954534074039258, 0.18208569556212584, 0.18165431167871393, 0.18531217178036297, 0.2091662832962321, 0.17043354369481456, 0.1787901377403065, 0.1771553772760872, 0.1875821292175619, 0.17131953999307092, 0.08615761353487217, 0.0862799262903069, 0.08369774644242223, 0.07087054277007843, 0.08071812498066488, 0.07546609851144237, 0.07915298376094049, 0.0772458059311879, 0.08453928812873224]}, "mutation_prompt": null}
{"id": "325ecfc1-df66-40e5-956e-7db80550f948", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "e2020987-1939-47f4-bfb7-d21336fd3314", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "94cd9981-13a6-428c-ae14-64310c77f788", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "d60ad8ef-3f2d-426b-a97f-75c15d27e78f", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "7744cbbe-4536-4d3c-b7d5-8a373f795b75", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "d7e02eaf-92b7-4288-8829-9daf9946117a", "solution": "import numpy as np\n\nclass EnhancedLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Dynamic step size adaptation\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "EnhancedLevyFlightGWO", "description": "Enhancing the exploration-exploitation balance of the Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm by incorporating a dynamic step size adaptation strategy based on Levy flights for improved convergence.", "configspace": "", "generation": 96, "fitness": 0.1791754139560418, "feedback": "The algorithm EnhancedLevyFlightGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "0de95673-00ca-4cd0-a82e-b012c46474e1", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "8980f791-0e93-4fc6-b88c-daf531947461", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
{"id": "f4e01926-c616-49d2-aceb-220fb9403de3", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_iter = budget // (3 * dim)\n        self.alpha = np.zeros(dim)\n        self.beta = np.zeros(dim)\n        self.delta = np.zeros(dim)\n        self.pop_size = 5 + int(15 * np.sqrt(dim))  # Enhanced dynamic population size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step * np.clip(1.0 / np.sqrt(self.dim), 0.01, 1.0)  # Adaptive step size\n\n        def update_alpha_beta_delta(wolves):\n            sorted_wolves = sorted(wolves, key=lambda x: x['fitness'])\n            self.alpha = sorted_wolves[0]['position']\n            self.beta = sorted_wolves[1]['position']\n            self.delta = sorted_wolves[2]['position']\n            \n        def boundary_check(position):\n            return np.clip(position, self.lb, self.ub)\n        \n        wolves = [{'position': np.random.uniform(self.lb, self.ub, self.dim), 'fitness': np.inf} for _ in range(self.pop_size)]\n        best_fitness = np.inf\n        \n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n                wolves[i]['fitness'] = func(wolves[i]['position'])\n                best_fitness = min(best_fitness, wolves[i]['fitness'])\n            \n            update_alpha_beta_delta(wolves)\n            \n            for i in range(self.pop_size):\n                a = 2 - 2 * (_ + 1) / self.max_iter\n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.alpha - wolves[i]['position'])\n                X1 = self.alpha - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.beta - wolves[i]['position'])\n                X2 = self.beta - A * D\n                \n                r1 = np.random.random(self.dim)\n                r2 = np.random.random(self.dim)\n                A = 2 * a * r1 - a\n                C = 2 * r2\n                D = np.abs(C * self.delta - wolves[i]['position'])\n                X3 = self.delta - A * D\n                \n                wolves[i]['position'] = boundary_check((X1 + X2 + X3) / 3)\n                \n                step = levy_flight()\n                wolves[i]['position'] += step * np.random.normal(0, 1, self.dim)\n                wolves[i]['position'] = boundary_check(wolves[i]['position'])\n        \n        return best_fitness", "name": "AdaptiveLevyFlightGWO", "description": "Implement an Enhanced Dynamic Grey Wolf Optimization (EDGWO) algorithm with fine-tuned parameters, enhanced exploration-exploitation balance, and adaptive levy flight step size for improved exploration.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe3478da-7f75-4c5e-b2e8-09e17beeb5fa", "metadata": {"aucs": [0.30987557877352156, 0.33380325861737525, 0.32507864975693623, 0.30616445904060996, 0.27688999711738393, 0.27281137813499856, 0.28681337113717664, 0.2987765745114923, 0.3224308687383919, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006225980254326302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10128165376933429, 0.08207027182700144, 0.10494435785557887, 0.08419713821447983, 0.09814823596642397, 0.1085594050262334, 0.07812397281818284, 0.08400772442663851, 0.08616398174872297, 0.0806514994607671, 0.07677161564994184, 0.07137084557061568, 0.07277655955770246, 0.0770377107641369, 0.07790852644609236, 0.07852156816287681, 0.07410175840194766, 0.08996208914822768, 0.9665824365397507, 0.8599256301254352, 0.868073797645242, 0.9105161415339209, 0.9850259019391922, 0.9663696076256952, 0.9738216518962519, 0.9689541378258708, 0.9838290162072298, 0.18388183570436656, 0.14300957219797383, 0.17090973618284555, 0.17036969388159762, 0.1764194935079102, 0.17169242792560668, 0.1724912810999285, 0.15986649254221608, 0.16552245831039092, 0.2320474957578994, 0.24625106777319583, 0.24160193425950027, 0.19894083323847112, 0.19948404348422866, 0.2190629087157394, 0.20819640591687316, 0.2072509663108525, 0.22359776249255392, 0.14657630208789885, 0.10979277698758194, 0.11003201697259046, 0.0946621428169847, 0.1128213144694098, 0.10746212903852614, 0.13444747552157676, 0.09490318043436052, 0.1120636059043052, 0.14402547695510526, 0.13940272215630212, 0.14394237492221051, 0.13724060786133285, 0.14618098967784277, 0.14368203769191057, 0.155952973864396, 0.15024300462192408, 0.1534645085139006, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555711446222884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006285660521679892, 9.999999999998899e-05, 0.0902117266868836, 0.07549033060032251, 0.07333747479162434, 0.0859198708182104, 0.06571581297735052, 0.06686372652252481, 0.08529609896176793, 0.06380594726823041, 0.06663819255733483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030516249453649835, 0.03581022016325186, 0.042660061065278976, 0.019355993313335595, 0.03812651998446692, 0.022085381665742365, 0.03266275113122863, 0.03190573425215171, 0.041125598050779755, 0.30241700166973606, 0.30294431373909114, 0.29527381546348763, 0.30979363634797386, 0.2855820592962971, 0.3117275025630042, 0.31582692190734274, 0.3285727944390544, 0.3091560282026461, 0.09316747276788151, 0.08486487428637612, 0.07587120441078021, 0.10479421368751463, 0.08953257297457806, 0.0832267885371264, 0.09621799221420368, 0.09801520502110361, 0.09679199665380434, 0.13792956108023058, 0.13988768354646186, 0.1648042760219025, 0.1585631938762192, 0.15087154939389713, 0.13855917104020887, 0.1412199891568593, 0.14425070320414957, 0.1403825765007205, 0.22066074206062203, 0.22046841946341222, 0.23022799710903896, 0.25887037527804047, 0.24391485934990687, 0.24024542653185565, 0.22002266953954863, 0.22942396810928845, 0.2191324505485488, 0.16982993986127692, 0.1673944381522624, 0.1944463825523587, 0.19476400152890727, 0.19435360970851634, 0.19062518639361403, 0.15658776708812583, 0.17085309203401922, 0.16457717715397702, 0.21743901781839903, 0.22125886135985995, 0.19773136923716939, 0.21290232789341257, 0.21672187618425165, 0.2342170810412415, 0.20700796329473303, 0.2038060824664104, 0.22335752379272622, 0.16798170960941372, 0.1820719860610619, 0.17223697903127488, 0.20506050325963665, 0.18259084927002178, 0.17318103141938102, 0.1711457070412733, 0.1695926180877917, 0.17803519885198038, 0.1825891169137741, 0.18302604988151305, 0.14215672059145434, 0.3618933422288195, 0.18934291964784766, 0.18295817306055318, 0.45851574913132953, 0.16739773957108683, 0.3879811137657543, 0.34666057302706665, 0.27905888720259175, 0.4462078974653024, 0.19778231327228601, 0.30154409742232824, 0.1935586537752998, 0.10373799818458906, 0.14852619822153446, 0.3040860550989811, 0.18764562947445684, 0.18558067596126326, 0.20032083392682665, 0.17817535444799137, 0.1819423454326582, 0.19878606172224678, 0.1919413367604379, 0.18339746277642366, 0.19097468775291504, 0.07961769840663602, 0.0811510596237156, 0.09523504325496757, 0.08500818416685962, 0.08903957872993218, 0.09622953339994966, 0.07373117275201735, 0.07601939071472752, 0.08051808996724152]}, "mutation_prompt": null}
