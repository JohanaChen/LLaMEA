{"id": "3e8c9c92-5c4a-4d37-9123-8f82844b4b6e", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a combination of Differential Evolution and Particle Swarm Optimization for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.18717624170897587, "feedback": "The algorithm DEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5025208918391872, 0.5087082741532443, 0.5879810782751012, 0.5675393954970268, 0.5923632721368828, 0.5174277795683285, 0.5273342642726602, 0.5652910601270192, 0.5319440953037701, 0.07332109268126807, 0.3092495620562019, 0.28794142265192135, 0.33561071224851435, 0.3036911412930504, 0.2882900757146566, 0.3137080010902078, 0.017374467153361328, 0.352027934700635, 0.08033129610902268, 0.076768050488906, 0.0753175182768373, 0.07433634921019983, 0.08057466316290485, 0.06694399505252024, 0.07989992629016929, 0.06716877663374599, 0.08240129900074922, 0.06228436515188984, 0.07840623685941028, 0.06541049743462413, 0.07378941249939142, 0.06553714889377205, 0.0656927368146989, 0.06854972549951366, 0.07343891020638837, 0.06900451816815112, 0.9930273605280148, 0.9929846431701576, 0.9950182149422878, 0.9940514079066299, 0.996683839255218, 0.9956671108836938, 0.9963475745586163, 0.9955447298280545, 0.9927800727807985, 0.15644730371701154, 0.16079222870818122, 0.1814420785670452, 0.18415584812600283, 0.19797371358367988, 0.18415764267641188, 0.08589420016057647, 0.20653114468923728, 0.0859534239980565, 0.20000390232447984, 0.18889114850401334, 0.1954464288582758, 0.17650174935731722, 0.1826510037704293, 0.21135823589134295, 0.21361821379087864, 0.21363996803400287, 0.19303551244478157, 0.12088866894591577, 0.0920422041253085, 0.11730311737602261, 0.08429792839863637, 0.11548580834470501, 0.08787636063474324, 0.09281128144241191, 0.043914750634030275, 0.11073346600153999, 0.02177854992946382, 0.010138709344494234, 0.01001772205953455, 0.10609148962961512, 0.07216761059885923, 0.11156966665754986, 0.057713490351121055, 0.055083251945910905, 0.07331777831708819, 0.0018045054587768616, 9.999999999998899e-05, 0.01187635484330496, 9.999999999998899e-05, 0.003210774841419295, 0.002280626565605015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0716984846647909, 0.08495837956866203, 0.06744547805021261, 0.06715061854416815, 0.05825869786834281, 0.04062042158539547, 0.07397724756529511, 0.08956228841844927, 0.09820173847453284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03781599740477504, 0.04819869660075604, 0.03737763921683612, 0.050672221432987996, 0.043290421721602024, 0.061823938801937595, 0.04731759450614614, 0.05236275496644682, 0.04347889196629806, 0.3468490452081371, 0.3591147675904198, 0.3794359070771893, 0.3843178849734433, 0.4220545019518157, 0.3889618116276624, 0.3669651576028039, 0.3966848155352827, 0.3694206332017287, 0.08408074125486709, 0.0696977373049451, 0.0669694975009173, 0.06524143494688284, 0.06432885965201363, 0.0766630368999558, 0.06741400978368761, 0.06864661857297683, 0.06894472448728461, 0.1662127830453981, 0.160051312187111, 0.1376135021003465, 0.24107175535046999, 0.1689320152302205, 0.15578126753573962, 0.16221421877343145, 0.1777034733120625, 0.18753716752527694, 0.19502298722755818, 0.20459932280995896, 0.2205916741201297, 0.19234468635355295, 0.19602182846564375, 0.17821483972544505, 0.23647491224417505, 0.2555796935831103, 0.25420070470298006, 0.12859390218000077, 0.1659426498088027, 0.1663062214617732, 0.13450114258121904, 0.136267826306102, 0.14541729687943805, 0.1616033315412646, 0.15994522991826465, 0.15935643475763994, 0.1584155620565585, 0.15757787496448816, 0.1579990943602403, 0.16131565934321845, 0.17281451784143498, 0.17306319577948726, 0.18575334929449305, 0.17296949775977588, 0.16212717156625478, 0.17021304288581596, 0.16314887464481287, 0.1667390646118967, 0.17831246564469116, 0.1902238652658601, 0.16713181418642453, 0.1766967104107514, 0.171078650115428, 0.15896386513084404, 0.1971226844692453, 0.21986611354806063, 0.15139965427754454, 0.16562751642460716, 0.18620639327909416, 0.16404473032570643, 0.16915315155031407, 0.14941142998358814, 0.1538842654079533, 0.16457658494463578, 0.16765645068962698, 0.1953330041118272, 0.1841678552950946, 0.15968653140805, 0.1586603636673244, 0.20892589786338167, 0.21149241433373633, 0.21016182751078416, 0.17856537120737248, 0.18221763437625738, 0.18937545082386198, 0.14998610888347663, 0.1776657216117159, 0.18942721554894926, 0.17747102550725957, 0.1895339487743657, 0.1855896239039665, 0.06331902050212246, 0.05725766791536335, 0.0528027773958496, 0.057069455796083135, 0.06054222157790479, 0.05536334476751381, 0.05874395106116681, 0.05698075123262658, 0.05554813302593031]}, "mutation_prompt": null}
{"id": "a260533d-356f-480e-a6eb-71c9cc8ac242", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a combination of Differential Evolution and Particle Swarm Optimization for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e8c9c92-5c4a-4d37-9123-8f82844b4b6e", "metadata": {"aucs": [0.5025208918391872, 0.5087082741532443, 0.5879810782751012, 0.5675393954970268, 0.5923632721368828, 0.5174277795683285, 0.5273342642726602, 0.5652910601270192, 0.5319440953037701, 0.07332109268126807, 0.3092495620562019, 0.28794142265192135, 0.33561071224851435, 0.3036911412930504, 0.2882900757146566, 0.3137080010902078, 0.017374467153361328, 0.352027934700635, 0.08033129610902268, 0.076768050488906, 0.0753175182768373, 0.07433634921019983, 0.08057466316290485, 0.06694399505252024, 0.07989992629016929, 0.06716877663374599, 0.08240129900074922, 0.06228436515188984, 0.07840623685941028, 0.06541049743462413, 0.07378941249939142, 0.06553714889377205, 0.0656927368146989, 0.06854972549951366, 0.07343891020638837, 0.06900451816815112, 0.9930273605280148, 0.9929846431701576, 0.9950182149422878, 0.9940514079066299, 0.996683839255218, 0.9956671108836938, 0.9963475745586163, 0.9955447298280545, 0.9927800727807985, 0.15644730371701154, 0.16079222870818122, 0.1814420785670452, 0.18415584812600283, 0.19797371358367988, 0.18415764267641188, 0.08589420016057647, 0.20653114468923728, 0.0859534239980565, 0.20000390232447984, 0.18889114850401334, 0.1954464288582758, 0.17650174935731722, 0.1826510037704293, 0.21135823589134295, 0.21361821379087864, 0.21363996803400287, 0.19303551244478157, 0.12088866894591577, 0.0920422041253085, 0.11730311737602261, 0.08429792839863637, 0.11548580834470501, 0.08787636063474324, 0.09281128144241191, 0.043914750634030275, 0.11073346600153999, 0.02177854992946382, 0.010138709344494234, 0.01001772205953455, 0.10609148962961512, 0.07216761059885923, 0.11156966665754986, 0.057713490351121055, 0.055083251945910905, 0.07331777831708819, 0.0018045054587768616, 9.999999999998899e-05, 0.01187635484330496, 9.999999999998899e-05, 0.003210774841419295, 0.002280626565605015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0716984846647909, 0.08495837956866203, 0.06744547805021261, 0.06715061854416815, 0.05825869786834281, 0.04062042158539547, 0.07397724756529511, 0.08956228841844927, 0.09820173847453284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03781599740477504, 0.04819869660075604, 0.03737763921683612, 0.050672221432987996, 0.043290421721602024, 0.061823938801937595, 0.04731759450614614, 0.05236275496644682, 0.04347889196629806, 0.3468490452081371, 0.3591147675904198, 0.3794359070771893, 0.3843178849734433, 0.4220545019518157, 0.3889618116276624, 0.3669651576028039, 0.3966848155352827, 0.3694206332017287, 0.08408074125486709, 0.0696977373049451, 0.0669694975009173, 0.06524143494688284, 0.06432885965201363, 0.0766630368999558, 0.06741400978368761, 0.06864661857297683, 0.06894472448728461, 0.1662127830453981, 0.160051312187111, 0.1376135021003465, 0.24107175535046999, 0.1689320152302205, 0.15578126753573962, 0.16221421877343145, 0.1777034733120625, 0.18753716752527694, 0.19502298722755818, 0.20459932280995896, 0.2205916741201297, 0.19234468635355295, 0.19602182846564375, 0.17821483972544505, 0.23647491224417505, 0.2555796935831103, 0.25420070470298006, 0.12859390218000077, 0.1659426498088027, 0.1663062214617732, 0.13450114258121904, 0.136267826306102, 0.14541729687943805, 0.1616033315412646, 0.15994522991826465, 0.15935643475763994, 0.1584155620565585, 0.15757787496448816, 0.1579990943602403, 0.16131565934321845, 0.17281451784143498, 0.17306319577948726, 0.18575334929449305, 0.17296949775977588, 0.16212717156625478, 0.17021304288581596, 0.16314887464481287, 0.1667390646118967, 0.17831246564469116, 0.1902238652658601, 0.16713181418642453, 0.1766967104107514, 0.171078650115428, 0.15896386513084404, 0.1971226844692453, 0.21986611354806063, 0.15139965427754454, 0.16562751642460716, 0.18620639327909416, 0.16404473032570643, 0.16915315155031407, 0.14941142998358814, 0.1538842654079533, 0.16457658494463578, 0.16765645068962698, 0.1953330041118272, 0.1841678552950946, 0.15968653140805, 0.1586603636673244, 0.20892589786338167, 0.21149241433373633, 0.21016182751078416, 0.17856537120737248, 0.18221763437625738, 0.18937545082386198, 0.14998610888347663, 0.1776657216117159, 0.18942721554894926, 0.17747102550725957, 0.1895339487743657, 0.1855896239039665, 0.06331902050212246, 0.05725766791536335, 0.0528027773958496, 0.057069455796083135, 0.06054222157790479, 0.05536334476751381, 0.05874395106116681, 0.05698075123262658, 0.05554813302593031]}, "mutation_prompt": null}
{"id": "610e1e76-a690-4647-aa0e-044e974f4c6c", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "DEPSO", "description": "An Evolutionary Algorithm based on a combination of Differential Evolution and Particle Swarm Optimization for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e8c9c92-5c4a-4d37-9123-8f82844b4b6e", "metadata": {"aucs": [0.5025208918391872, 0.5087082741532443, 0.5879810782751012, 0.5675393954970268, 0.5923632721368828, 0.5174277795683285, 0.5273342642726602, 0.5652910601270192, 0.5319440953037701, 0.07332109268126807, 0.3092495620562019, 0.28794142265192135, 0.33561071224851435, 0.3036911412930504, 0.2882900757146566, 0.3137080010902078, 0.017374467153361328, 0.352027934700635, 0.08033129610902268, 0.076768050488906, 0.0753175182768373, 0.07433634921019983, 0.08057466316290485, 0.06694399505252024, 0.07989992629016929, 0.06716877663374599, 0.08240129900074922, 0.06228436515188984, 0.07840623685941028, 0.06541049743462413, 0.07378941249939142, 0.06553714889377205, 0.0656927368146989, 0.06854972549951366, 0.07343891020638837, 0.06900451816815112, 0.9930273605280148, 0.9929846431701576, 0.9950182149422878, 0.9940514079066299, 0.996683839255218, 0.9956671108836938, 0.9963475745586163, 0.9955447298280545, 0.9927800727807985, 0.15644730371701154, 0.16079222870818122, 0.1814420785670452, 0.18415584812600283, 0.19797371358367988, 0.18415764267641188, 0.08589420016057647, 0.20653114468923728, 0.0859534239980565, 0.20000390232447984, 0.18889114850401334, 0.1954464288582758, 0.17650174935731722, 0.1826510037704293, 0.21135823589134295, 0.21361821379087864, 0.21363996803400287, 0.19303551244478157, 0.12088866894591577, 0.0920422041253085, 0.11730311737602261, 0.08429792839863637, 0.11548580834470501, 0.08787636063474324, 0.09281128144241191, 0.043914750634030275, 0.11073346600153999, 0.02177854992946382, 0.010138709344494234, 0.01001772205953455, 0.10609148962961512, 0.07216761059885923, 0.11156966665754986, 0.057713490351121055, 0.055083251945910905, 0.07331777831708819, 0.0018045054587768616, 9.999999999998899e-05, 0.01187635484330496, 9.999999999998899e-05, 0.003210774841419295, 0.002280626565605015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0716984846647909, 0.08495837956866203, 0.06744547805021261, 0.06715061854416815, 0.05825869786834281, 0.04062042158539547, 0.07397724756529511, 0.08956228841844927, 0.09820173847453284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03781599740477504, 0.04819869660075604, 0.03737763921683612, 0.050672221432987996, 0.043290421721602024, 0.061823938801937595, 0.04731759450614614, 0.05236275496644682, 0.04347889196629806, 0.3468490452081371, 0.3591147675904198, 0.3794359070771893, 0.3843178849734433, 0.4220545019518157, 0.3889618116276624, 0.3669651576028039, 0.3966848155352827, 0.3694206332017287, 0.08408074125486709, 0.0696977373049451, 0.0669694975009173, 0.06524143494688284, 0.06432885965201363, 0.0766630368999558, 0.06741400978368761, 0.06864661857297683, 0.06894472448728461, 0.1662127830453981, 0.160051312187111, 0.1376135021003465, 0.24107175535046999, 0.1689320152302205, 0.15578126753573962, 0.16221421877343145, 0.1777034733120625, 0.18753716752527694, 0.19502298722755818, 0.20459932280995896, 0.2205916741201297, 0.19234468635355295, 0.19602182846564375, 0.17821483972544505, 0.23647491224417505, 0.2555796935831103, 0.25420070470298006, 0.12859390218000077, 0.1659426498088027, 0.1663062214617732, 0.13450114258121904, 0.136267826306102, 0.14541729687943805, 0.1616033315412646, 0.15994522991826465, 0.15935643475763994, 0.1584155620565585, 0.15757787496448816, 0.1579990943602403, 0.16131565934321845, 0.17281451784143498, 0.17306319577948726, 0.18575334929449305, 0.17296949775977588, 0.16212717156625478, 0.17021304288581596, 0.16314887464481287, 0.1667390646118967, 0.17831246564469116, 0.1902238652658601, 0.16713181418642453, 0.1766967104107514, 0.171078650115428, 0.15896386513084404, 0.1971226844692453, 0.21986611354806063, 0.15139965427754454, 0.16562751642460716, 0.18620639327909416, 0.16404473032570643, 0.16915315155031407, 0.14941142998358814, 0.1538842654079533, 0.16457658494463578, 0.16765645068962698, 0.1953330041118272, 0.1841678552950946, 0.15968653140805, 0.1586603636673244, 0.20892589786338167, 0.21149241433373633, 0.21016182751078416, 0.17856537120737248, 0.18221763437625738, 0.18937545082386198, 0.14998610888347663, 0.1776657216117159, 0.18942721554894926, 0.17747102550725957, 0.1895339487743657, 0.1855896239039665, 0.06331902050212246, 0.05725766791536335, 0.0528027773958496, 0.057069455796083135, 0.06054222157790479, 0.05536334476751381, 0.05874395106116681, 0.05698075123262658, 0.05554813302593031]}, "mutation_prompt": null}
{"id": "0d3bf551-1a20-44d6-9995-55321552a541", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 3, "fitness": 0.18782094033096686, "feedback": "The algorithm ImprovedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "3e8c9c92-5c4a-4d37-9123-8f82844b4b6e", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "3ebb2978-cd96-4421-bcff-ec3a334384e7", "solution": "import numpy as np\n\nclass HybridDECS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "HybridDECS", "description": "A Hybrid Differential Evolution and Cuckoo Search Algorithm with Adaptive Parameters for Black Box Optimization", "configspace": "", "generation": 4, "fitness": 0.18782094033096686, "feedback": "The algorithm HybridDECS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "188fe7f8-353e-4632-95de-e45540f4882a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "124a640c-834b-4cc5-8b70-02da3d71dfa2", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "7d1277e4-9ff0-446e-9f94-b9c1bd987efc", "solution": "import numpy as np\n\nclass DynamicEvoSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "DynamicEvoSwarm", "description": "An Evolutionary Algorithm with Dynamic Adaptation of Mutation and Swarm Behavior for Black Box Optimization", "configspace": "", "generation": 7, "fitness": 0.18782094033096686, "feedback": "The algorithm DynamicEvoSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "ad5667bd-a3cf-4a68-84f2-f89967a84e5c", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "7b4873fa-275f-4821-a09a-b592e0b23474", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "1a4b91f4-5ffa-4200-a754-d748e58a3c0e", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "f19e3ab5-63d2-4275-bb95-cfdb15fcc45f", "solution": "import numpy as np\n\nclass DynamicEvoAdaptiveMut:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best\n", "name": "DynamicEvoAdaptiveMut", "description": "An Evolutionary Algorithm with Dynamic Population Resizing and Adaptive Mutation for Black Box Optimization", "configspace": "", "generation": 11, "fitness": 0.18782094033096686, "feedback": "The algorithm DynamicEvoAdaptiveMut got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "00595486-d5ec-48bd-9d74-b7326538d68e", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "a5c6e6b5-e6ef-4f5d-b04c-e627f7e07fa9", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "f01f619c-5c7a-447f-9dab-f144776ea215", "solution": "import numpy as np\n\nclass NovelHybridAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        # Refinement: Enhance adaptive weighting\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting adaptation\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "NovelHybridAlgorithm", "description": "A novel hybrid algorithm combining Particle Swarm Optimization and Differential Evolution with adaptive weighting and enhanced mutation for efficient black box optimization.", "configspace": "", "generation": 14, "fitness": 0.18782094033096686, "feedback": "The algorithm NovelHybridAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "0341013d-2914-4b0d-8b23-6eb755fe9577", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "057a44a5-795a-4312-b2ee-0605da1aa609", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Increase population size for better exploration\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.6  # Increase inertia weight for better convergence\n        self.cr = 0.8  # Decrease crossover rate for more exploitation\n        self.f = 0.9  # Increase differential weight for enhanced mutation\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting, Improved Mutation, and Dynamic Population Size for Black Box Optimization", "configspace": "", "generation": 16, "fitness": 0.16151814022771468, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.32953617973259797, 0.3268901734974513, 0.33538236475915295, 0.37908584504997567, 0.4130758162454101, 0.43068560444375403, 0.38421698992464326, 0.36285768716538236, 0.38947222430397876, 0.06343908405819298, 0.10310280642333458, 0.08984568087604439, 0.08002691075205548, 0.1035957258619159, 0.0812169462491118, 0.08737562299126744, 0.094185249622323, 0.07326246277470094, 0.09105678974517173, 0.08640002655740087, 0.0667688308975436, 0.0783456183723521, 0.07428502037867235, 0.06535915916907231, 0.061351605914334195, 0.07030687045886785, 0.0862457010407246, 0.07418151275758522, 0.05046661601166358, 0.051746805066810286, 0.07490134988899533, 0.06134586131641795, 0.06943413219310257, 0.06747477463892626, 0.0541964479952014, 0.06713538052554091, 0.9961321820847668, 0.991026992219898, 0.9925830112659986, 0.9854749341623645, 0.9966840344787989, 0.9922303242065313, 0.9884742958809688, 0.9945102958097818, 0.9951712076100541, 0.11686325599428804, 0.12063743623434187, 0.14832489122417158, 0.129713574740158, 0.13729783277419538, 0.1277996010093082, 0.14774730114679624, 0.11029480450020324, 0.16022979020079398, 0.18162994755819117, 0.15886870165246947, 0.1629471364144467, 0.15737634160417624, 0.19085752097230257, 0.1943189942825304, 0.1446588788923414, 0.1596820696795992, 0.17067608832744885, 0.08873285410759513, 0.07330508306246197, 0.1039736081899929, 0.0779896829009864, 0.08098697821938405, 0.08820049331203195, 0.08299602459705546, 0.06699098292360828, 0.09809467379450598, 0.10375542260584758, 0.10984982620908157, 0.11350366666438017, 0.0556511120489549, 0.03705417420733137, 0.06712933561627288, 0.04751269223106014, 0.05998786758664132, 0.027053059571370275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025684146053439605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03724929708451896, 0.04443531440845094, 0.021264395711873996, 0.020115028952777503, 0.04502864134400697, 0.059876651670366154, 0.054757996503388306, 0.02902075885249289, 0.05147374280621386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03338218867053888, 0.0420016783214352, 0.030386950605266083, 0.04357780109246101, 0.05138535201233607, 0.037973844625574404, 0.05033091498840547, 0.06505209595421146, 0.025162110394826076, 0.2843429004701652, 0.28781488581052206, 0.2972807962975147, 0.31777796604811215, 0.3257443554315187, 0.31840309133296796, 0.29793035475282204, 0.2919329640617736, 0.296830504617262, 0.07240864646814571, 0.07066880887948246, 0.06893214213081589, 0.06904475497475249, 0.05769733947122857, 0.059904843604055125, 0.05671575005068974, 0.060876614751458114, 0.062152850123680214, 0.14764445452239328, 0.14885045934593966, 0.14830479604066404, 0.15015863020056708, 0.14139556711485946, 0.13501085835414883, 0.17341632617872893, 0.13280598368264251, 0.20667327869919516, 0.18704226244464794, 0.1891767549902379, 0.19295276665151784, 0.17451083018218783, 0.17719551044913917, 0.16825760988747063, 0.1961535446454602, 0.2041068573694257, 0.19429575594500625, 0.1687231273109463, 0.11554626000270496, 0.153801989381121, 0.12107410424375054, 0.12317366284005415, 0.12014804888024788, 0.13695539363954157, 0.14491456645188394, 0.15869019019665442, 0.15789433779711237, 0.1870283526605232, 0.17439058842871813, 0.14423154011006079, 0.1630473723609166, 0.1661591535129917, 0.15506032694276295, 0.16388243484400444, 0.15192488123922465, 0.14840387835494473, 0.15596361262185487, 0.1561473452795421, 0.16194243279613674, 0.1700262017411165, 0.15907680696261373, 0.1568519116474656, 0.19090643941013352, 0.14297625400864677, 0.17933212073246452, 0.2063979858910232, 0.15163631792076782, 0.18876518994280067, 0.1592040059195291, 0.15615637673774285, 0.17775581676722596, 0.15785378214852386, 0.18261240220121622, 0.18049070119288824, 0.1637735790416016, 0.16292142322905423, 0.16327468077604212, 0.1210277391257043, 0.14839782263695955, 0.12510790970768448, 0.2119277268458456, 0.21060013325530458, 0.18502316165036614, 0.17892482937622556, 0.18816298522515518, 0.19870495106330766, 0.18289139245779884, 0.18085832305212746, 0.17578668603252467, 0.19284764152169942, 0.18667394608414356, 0.05246072982475014, 0.05841356642363715, 0.058966983482659274, 0.06347578896869577, 0.04742087218802049, 0.05611441237900694, 0.05139614609929266, 0.05166578090470608, 0.05756330969335066]}, "mutation_prompt": null}
{"id": "eaad657e-fe0d-4cba-95c3-a97a74e40026", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "c14bb555-077e-4759-88e2-ec5f25034b04", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "52dfef71-27a9-42f2-8545-4dde6398eaaa", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "5019b24e-a1af-4a7e-a5d2-441473a4a946", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "91b23924-4ba2-40f1-9e73-f2b63ad8edac", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "64e234d8-05f4-47f0-b61c-7426f83f5c7a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "9befa5ae-34e7-4f39-b874-53f3b666c8e1", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "1e94b4a8-b218-49e3-b9c0-078fac9143dd", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "fd08a4f4-757d-4789-a639-74ab740cf746", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "a09df810-a638-40f2-b6fe-d82d4c6ea2cc", "solution": "import numpy as np\n\nclass EvoMultiObjAdaptDiffMut:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoMultiObjAdaptDiffMut", "description": "Evolutionary Multi-Objective Algorithm with Adaptive Differential Mutation for Black Box Optimization to enhance solution diversity", "configspace": "", "generation": 26, "fitness": 0.18782094033096686, "feedback": "The algorithm EvoMultiObjAdaptDiffMut got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "36291f43-77d9-4998-876d-00603b1ef5d5", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "c0210103-d1ba-4c51-b71c-044e71917d81", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "78468a3c-a5a4-4964-b390-32756979b69e", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "4466cd1c-9b9e-4841-be58-70fef53db337", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "e8ba3a8b-c3f9-4242-94e3-b5e42003a925", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "ec32e887-25ca-4eaf-86f9-a9a81411a779", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "182c1e4b-a6d4-4e57-aac8-c4041af1d562", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "4dad1db3-bc01-48b1-9372-858f4761951c", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "3ca9e6ee-b5e4-4db1-8a61-a359a17a1749", "solution": "import numpy as np\n\nclass DynamicMultiStrategyEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "DynamicMultiStrategyEA", "description": "An Evolutionary Algorithm with Dynamic Multi-Strategy Adaptation for Black Box Optimization", "configspace": "", "generation": 35, "fitness": 0.18782094033096686, "feedback": "The algorithm DynamicMultiStrategyEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "3c333027-ffb7-4494-b7f1-0be47377ccbb", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "ad6755f0-11fc-48af-8190-501dc6ba7caa", "solution": "import numpy as np\n\nclass NovelDEPSOLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "NovelDEPSOLS", "description": "A Novel Hybrid Metaheuristic Algorithm Combining Differential Evolution, Particle Swarm Optimization, and Local Search for Black Box Optimization", "configspace": "", "generation": 37, "fitness": 0.18782094033096686, "feedback": "The algorithm NovelDEPSOLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "b259fd9c-da52-4e1c-b6ec-5410b78c38b1", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "57782daf-c9a7-401d-bb70-3d7e133c6e11", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "9aad4afa-78ea-4ac2-ab65-c139c74e3ce5", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "8b1e64f4-947d-46ae-aa14-21de97d58317", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "a5cc4c4e-d8bd-49dc-b7b3-f6d7ee9ccac5", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "db0a5282-f464-41bd-ae33-b88cac5b50a2", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "89e844f5-7336-4369-9f31-5575fc49de6b", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "232745eb-9f36-48fb-be89-a31f105902cf", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "b9376ee6-9d49-4ef4-abf0-11450863ff5a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "5dd68a43-6126-4f48-a8de-aa32760e0a14", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "71c04925-7adf-4f4a-a8f9-0b96fbca0424", "solution": "import numpy as np\n\nclass ECMAES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lam = 20\n        self.sigma = 0.3\n        self.sigma_init = 0.3\n        self.c_c = 0.4\n        self.c_s = 0.3\n        self.c_1 = 2.0\n        self.c_mu = 2.0\n        self.weights = np.log(self.lam + 1) - np.log(np.arange(1, self.lam + 1))\n        self.weights /= np.sum(self.weights)\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        x_mean = np.random.uniform(lower_bound, upper_bound, self.dim)\n        C = np.eye(self.dim)\n        p_sigma = np.zeros(self.dim)\n        D = np.diag(np.ones(self.dim) * self.sigma)\n\n        evals = 0\n        while evals < self.budget:\n            offspring = np.random.multivariate_normal(np.zeros(self.dim), C, self.lam)\n            offspring = x_mean + self.sigma * offspring.T\n            offspring = np.clip(offspring, lower_bound, upper_bound)\n            f_vals = np.array([func(off) for off in offspring.T])\n            evals += self.lam\n\n            sorted_indices = np.argsort(f_vals)\n            x_k = np.mean(offspring[:, sorted_indices[:self.lam // 2]], axis=1)\n            y_k = np.mean(offspring[:, sorted_indices[:self.lam // 2]] - x_mean.reshape(-1, 1), axis=1)\n\n            p_sigma = (1 - self.c_s) * p_sigma + np.sqrt(self.c_s * (2 - self.c_s) * self.lam) * np.dot(C, y_k)\n            C = (1 - self.c_c - self.c_1) * C + self.c_c * np.outer(p_sigma, p_sigma) + self.c_1 * np.sum(\n                self.weights[i] * np.outer(offspring[:, i] - x_k, offspring[:, i] - x_k) for i in range(self.lam))\n\n            D = np.diag(np.sqrt(np.diag(C)))\n            x_mean = x_k.copy()\n            self.sigma = self.sigma * np.exp((self.c_mu / np.sqrt(self.dim)) * (np.linalg.norm(p_sigma) / np.sqrt(self.lam) - 1))\n\n        return x_mean", "name": "ECMAES", "description": "A novel Enhanced Covariance Matrix Adaptation Evolution Strategy (ECMA-ES) algorithm for Black Box Optimization with adaptive step sizes and enhanced mutation strategy", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (5,20) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (5,20) ')", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {}, "mutation_prompt": null}
{"id": "9ad650c7-26f9-4cfe-a523-14ced5e9cbdb", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "ae0824bc-3fd1-482d-b823-602363323c23", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "2ed9869a-587d-49a3-9bf4-e54ca6b396b6", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "c909bbd2-2bc3-402e-ab42-30c1da60ad1a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "4056470c-ee10-4286-ad45-5501da997a88", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "31db496d-c5ef-450d-9252-b56650d720b7", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "f73d4d2c-fad0-40ea-8857-0648ad0c4ae9", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "2d4f46e7-fa8d-4479-882b-f1c7a3a80bd9", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "fba482ba-7499-4cb4-9f8b-04b8f6b2fdce", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "40c9b817-f2ae-4e23-852b-fd69649818f2", "solution": "import numpy as np\n\nclass EvoAnnealDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                    trial[j] += np.random.normal(0, 0.1)  # Introduce simulated annealing\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoAnnealDE", "description": "Evolutionary Annealing Differential Evolution - An algorithm that combines evolutionary strategies with simulated annealing to explore the search space efficiently.", "configspace": "", "generation": 58, "fitness": 0.17183689762958518, "feedback": "The algorithm EvoAnnealDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.3720185339221177, 0.3839887725334664, 0.40026567273811553, 0.40127532142827727, 0.4073060260739124, 0.3877449168812672, 0.3862637526638176, 0.37561775873635395, 0.4020321378891101, 0.010885319950047379, 0.014371337335445933, 0.02486620658002192, 0.03598822134615254, 0.04239267836705107, 0.018235984513162107, 0.023007333350458237, 0.037982300618977005, 0.022921766684718903, 0.07730237810861562, 0.0977373028198566, 0.07926136796578231, 0.061091598040145634, 0.071475710680173, 0.08347719632589468, 0.07936432730305387, 0.07020084989921038, 0.06981736036439667, 0.0778938199183602, 0.06692664310794261, 0.07844531877504213, 0.07462248587801934, 0.06924715084601252, 0.04949011000580428, 0.07778978978598461, 0.06637389376939751, 0.0659349798964407, 0.9805544892511343, 0.9738460667580564, 0.9827424538655762, 0.9688116019462241, 0.9887586388402614, 0.9772621133733921, 0.9952992550828065, 0.975070577491215, 0.9969342736188378, 0.1734616996988434, 0.1664074492548805, 0.16369458035243678, 0.15859224277654393, 0.1667656016766219, 0.19463302864617282, 0.19187773302946487, 0.17929181049208387, 0.18302478326229188, 0.19084656267716482, 0.20357773911529065, 0.21053303670998058, 0.19827674699095088, 0.23089952924370505, 0.22865761133807117, 0.22071263886235815, 0.20947679211496428, 0.19563952882898816, 0.10072938160045797, 0.10418467138338672, 0.09463040705285553, 0.0711820444401976, 0.10338409436132112, 0.11236348089691783, 0.12148921308693039, 0.11093961114856976, 0.127232554623258, 0.10747299795031373, 0.10809964519582649, 0.06850267996880488, 0.07380617082304619, 0.10195254607856674, 0.0911067276376154, 0.05857043912436943, 0.04788030807540711, 0.07722814899756991, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05503220421137334, 0.03900998469039574, 0.03896554832359722, 0.05479358029268733, 0.06093794636689176, 0.016412837353769416, 0.027575192448754948, 0.05139635127703912, 0.0901401635992477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032511401583623645, 0.05403621755958754, 0.04944601462898113, 0.05700158490284235, 0.055901607777045004, 0.04651029677966767, 0.056483002657782166, 0.055125839679843414, 0.05279821736236878, 0.3476707552847864, 0.3370494241864238, 0.3469018178530723, 0.3705858815958498, 0.35581987562824113, 0.3610415161667413, 0.30859713552879475, 0.33705191591765815, 0.33832746876483655, 0.07035017006895083, 0.0738447616960386, 0.07527190656387905, 0.06344994873292742, 0.07250341621736967, 0.09219160645868962, 0.060617732187209894, 0.08569333951423508, 0.09627362838812026, 0.17020239433517959, 0.14780844276766236, 0.14411964205683203, 0.13274207972256535, 0.160857856097124, 0.17021816807529755, 0.16995425616912652, 0.1842871673497546, 0.1357344078569246, 0.22645511625921877, 0.20145681766813417, 0.23218250589271916, 0.18419099353209123, 0.18884466391202592, 0.18702609477543897, 0.236768682726628, 0.22253801563125142, 0.23086304694301563, 0.15199383773376163, 0.18344139682727056, 0.16165112115203195, 0.13644864372472298, 0.13994369926541161, 0.12606598390127288, 0.16042076950770812, 0.16343376307027924, 0.16717921179316797, 0.18186785135863726, 0.1499478010059827, 0.16224913363115157, 0.16180593644152164, 0.1738194346655646, 0.1755228705898778, 0.18564860004105266, 0.18705583236023948, 0.16778889147206832, 0.16494971824436255, 0.17099291973226305, 0.15834775172679638, 0.16579372006430226, 0.15776999229336397, 0.1580329587781203, 0.16498687578642635, 0.15787940500535746, 0.17314183154314544, 0.43891927211559834, 0.18868573085728335, 0.19338758616163176, 0.30973925604994823, 0.17201990746008922, 0.17171589322112701, 0.15202942147411702, 0.1770832515080223, 0.1832344015935362, 0.18492821895508982, 0.16817172822073312, 0.1209304759655242, 0.1289405234291946, 0.11490715948056007, 0.18870873360631601, 0.210821698596114, 0.1479313594474253, 0.2131957463296832, 0.17503922677952233, 0.1857672674092562, 0.20311101146322996, 0.17994372730224573, 0.17163069311720214, 0.17549109302875365, 0.19351904140304788, 0.17736357008884374, 0.19454330904079464, 0.05647685425756266, 0.060876377659779046, 0.061679812629466535, 0.06267947789799855, 0.061816609660048205, 0.05055590525633702, 0.05584326208599, 0.05396545686095611, 0.05754619899486002]}, "mutation_prompt": null}
{"id": "2b044868-bdea-476b-bb5c-488bc0779bd2", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "d1cade5c-20ed-4450-a434-4e13fa5b1524", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.normal(0, 0.1)  # Enhance mutation\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "Enhancing Differential Evolution and Particle Swarm Optimization through Dynamic Adaptive Strategies for Black Box Optimization", "configspace": "", "generation": 60, "fitness": 0.18233429222712413, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.388746046218468, 0.42732634845542794, 0.4067194191635224, 0.42703575627383605, 0.44631129883042286, 0.4437944662749078, 0.4754680718882649, 0.4558666067334657, 0.45959234828909434, 0.14662622288159988, 0.13383534511923356, 0.1309187490651208, 0.14315837034307388, 0.15103334603416074, 0.14111987231185597, 0.14858153919159323, 0.14954957937888136, 0.15731623586592192, 0.0771049484407127, 0.06886565023265334, 0.0814074856505358, 0.07468422054979817, 0.07322281904802075, 0.07235487888963144, 0.08939880125435606, 0.09582180145208097, 0.06565681985138905, 0.06965343844259297, 0.058923164654907656, 0.06407578738185749, 0.07991272557646567, 0.06061415971667261, 0.05861410377007725, 0.06421707226719864, 0.06842662790129284, 0.07000596582975505, 0.9800828623601846, 0.9972292042022232, 0.9975965683122751, 0.9805427044122169, 0.9914706728608995, 0.9916222339311945, 0.990406911907517, 0.987257085110875, 0.9901594754670693, 0.16494492302548291, 0.17106389627699337, 0.16943022302657085, 0.18705192332527265, 0.1521502778761734, 0.19869317670787434, 0.18665510741044167, 0.17585512193732789, 0.19324550364404514, 0.18196928708018145, 0.22184497936444525, 0.19588846849112118, 0.21589220571910983, 0.21367634433537475, 0.2167496855743688, 0.21400137205615166, 0.19098106176973506, 0.22293010797793666, 0.08499248981162089, 0.1147533010347852, 0.12767874002759905, 0.10887607371390118, 0.09942307800703698, 0.07050401895135949, 0.10932580069288178, 0.10270235709474529, 0.07749729472540745, 0.11739424619269645, 0.11131926923745983, 0.10796471810060015, 0.08872283124309466, 0.08646732186110107, 0.06602017498573254, 0.06521199185190685, 0.08775180212472045, 0.05403951747839142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01646325061499898, 0.0004273408169986892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09185499888916115, 0.07947529127578234, 0.06241108673759077, 0.05413647166791724, 0.0581113936958102, 0.08217976007616057, 0.08222644453939632, 0.08795873272323529, 0.07989788760081118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04379143218555104, 0.05563335984962614, 0.056261680714923545, 0.055257808590283064, 0.06024789060546465, 0.060407265149876044, 0.05248269571447706, 0.05632757954844747, 0.05124581542712636, 0.34475488851530045, 0.3485947290210075, 0.3545941046780011, 0.3736887785360521, 0.37785852251065466, 0.35428535435666475, 0.34582522790756276, 0.3323671760953295, 0.35776452130608327, 0.07419976419015151, 0.07268518002863023, 0.07717221842482902, 0.0970735826625283, 0.06607475337513968, 0.07257742181675875, 0.06049500216621839, 0.06767514085388826, 0.07166450941734148, 0.13084136489709708, 0.15184198167164287, 0.17832241190288955, 0.13916166363101834, 0.14071013736472138, 0.20096906329539976, 0.2542856098409285, 0.13803935084708374, 0.22545756269202588, 0.20519391026942702, 0.2067209976247234, 0.2032697490222639, 0.20939380380924444, 0.1821422726287839, 0.17350450482429458, 0.259374968115352, 0.23904456526257123, 0.2513338904053952, 0.1651133995513655, 0.14000614185565807, 0.15289600442915163, 0.12928736709476074, 0.15205805332618105, 0.13462888361982428, 0.1736132784758836, 0.16577440049578185, 0.16336401527534783, 0.16183261742049204, 0.1806512812716271, 0.16385359693585455, 0.17186893887496646, 0.16976574500757413, 0.16634004969388738, 0.1614561917231433, 0.14846918146847587, 0.19217827890477057, 0.1590938028027291, 0.1592905687061359, 0.17141148554307362, 0.16780937299220844, 0.16902693706512273, 0.15732671191022907, 0.16388862719837394, 0.160294136888826, 0.1590948807581659, 0.4571982723179413, 0.17096756025626114, 0.15284053062264125, 0.17639930221581746, 0.27007222504874273, 0.1709911073485515, 0.1844059970834514, 0.2013757798724839, 0.1712615608373952, 0.16652756140060665, 0.18191893905543466, 0.16504105426989613, 0.19414738165571976, 0.19746872891374911, 0.11575998531454301, 0.21277206576201235, 0.20069261616043632, 0.2123472227534513, 0.18873637876644478, 0.1741068174574255, 0.18491976446633152, 0.19853241202890903, 0.20748432134688788, 0.18644061281490554, 0.21958473301690373, 0.1766110335232266, 0.18801897545513546, 0.0647383846075279, 0.05338534245102777, 0.08312504282570221, 0.06792559610366389, 0.050948465852800995, 0.0642220607482481, 0.06371373737060693, 0.07213022827319127, 0.06364799885353745]}, "mutation_prompt": null}
{"id": "b58a188e-0e54-48ab-9139-4fb4676362bb", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "68014904-89d0-4a2a-9b7e-12ead8621848", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "4e5d433d-a071-48c0-90dd-660d5a16d9b3", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "64e9570e-4c98-4e5b-957d-552926a9f60a", "solution": "import numpy as np\n\nclass HybridGASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.mutation_rate = 0.3\n        self.cooling_rate = 0.95\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                child = pop[i].copy()\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.mutation_rate:\n                        child[j] += np.random.normal(0, 0.1)\n\n                child = np.clip(child, lower_bound, upper_bound)\n                f_child = func(child)\n                evals += 1\n\n                if f_child < fitness[i]:\n                    pop[i] = child\n                    fitness[i] = f_child\n                    if f_child < fitness[best_idx]:\n                        best_idx = i\n                        best = child.copy()\n\n                    if np.random.rand() < np.exp((fitness[i] - f_child) / self.temperature):\n                        pop[i] = child\n                        fitness[i] = f_child\n\n            self.temperature *= self.cooling_rate\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "HybridGASA", "description": "A novel metaheuristic algorithm combining Genetic Algorithm and Simulated Annealing for Black Box Optimization with adaptive mutation and temperature control", "configspace": "", "generation": 64, "fitness": 0.12156319323838224, "feedback": "The algorithm HybridGASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.33838437155273116, 0.31109903162005137, 0.37151646003455707, 0.40871772879887935, 0.26199426821111094, 0.2769044997596797, 0.351276844370793, 0.36314989585666935, 0.31120948620699784, 0.07914584759201038, 0.0703879277097571, 0.015675937766144843, 0.09810289655677129, 0.06063863377244394, 0.031035726482136816, 0.03737097992325855, 0.019802577509483443, 0.09072138063134594, 0.004190338461480092, 0.0449454398668806, 0.027897441436357306, 0.02886622318717036, 0.021205393890061486, 0.04118466127226361, 0.03902140759335837, 0.0239110683518875, 0.07145073146825487, 0.032901973204018, 0.03128710761374498, 0.03915136255565921, 0.07039482908591876, 0.03655821252761382, 0.01438218940548508, 0.028464607290653254, 0.009713332571397615, 0.009705132104841696, 0.09088745476288351, 0.0721145306201666, 0.1942819186881487, 0.09723110644065969, 0.25389300974266127, 0.09755404858594863, 0.10555489185730749, 0.09730075439917651, 0.10116482273477123, 0.18921006500177173, 0.10713754144418763, 0.13955759407302937, 0.2394007692636967, 0.12347026837993802, 0.14189161799620964, 0.13112931949095508, 0.07635941996784512, 0.11549523292854169, 0.1762580621500529, 0.09640642291077006, 0.03728856918130363, 0.022189134413760803, 0.04987489194936501, 0.0037203995541537083, 0.08182621017719083, 0.08025481423312864, 0.07237298745126663, 0.13125557393512155, 0.09496159471142251, 0.10738803335693303, 0.1248769991696348, 0.1127558235456867, 0.0667327076006794, 0.1470609790580878, 0.1073203110473474, 0.13279835468927526, 0.1366978201911937, 0.0768218211881867, 0.10381359013099278, 0.1182199333846885, 0.08145209582427781, 0.10947393855019016, 0.1996807785941359, 0.06471533670116514, 0.09971868025372155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020119146718869496, 0.01356046080336415, 9.999999999998899e-05, 0.05600444994710274, 0.016256017031982983, 0.002504672986614276, 0.09562089294574816, 0.07293665293855067, 0.11541544575340157, 0.08625585617667952, 0.07253435812431996, 0.07748762028165856, 0.14748674044627264, 0.08344392017677549, 0.0775569749407381, 9.999999999998899e-05, 0.006103602345210679, 0.00046663722901718607, 0.012837369809700294, 9.999999999998899e-05, 0.00018668742206495725, 0.006555064235519215, 0.0015879565234183657, 0.002720172180059488, 0.044331018511878706, 0.025894580896148933, 0.122581564917285, 0.004749856813165754, 0.02739413454431483, 0.014795085109429396, 0.041387956410782634, 0.04912439443132921, 0.06472016435444383, 0.30310505515160646, 0.2834135319048037, 0.40771296563510184, 0.28111265607927494, 0.2594289206430984, 0.2705824090236628, 0.26269253890149713, 0.20394335460793322, 0.3478903400254023, 0.014627196304373813, 0.0019094492770908023, 9.999999999998899e-05, 0.02254364397655373, 0.025449806383623375, 0.06271473365544111, 0.011778722724411494, 0.01630739471317777, 0.07077730637605195, 0.13195438021613282, 0.19283532310474183, 0.1365682296726305, 0.19521235433228257, 0.19712831330944602, 0.1337366600709975, 0.19194185566147492, 0.1438258911204493, 0.12607020582693662, 0.12412343981414964, 0.1224716069846723, 0.1247944595131032, 0.14875063431720303, 0.13046284945975406, 0.1301794698576374, 0.13730010891804012, 0.19605960380073717, 0.10543725130772619, 0.06722131262300535, 0.0663282361395866, 0.07524889406598645, 0.08178993215755237, 0.07753068858379064, 0.0722808918486284, 0.07417187185890839, 0.13785195758079005, 0.05150764109666783, 0.15909871677816645, 0.09537814386624888, 0.15981680863412062, 0.14747034182989172, 0.1194488390151418, 0.153807166691303, 0.16361453778361157, 0.10263327428019509, 0.14779677051443918, 0.12908454180151896, 0.16077547422958183, 0.19448235776234246, 0.2145556870611358, 0.1818229801572756, 0.1705168619198375, 0.1449145416558959, 0.1444029857574224, 0.1346495404452751, 0.3634791550676677, 0.1634684263706111, 0.3858212520186727, 0.41811910890548765, 0.1942573252064118, 0.4248957626121622, 0.1573979757011159, 0.346569793970843, 0.1951100014312015, 0.21924373259793728, 0.29427164814932427, 0.21826681853292507, 0.17679015657225827, 0.21873487051696816, 0.16527382018396852, 0.24446138209242452, 0.22603125107727284, 0.24443504928735704, 0.2030212491558374, 0.1958883537347167, 0.1928413537768714, 0.20921745306029316, 0.21231538385601612, 0.2022661944006624, 0.19498264538202048, 0.2085548358003686, 0.20419405562296666, 0.03460593957155944, 0.03781104609424912, 0.053351637859223255, 0.04199196348974388, 0.04625063108389382, 0.04201286615824773, 0.0533457973972471, 0.037112580056759326, 0.042958932306389586]}, "mutation_prompt": null}
{"id": "16ee7ae8-f254-4331-9faf-8157e560676c", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "16b0122a-c08f-44aa-ad98-df48262cab1e", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "0c8b7243-edf2-42b7-829b-048d73e8ea62", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "NovelMetaheuristic", "description": "Implementing an Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting, Enhanced Mutation, and a Novel Selection Strategy", "configspace": "", "generation": 67, "fitness": 0.18782094033096686, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "48386a59-6685-49bc-9a09-0671b74f661e", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "d0e0a9b5-4173-4dce-9b24-44fd01c708c1", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "fbe92d52-fa8b-4942-ad10-d61ee083e96a", "solution": "import numpy as np\n\nclass ImprovedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.cr = 0.9\n        self.f = 0.8\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "ImprovedDEPSO", "description": "An Improved Differential Evolution and Particle Swarm Optimization Hybrid Algorithm for Black Box Optimization with Adaptive Weighting and Enhanced Mutation", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.4389496995144092, 0.4363876656957394, 0.40633711213531765, 0.46054567726744033, 0.4663519874299281, 0.4734035004135063, 0.44150484779813903, 0.4544956796554759, 0.4715606891718911, 0.18438698847015922, 0.16031977891525073, 0.15487402485609203, 0.17864608447084263, 0.14436130420404902, 0.17117336137411043, 0.16782618666543292, 0.15445352779915666, 0.17508466140253443, 0.0736387289565631, 0.08264845773499874, 0.0716990361466957, 0.07848008373262871, 0.09367207062115845, 0.07258989465128651, 0.08099039233900274, 0.06963753677555451, 0.0848293881896921, 0.08106301489030776, 0.07178754926299202, 0.0851607351427317, 0.07489745562280437, 0.08058559400735688, 0.06799588994121308, 0.0698152908990205, 0.07498756645923055, 0.07168843749989284, 0.980628944514784, 0.9945583362281479, 0.9917853566578936, 0.9934266287061796, 0.9979916818652459, 0.996786221248914, 0.9805616592182094, 0.9908820612272817, 0.9879759979277115, 0.1743159069929614, 0.17742501239584452, 0.1548574380987371, 0.18779287408627232, 0.2004269047888685, 0.18734316300361764, 0.1947216704698812, 0.18773232845138832, 0.1756739076461139, 0.24634569764669167, 0.2576875701393747, 0.19947370998768288, 0.20537379209854312, 0.17970243235719385, 0.26632205817977006, 0.2359938535517485, 0.1899247669223122, 0.20908410899315877, 0.10993229865239718, 0.10515927457209129, 0.119397543278145, 0.07865154348512593, 0.11470072296023393, 0.12274703527896313, 0.11733727455767862, 0.10919092944611752, 0.09970145568707489, 0.11668146564082216, 0.11637799053039222, 0.12343571882369087, 0.10077383096855952, 0.11377058238262383, 0.08926504710242933, 0.0670139191010769, 0.06271224531994779, 0.06409239066512051, 0.01514091715148902, 9.999999999998899e-05, 0.003514959281420982, 0.0026038094003429935, 0.000516683209673463, 0.011275231360291182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04951554198707253, 0.08073775599418509, 0.10891448774902857, 0.07678789504554095, 0.10153632247746847, 0.05814738094674177, 0.08585857714351819, 0.04410898345505998, 0.059947582689864665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06405413685779915, 0.06495489895445494, 0.04226127616683495, 0.06354904474888023, 0.0651342943602018, 0.04577528405526099, 0.05426161202270774, 0.08566791610015612, 0.08954979053176904, 0.38079813605360247, 0.3603033069860161, 0.33483880032054303, 0.39395712238767255, 0.3629231981163552, 0.3968342547875825, 0.3564725336011062, 0.34236602595513854, 0.3675646973258988, 0.08287752636635792, 0.07229759583517248, 0.06848402011848831, 0.06944560439820924, 0.06946697100150812, 0.0828019760440808, 0.06591109952879703, 0.0683990931845545, 0.06276065381358054, 0.18264559020783155, 0.15168425654027484, 0.14868799081006978, 0.15101549135297687, 0.12644082713635996, 0.16041846526538361, 0.21143035470421212, 0.22133175941788752, 0.1363331441595126, 0.2264980964015696, 0.2042375142760443, 0.23900243107495056, 0.19199779442897713, 0.19023707025656544, 0.19284412437633225, 0.269961146167949, 0.2505618119523507, 0.2643851822446761, 0.14792155224263792, 0.16524556410068092, 0.15064202567241136, 0.14278095013811565, 0.15703815747375516, 0.14381570304630986, 0.1757149483071726, 0.14968816306707067, 0.14971766643802908, 0.18149436401069752, 0.18157085581134302, 0.18315245936952917, 0.18817564767815298, 0.15953885541146295, 0.1570847892445112, 0.17127256744310182, 0.16849910229882192, 0.20365405901581413, 0.1596117206491552, 0.16814859127730453, 0.17092585055785692, 0.16225706648591753, 0.15438950273524332, 0.14844789775847844, 0.16468586395378082, 0.1701828151618795, 0.15947653631902026, 0.47140453585735353, 0.1606150421813496, 0.15330635329753262, 0.15516129776809828, 0.21733393778073995, 0.18056757393214595, 0.18137353959661595, 0.2559510817219537, 0.16519964546008414, 0.16436624102615638, 0.16514144519665008, 0.1665436783271219, 0.1789108865484843, 0.20521064564452252, 0.15774742272252518, 0.20198771638255397, 0.418255058031864, 0.2125602109674377, 0.1921207858303312, 0.18068199797039364, 0.19898116564526225, 0.20333382229984398, 0.19957408123200682, 0.21207117915456097, 0.17996136053824008, 0.20676294848164212, 0.1832658448100668, 0.058679587719000614, 0.059398023928219246, 0.061220666976444904, 0.05481872086560435, 0.0632356222691185, 0.05893809435339936, 0.05926421221734213, 0.05137857534352386, 0.06297153348442974]}, "mutation_prompt": null}
{"id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 71, "fitness": 0.21802740422152828, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "0d3bf551-1a20-44d6-9995-55321552a541", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "8d162ece-d741-4a62-ae7d-02e2eb57e605", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "bf051e5f-7f3e-40ee-a73e-1551d78ddc04", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "6bf5a8e2-4851-4144-9111-a85aa51bc208", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "92877340-3499-4c54-9d26-3f07c825348c", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "e6b7f0c1-a700-46a3-9a83-ccc197a27c0c", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "2d211237-1dcb-47bf-a303-913797baaf02", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "61fa1857-3b28-4d3a-b10a-6c089d6f2409", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "9e6964ad-4ea4-43e7-8a84-7ca4bc7f417b", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "186586ee-0197-43a0-9182-dbe9bf4b692d", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "43200c2e-ee7d-4dac-a3eb-6a8e71b0fb11", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "25e46f03-64ae-4b37-b85c-7bc01e346376", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "5ad86788-cdfe-405f-aade-bc1647ea2d63", "solution": "import numpy as np\n\nclass CustomAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "CustomAlgorithm", "description": "A Novel Hybrid Algorithm Integrating Covariance Matrix Adaptation Evolution Strategy and Cuckoo Search for Black Box Optimization", "configspace": "", "generation": 83, "fitness": 0.21802740422152828, "feedback": "The algorithm CustomAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "efb1b1e9-f78e-4633-b380-005ff9db1ae2", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EnhancedDEPSO", "description": "An Enhanced Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Adaptive Weighting and Improved Mutation Strategies for Black Box Optimization", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "c383480a-903c-4347-ad5d-59121b62ee97", "solution": "import numpy as np\n\nclass AdaptiveDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.cr = 0.8\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.randint(0, self.dim):\n                        trial[j] = pop[r1, j] + self.f * (pop[r2, j] - pop[r3, j])\n                trial = np.clip(trial, lower_bound, upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.w:\n                        trial[j] += self.c1 * np.random.rand() * (best[j] - pop[i, j])\n                        trial[j] += self.c2 * np.random.rand() * (pop[best_idx, j] - pop[i, j])\n                        trial[j] += np.random.normal(0, 0.1)  # Introduce adaptive weighting\n                        trial[j] += np.random.uniform(-0.1, 0.1)  # Enhance search space exploration\n                trial = np.clip(trial, lower_bound, upper_bound)\n\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "AdaptiveDEPSO", "description": "An Adaptive Differential Evolution and Particle Swarm Optimization Hybrid Algorithm with Enhanced Weighting and Exploration for Black Box Optimization", "configspace": "", "generation": 85, "fitness": 0.21802740422152828, "feedback": "The algorithm AdaptiveDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5563751595708586, 0.5021975449135944, 0.5276486063955945, 0.5495364383305626, 0.5547402539669046, 0.5540721068888692, 0.5441105034229605, 0.5323049890762129, 0.5145505026326227, 0.22732910960991537, 0.23391126228734216, 0.26064734722608274, 0.26472260769909306, 0.2544452516228619, 0.22675243083761254, 0.2820848994715385, 0.24705252389831212, 0.24380606260390414, 0.09838528631267784, 0.1213726054867611, 0.09920966977256451, 0.102794887613468, 0.08748856982356867, 0.10229184346838682, 0.0884203775094573, 0.09827550884365155, 0.0838435517675209, 0.10145378369796931, 0.09441425666572867, 0.08175977752410746, 0.0846099895158764, 0.08973948427379108, 0.09862723222664771, 0.0758929032832526, 0.08735909204064773, 0.10304892708471214, 0.9941753729605777, 0.9884657657878875, 0.9960391076869154, 0.9940016228155676, 0.9877520040922457, 0.9849724748567891, 0.9936146996103143, 0.9863963979555319, 0.9897037875478872, 0.2518720196433707, 0.28115037621321104, 0.25110572715813373, 0.25059314826693146, 0.262817757831713, 0.2786370987760465, 0.29634051191482, 0.2813377587989626, 0.29971851881760314, 0.3886871792939228, 0.29052066976960356, 0.3051957962711679, 0.378850723242769, 0.24892770200796777, 0.29447032259695693, 0.4169710466588523, 0.2653137310386191, 0.27458575557301523, 0.14945406588276533, 0.163509035442029, 0.16853821957585935, 0.12483101550296483, 0.1445663376308015, 0.150102252529983, 0.16915001401827834, 0.1401198295432896, 0.1464302315468381, 0.1222153854804916, 0.11845436933741749, 0.08556330634079645, 0.1500683509594093, 0.16081117977716453, 0.1439864392866459, 0.14246599206916488, 0.13970634903828782, 0.11230052123621337, 0.0026672154992167796, 0.0008259395231121625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011005395296962428, 0.0720691736770086, 0.07262096088230086, 0.05322853013655715, 0.040165774121370346, 0.06811735677254915, 0.058999900191348154, 0.06475344146189199, 0.06629849582057246, 0.048231941845617854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08813891761470782, 0.07368941360044279, 0.08403286342814953, 0.10143428663386245, 0.08710843344738883, 0.10838504594331333, 0.10867332080640013, 0.08882181348969864, 0.06641538430277527, 0.4310123282997953, 0.43234097682016104, 0.4290827796840486, 0.42647999176322693, 0.437785279490553, 0.4490247251594496, 0.4438937201938056, 0.4418939976483145, 0.4388489061298284, 0.10156842226102436, 0.08530912397472823, 0.08131600110770831, 0.09307357542181272, 0.08596028617230911, 0.09477594304952142, 0.07759411446685882, 0.08533289277866263, 0.07770849585479533, 0.15091105520800852, 0.22670211245343042, 0.14510654249192811, 0.19738936904494808, 0.15160021481045427, 0.15490510149655512, 0.15384465581328244, 0.13391464946471332, 0.16169759949823348, 0.27824965696113035, 0.2691776400822361, 0.2890477258029741, 0.2686134352053158, 0.27164568859424465, 0.26755450699666583, 0.30218895574312243, 0.3200986033143043, 0.30152277316898, 0.165062030872291, 0.1761687181586079, 0.1782069655368167, 0.18475223666494334, 0.1623273978969988, 0.15107754631799963, 0.20811078985325726, 0.23325259054820457, 0.2168123914324357, 0.1964458504348886, 0.18598970410098403, 0.17278881172979876, 0.17504859039649623, 0.15404923067795895, 0.18127476269997544, 0.1672793572559107, 0.17969388120880303, 0.18693370505063744, 0.1876418957568684, 0.17806096777048575, 0.17481077161938652, 0.185738177998102, 0.20263393247169748, 0.18435900261333404, 0.17991936973453448, 0.17310895974414653, 0.17723806834799394, 0.6657821188522999, 0.16107412265110543, 0.15385256550071957, 0.18147883236754836, 0.24735579586486578, 0.18406086886024042, 0.11908840283826616, 0.23978216787076656, 0.15349457971025549, 0.08241093742390093, 0.1994271441359503, 0.20264774395426233, 0.1803896746129049, 0.3159510188894038, 0.2667550194529871, 0.2062073991002672, 0.4276572385990506, 0.21236174335435454, 0.19113915922376434, 0.1857225582967289, 0.1965957835360589, 0.18151361018911205, 0.19629654566040855, 0.1862675746420941, 0.19445731874423744, 0.2003812908992516, 0.17363536559405113, 0.06663421530914071, 0.07975800060389915, 0.057215747936572026, 0.06845709145109535, 0.07805765247980467, 0.06736180925671964, 0.06889769831852155, 0.06300009400183426, 0.06574879986757731]}, "mutation_prompt": null}
{"id": "153980e9-507a-49c2-864c-2d6e231f38ef", "solution": "import numpy as np\n\nclass EvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                trial = np.clip(trial, lower_bound, upper_bound)\n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch", "description": "A novel Metaheuristic Algorithm combining Evolution Strategies and Harmony Search for Black Box Optimization", "configspace": "", "generation": 86, "fitness": 0.23066819222181964, "feedback": "The algorithm EvoHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "b538222a-9a15-45cf-9ad3-e38aa926be03", "metadata": {"aucs": [0.5092364020462554, 0.4818537067716745, 0.5012239423006455, 0.4957720366696855, 0.4897216573800133, 0.4775606064915382, 0.5230111720443066, 0.5006934813560326, 0.4655171166300752, 0.1404422887860004, 0.07027760325875021, 0.029401622442514652, 0.11834448674936082, 0.09337585495497658, 0.02678020860075414, 0.10566723761348962, 0.13411683545721098, 0.00026779466202841995, 0.21551447071685859, 0.10642895998029567, 0.11981756928705634, 0.1523883880747775, 0.10878144624785036, 0.16737098995356792, 0.16034065613493076, 0.14045443982285866, 0.14294075385343075, 0.13290717237968475, 0.11735923611885846, 0.10673114679953011, 0.11487107993958945, 0.14696353145969765, 0.1381736036436656, 0.13907381554930343, 0.1301317296232417, 0.13911564008153943, 0.8847761904073903, 0.877657471140232, 0.7674469946652331, 0.8932865955958499, 0.8591897286420876, 0.7948834769244564, 0.882373830370839, 0.8693228688719865, 0.6050729890550673, 0.3034843351687594, 0.28881338913962984, 0.3081368416580186, 0.31061679872054604, 0.28344976973977287, 0.31714798490760554, 0.30389029877124163, 0.2934208973099677, 0.2942051580234093, 0.21145705679270266, 0.19859920791100727, 0.15902091646158278, 0.32996551486336523, 0.34168877808727016, 0.20355383072934108, 0.18084489858981956, 0.1591392166542821, 0.2279440663381237, 0.12295672911012512, 0.227163346480996, 0.1791847444726623, 0.19466463702853487, 0.18038430945042605, 0.11766793270335363, 0.17755516348329914, 0.2136170388391999, 0.20272284237576788, 0.16862966518501965, 0.16283261423820228, 0.2218552476194674, 0.1615338094738289, 0.17477434246653534, 0.19213486629083976, 0.18437567560392254, 0.242404091708336, 0.16527582568052634, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001419663844209884, 0.05185499959271689, 0.017639661390375316, 9.999999999998899e-05, 0.012869600173401108, 9.999999999998899e-05, 0.02784101491487767, 0.09154385777574192, 0.10439109569530425, 0.09751477600130654, 0.054672008844598, 0.0331583433050322, 0.0791015083035016, 0.10777584110916227, 0.06826732452661344, 0.07239790194783569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09120717499953113, 0.10943517333751729, 0.1460785155071257, 0.13241583014879177, 0.08228838556837836, 0.10463924631615651, 0.12260467610257675, 0.14037259952946057, 0.0948906906476108, 0.45098937872729017, 0.418166362947874, 0.4563202990026073, 0.4577519229759509, 0.4607321378943051, 0.4255155193626834, 0.42240009618860064, 0.43430414231597947, 0.4311592275887691, 0.10795996004213926, 0.10751434807312454, 0.10290258630024585, 0.1250023881510779, 0.0722527026907901, 0.13143142260182972, 0.10371911095545328, 0.10203151221876583, 0.10010954058784516, 0.2304399151814681, 0.23024234558714574, 0.23157954946953518, 0.23274805095418505, 0.23358948115400802, 0.2735989483946707, 0.2240208158669812, 0.18027163401301383, 0.17495771739573862, 0.16111878453473305, 0.30467455028269164, 0.19783858889912542, 0.2684948538848304, 0.25012685252316635, 0.2635639015923532, 0.2453039855593837, 0.3085056482058761, 0.21256411159681377, 0.20033156341783254, 0.2208395845419695, 0.15785009095105196, 0.24006031305674547, 0.16873934468685325, 0.19897614448189338, 0.1681317565695135, 0.25393373875253566, 0.1437280182129601, 0.2109875311352447, 0.17825385870914034, 0.22370858845428476, 0.1978489024777279, 0.2534206678847062, 0.20532196911597966, 0.21965328751284374, 0.18574726355038407, 0.21801416827064946, 0.22176347478495884, 0.23836100227876833, 0.19146467527660538, 0.3111492942042918, 0.19255132235016248, 0.1996645069432792, 0.33969497117742287, 0.18881261056236287, 0.19890212777583105, 0.45563293540206984, 0.18352695751872583, 0.1861781079439191, 0.6512203619431752, 0.6141484852622325, 0.7547050808584288, 0.1750272728057658, 0.6513406354170967, 0.16970128081764146, 0.46994507606297997, 0.33920490767837774, 0.5010119591126846, 0.4245385501829606, 0.4619319484040605, 0.3692545915983716, 0.4815269028874791, 0.40585408532555334, 0.3026590263088704, 0.19480686003803604, 0.17887295205746723, 0.18703057234088105, 0.18098737205590254, 0.17976639050138532, 0.18696266242924164, 0.1781451808375416, 0.1876699053817612, 0.19045506995778305, 0.08337398769373472, 0.07843462447473759, 0.07158048545228035, 0.08331541042776514, 0.08558699611965126, 0.11593535335981486, 0.0981499372393011, 0.07174493542561233, 0.08613662397798394]}, "mutation_prompt": null}
{"id": "b53380cf-9df6-4e51-a0cf-ba13a9cbf9dc", "solution": "import numpy as np\n\nclass RefinedEvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                trial = np.clip(trial, lower_bound, upper_bound)\n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "RefinedEvoHarmonySearch", "description": "A novel Metaheuristic Algorithm combining Evolution Strategies and Harmony Search for Black Box Optimization with refined individual lines to improve convergence rate", "configspace": "", "generation": 87, "fitness": 0.23066819222181964, "feedback": "The algorithm RefinedEvoHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "153980e9-507a-49c2-864c-2d6e231f38ef", "metadata": {"aucs": [0.5092364020462554, 0.4818537067716745, 0.5012239423006455, 0.4957720366696855, 0.4897216573800133, 0.4775606064915382, 0.5230111720443066, 0.5006934813560326, 0.4655171166300752, 0.1404422887860004, 0.07027760325875021, 0.029401622442514652, 0.11834448674936082, 0.09337585495497658, 0.02678020860075414, 0.10566723761348962, 0.13411683545721098, 0.00026779466202841995, 0.21551447071685859, 0.10642895998029567, 0.11981756928705634, 0.1523883880747775, 0.10878144624785036, 0.16737098995356792, 0.16034065613493076, 0.14045443982285866, 0.14294075385343075, 0.13290717237968475, 0.11735923611885846, 0.10673114679953011, 0.11487107993958945, 0.14696353145969765, 0.1381736036436656, 0.13907381554930343, 0.1301317296232417, 0.13911564008153943, 0.8847761904073903, 0.877657471140232, 0.7674469946652331, 0.8932865955958499, 0.8591897286420876, 0.7948834769244564, 0.882373830370839, 0.8693228688719865, 0.6050729890550673, 0.3034843351687594, 0.28881338913962984, 0.3081368416580186, 0.31061679872054604, 0.28344976973977287, 0.31714798490760554, 0.30389029877124163, 0.2934208973099677, 0.2942051580234093, 0.21145705679270266, 0.19859920791100727, 0.15902091646158278, 0.32996551486336523, 0.34168877808727016, 0.20355383072934108, 0.18084489858981956, 0.1591392166542821, 0.2279440663381237, 0.12295672911012512, 0.227163346480996, 0.1791847444726623, 0.19466463702853487, 0.18038430945042605, 0.11766793270335363, 0.17755516348329914, 0.2136170388391999, 0.20272284237576788, 0.16862966518501965, 0.16283261423820228, 0.2218552476194674, 0.1615338094738289, 0.17477434246653534, 0.19213486629083976, 0.18437567560392254, 0.242404091708336, 0.16527582568052634, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001419663844209884, 0.05185499959271689, 0.017639661390375316, 9.999999999998899e-05, 0.012869600173401108, 9.999999999998899e-05, 0.02784101491487767, 0.09154385777574192, 0.10439109569530425, 0.09751477600130654, 0.054672008844598, 0.0331583433050322, 0.0791015083035016, 0.10777584110916227, 0.06826732452661344, 0.07239790194783569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09120717499953113, 0.10943517333751729, 0.1460785155071257, 0.13241583014879177, 0.08228838556837836, 0.10463924631615651, 0.12260467610257675, 0.14037259952946057, 0.0948906906476108, 0.45098937872729017, 0.418166362947874, 0.4563202990026073, 0.4577519229759509, 0.4607321378943051, 0.4255155193626834, 0.42240009618860064, 0.43430414231597947, 0.4311592275887691, 0.10795996004213926, 0.10751434807312454, 0.10290258630024585, 0.1250023881510779, 0.0722527026907901, 0.13143142260182972, 0.10371911095545328, 0.10203151221876583, 0.10010954058784516, 0.2304399151814681, 0.23024234558714574, 0.23157954946953518, 0.23274805095418505, 0.23358948115400802, 0.2735989483946707, 0.2240208158669812, 0.18027163401301383, 0.17495771739573862, 0.16111878453473305, 0.30467455028269164, 0.19783858889912542, 0.2684948538848304, 0.25012685252316635, 0.2635639015923532, 0.2453039855593837, 0.3085056482058761, 0.21256411159681377, 0.20033156341783254, 0.2208395845419695, 0.15785009095105196, 0.24006031305674547, 0.16873934468685325, 0.19897614448189338, 0.1681317565695135, 0.25393373875253566, 0.1437280182129601, 0.2109875311352447, 0.17825385870914034, 0.22370858845428476, 0.1978489024777279, 0.2534206678847062, 0.20532196911597966, 0.21965328751284374, 0.18574726355038407, 0.21801416827064946, 0.22176347478495884, 0.23836100227876833, 0.19146467527660538, 0.3111492942042918, 0.19255132235016248, 0.1996645069432792, 0.33969497117742287, 0.18881261056236287, 0.19890212777583105, 0.45563293540206984, 0.18352695751872583, 0.1861781079439191, 0.6512203619431752, 0.6141484852622325, 0.7547050808584288, 0.1750272728057658, 0.6513406354170967, 0.16970128081764146, 0.46994507606297997, 0.33920490767837774, 0.5010119591126846, 0.4245385501829606, 0.4619319484040605, 0.3692545915983716, 0.4815269028874791, 0.40585408532555334, 0.3026590263088704, 0.19480686003803604, 0.17887295205746723, 0.18703057234088105, 0.18098737205590254, 0.17976639050138532, 0.18696266242924164, 0.1781451808375416, 0.1876699053817612, 0.19045506995778305, 0.08337398769373472, 0.07843462447473759, 0.07158048545228035, 0.08331541042776514, 0.08558699611965126, 0.11593535335981486, 0.0981499372393011, 0.07174493542561233, 0.08613662397798394]}, "mutation_prompt": null}
{"id": "afaee3d0-8e64-4398-ae81-5a2125249588", "solution": "import numpy as np\n\nclass EvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                trial = np.clip(trial, lower_bound, upper_bound)\n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch", "description": "A novel Metaheuristic Algorithm combining Evolution Strategies and Harmony Search for Black Box Optimization", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153980e9-507a-49c2-864c-2d6e231f38ef", "metadata": {"aucs": [0.5092364020462554, 0.4818537067716745, 0.5012239423006455, 0.4957720366696855, 0.4897216573800133, 0.4775606064915382, 0.5230111720443066, 0.5006934813560326, 0.4655171166300752, 0.1404422887860004, 0.07027760325875021, 0.029401622442514652, 0.11834448674936082, 0.09337585495497658, 0.02678020860075414, 0.10566723761348962, 0.13411683545721098, 0.00026779466202841995, 0.21551447071685859, 0.10642895998029567, 0.11981756928705634, 0.1523883880747775, 0.10878144624785036, 0.16737098995356792, 0.16034065613493076, 0.14045443982285866, 0.14294075385343075, 0.13290717237968475, 0.11735923611885846, 0.10673114679953011, 0.11487107993958945, 0.14696353145969765, 0.1381736036436656, 0.13907381554930343, 0.1301317296232417, 0.13911564008153943, 0.8847761904073903, 0.877657471140232, 0.7674469946652331, 0.8932865955958499, 0.8591897286420876, 0.7948834769244564, 0.882373830370839, 0.8693228688719865, 0.6050729890550673, 0.3034843351687594, 0.28881338913962984, 0.3081368416580186, 0.31061679872054604, 0.28344976973977287, 0.31714798490760554, 0.30389029877124163, 0.2934208973099677, 0.2942051580234093, 0.21145705679270266, 0.19859920791100727, 0.15902091646158278, 0.32996551486336523, 0.34168877808727016, 0.20355383072934108, 0.18084489858981956, 0.1591392166542821, 0.2279440663381237, 0.12295672911012512, 0.227163346480996, 0.1791847444726623, 0.19466463702853487, 0.18038430945042605, 0.11766793270335363, 0.17755516348329914, 0.2136170388391999, 0.20272284237576788, 0.16862966518501965, 0.16283261423820228, 0.2218552476194674, 0.1615338094738289, 0.17477434246653534, 0.19213486629083976, 0.18437567560392254, 0.242404091708336, 0.16527582568052634, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001419663844209884, 0.05185499959271689, 0.017639661390375316, 9.999999999998899e-05, 0.012869600173401108, 9.999999999998899e-05, 0.02784101491487767, 0.09154385777574192, 0.10439109569530425, 0.09751477600130654, 0.054672008844598, 0.0331583433050322, 0.0791015083035016, 0.10777584110916227, 0.06826732452661344, 0.07239790194783569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09120717499953113, 0.10943517333751729, 0.1460785155071257, 0.13241583014879177, 0.08228838556837836, 0.10463924631615651, 0.12260467610257675, 0.14037259952946057, 0.0948906906476108, 0.45098937872729017, 0.418166362947874, 0.4563202990026073, 0.4577519229759509, 0.4607321378943051, 0.4255155193626834, 0.42240009618860064, 0.43430414231597947, 0.4311592275887691, 0.10795996004213926, 0.10751434807312454, 0.10290258630024585, 0.1250023881510779, 0.0722527026907901, 0.13143142260182972, 0.10371911095545328, 0.10203151221876583, 0.10010954058784516, 0.2304399151814681, 0.23024234558714574, 0.23157954946953518, 0.23274805095418505, 0.23358948115400802, 0.2735989483946707, 0.2240208158669812, 0.18027163401301383, 0.17495771739573862, 0.16111878453473305, 0.30467455028269164, 0.19783858889912542, 0.2684948538848304, 0.25012685252316635, 0.2635639015923532, 0.2453039855593837, 0.3085056482058761, 0.21256411159681377, 0.20033156341783254, 0.2208395845419695, 0.15785009095105196, 0.24006031305674547, 0.16873934468685325, 0.19897614448189338, 0.1681317565695135, 0.25393373875253566, 0.1437280182129601, 0.2109875311352447, 0.17825385870914034, 0.22370858845428476, 0.1978489024777279, 0.2534206678847062, 0.20532196911597966, 0.21965328751284374, 0.18574726355038407, 0.21801416827064946, 0.22176347478495884, 0.23836100227876833, 0.19146467527660538, 0.3111492942042918, 0.19255132235016248, 0.1996645069432792, 0.33969497117742287, 0.18881261056236287, 0.19890212777583105, 0.45563293540206984, 0.18352695751872583, 0.1861781079439191, 0.6512203619431752, 0.6141484852622325, 0.7547050808584288, 0.1750272728057658, 0.6513406354170967, 0.16970128081764146, 0.46994507606297997, 0.33920490767837774, 0.5010119591126846, 0.4245385501829606, 0.4619319484040605, 0.3692545915983716, 0.4815269028874791, 0.40585408532555334, 0.3026590263088704, 0.19480686003803604, 0.17887295205746723, 0.18703057234088105, 0.18098737205590254, 0.17976639050138532, 0.18696266242924164, 0.1781451808375416, 0.1876699053817612, 0.19045506995778305, 0.08337398769373472, 0.07843462447473759, 0.07158048545228035, 0.08331541042776514, 0.08558699611965126, 0.11593535335981486, 0.0981499372393011, 0.07174493542561233, 0.08613662397798394]}, "mutation_prompt": null}
{"id": "05a96a18-19d9-46de-b24d-36fc50351946", "solution": "import numpy as np\n\nclass EvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                trial = np.clip(trial, lower_bound, upper_bound)\n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch", "description": "A novel Metaheuristic Algorithm combining Evolution Strategies and Harmony Search for Black Box Optimization", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153980e9-507a-49c2-864c-2d6e231f38ef", "metadata": {"aucs": [0.5092364020462554, 0.4818537067716745, 0.5012239423006455, 0.4957720366696855, 0.4897216573800133, 0.4775606064915382, 0.5230111720443066, 0.5006934813560326, 0.4655171166300752, 0.1404422887860004, 0.07027760325875021, 0.029401622442514652, 0.11834448674936082, 0.09337585495497658, 0.02678020860075414, 0.10566723761348962, 0.13411683545721098, 0.00026779466202841995, 0.21551447071685859, 0.10642895998029567, 0.11981756928705634, 0.1523883880747775, 0.10878144624785036, 0.16737098995356792, 0.16034065613493076, 0.14045443982285866, 0.14294075385343075, 0.13290717237968475, 0.11735923611885846, 0.10673114679953011, 0.11487107993958945, 0.14696353145969765, 0.1381736036436656, 0.13907381554930343, 0.1301317296232417, 0.13911564008153943, 0.8847761904073903, 0.877657471140232, 0.7674469946652331, 0.8932865955958499, 0.8591897286420876, 0.7948834769244564, 0.882373830370839, 0.8693228688719865, 0.6050729890550673, 0.3034843351687594, 0.28881338913962984, 0.3081368416580186, 0.31061679872054604, 0.28344976973977287, 0.31714798490760554, 0.30389029877124163, 0.2934208973099677, 0.2942051580234093, 0.21145705679270266, 0.19859920791100727, 0.15902091646158278, 0.32996551486336523, 0.34168877808727016, 0.20355383072934108, 0.18084489858981956, 0.1591392166542821, 0.2279440663381237, 0.12295672911012512, 0.227163346480996, 0.1791847444726623, 0.19466463702853487, 0.18038430945042605, 0.11766793270335363, 0.17755516348329914, 0.2136170388391999, 0.20272284237576788, 0.16862966518501965, 0.16283261423820228, 0.2218552476194674, 0.1615338094738289, 0.17477434246653534, 0.19213486629083976, 0.18437567560392254, 0.242404091708336, 0.16527582568052634, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001419663844209884, 0.05185499959271689, 0.017639661390375316, 9.999999999998899e-05, 0.012869600173401108, 9.999999999998899e-05, 0.02784101491487767, 0.09154385777574192, 0.10439109569530425, 0.09751477600130654, 0.054672008844598, 0.0331583433050322, 0.0791015083035016, 0.10777584110916227, 0.06826732452661344, 0.07239790194783569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09120717499953113, 0.10943517333751729, 0.1460785155071257, 0.13241583014879177, 0.08228838556837836, 0.10463924631615651, 0.12260467610257675, 0.14037259952946057, 0.0948906906476108, 0.45098937872729017, 0.418166362947874, 0.4563202990026073, 0.4577519229759509, 0.4607321378943051, 0.4255155193626834, 0.42240009618860064, 0.43430414231597947, 0.4311592275887691, 0.10795996004213926, 0.10751434807312454, 0.10290258630024585, 0.1250023881510779, 0.0722527026907901, 0.13143142260182972, 0.10371911095545328, 0.10203151221876583, 0.10010954058784516, 0.2304399151814681, 0.23024234558714574, 0.23157954946953518, 0.23274805095418505, 0.23358948115400802, 0.2735989483946707, 0.2240208158669812, 0.18027163401301383, 0.17495771739573862, 0.16111878453473305, 0.30467455028269164, 0.19783858889912542, 0.2684948538848304, 0.25012685252316635, 0.2635639015923532, 0.2453039855593837, 0.3085056482058761, 0.21256411159681377, 0.20033156341783254, 0.2208395845419695, 0.15785009095105196, 0.24006031305674547, 0.16873934468685325, 0.19897614448189338, 0.1681317565695135, 0.25393373875253566, 0.1437280182129601, 0.2109875311352447, 0.17825385870914034, 0.22370858845428476, 0.1978489024777279, 0.2534206678847062, 0.20532196911597966, 0.21965328751284374, 0.18574726355038407, 0.21801416827064946, 0.22176347478495884, 0.23836100227876833, 0.19146467527660538, 0.3111492942042918, 0.19255132235016248, 0.1996645069432792, 0.33969497117742287, 0.18881261056236287, 0.19890212777583105, 0.45563293540206984, 0.18352695751872583, 0.1861781079439191, 0.6512203619431752, 0.6141484852622325, 0.7547050808584288, 0.1750272728057658, 0.6513406354170967, 0.16970128081764146, 0.46994507606297997, 0.33920490767837774, 0.5010119591126846, 0.4245385501829606, 0.4619319484040605, 0.3692545915983716, 0.4815269028874791, 0.40585408532555334, 0.3026590263088704, 0.19480686003803604, 0.17887295205746723, 0.18703057234088105, 0.18098737205590254, 0.17976639050138532, 0.18696266242924164, 0.1781451808375416, 0.1876699053817612, 0.19045506995778305, 0.08337398769373472, 0.07843462447473759, 0.07158048545228035, 0.08331541042776514, 0.08558699611965126, 0.11593535335981486, 0.0981499372393011, 0.07174493542561233, 0.08613662397798394]}, "mutation_prompt": null}
{"id": "29dc4334-96f4-4bcc-9c5a-e5e773231657", "solution": "import numpy as np\n\nclass EvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                trial = np.clip(trial, lower_bound, upper_bound)\n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch", "description": "A novel Metaheuristic Algorithm combining Evolution Strategies and Harmony Search for Black Box Optimization", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153980e9-507a-49c2-864c-2d6e231f38ef", "metadata": {"aucs": [0.5092364020462554, 0.4818537067716745, 0.5012239423006455, 0.4957720366696855, 0.4897216573800133, 0.4775606064915382, 0.5230111720443066, 0.5006934813560326, 0.4655171166300752, 0.1404422887860004, 0.07027760325875021, 0.029401622442514652, 0.11834448674936082, 0.09337585495497658, 0.02678020860075414, 0.10566723761348962, 0.13411683545721098, 0.00026779466202841995, 0.21551447071685859, 0.10642895998029567, 0.11981756928705634, 0.1523883880747775, 0.10878144624785036, 0.16737098995356792, 0.16034065613493076, 0.14045443982285866, 0.14294075385343075, 0.13290717237968475, 0.11735923611885846, 0.10673114679953011, 0.11487107993958945, 0.14696353145969765, 0.1381736036436656, 0.13907381554930343, 0.1301317296232417, 0.13911564008153943, 0.8847761904073903, 0.877657471140232, 0.7674469946652331, 0.8932865955958499, 0.8591897286420876, 0.7948834769244564, 0.882373830370839, 0.8693228688719865, 0.6050729890550673, 0.3034843351687594, 0.28881338913962984, 0.3081368416580186, 0.31061679872054604, 0.28344976973977287, 0.31714798490760554, 0.30389029877124163, 0.2934208973099677, 0.2942051580234093, 0.21145705679270266, 0.19859920791100727, 0.15902091646158278, 0.32996551486336523, 0.34168877808727016, 0.20355383072934108, 0.18084489858981956, 0.1591392166542821, 0.2279440663381237, 0.12295672911012512, 0.227163346480996, 0.1791847444726623, 0.19466463702853487, 0.18038430945042605, 0.11766793270335363, 0.17755516348329914, 0.2136170388391999, 0.20272284237576788, 0.16862966518501965, 0.16283261423820228, 0.2218552476194674, 0.1615338094738289, 0.17477434246653534, 0.19213486629083976, 0.18437567560392254, 0.242404091708336, 0.16527582568052634, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001419663844209884, 0.05185499959271689, 0.017639661390375316, 9.999999999998899e-05, 0.012869600173401108, 9.999999999998899e-05, 0.02784101491487767, 0.09154385777574192, 0.10439109569530425, 0.09751477600130654, 0.054672008844598, 0.0331583433050322, 0.0791015083035016, 0.10777584110916227, 0.06826732452661344, 0.07239790194783569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09120717499953113, 0.10943517333751729, 0.1460785155071257, 0.13241583014879177, 0.08228838556837836, 0.10463924631615651, 0.12260467610257675, 0.14037259952946057, 0.0948906906476108, 0.45098937872729017, 0.418166362947874, 0.4563202990026073, 0.4577519229759509, 0.4607321378943051, 0.4255155193626834, 0.42240009618860064, 0.43430414231597947, 0.4311592275887691, 0.10795996004213926, 0.10751434807312454, 0.10290258630024585, 0.1250023881510779, 0.0722527026907901, 0.13143142260182972, 0.10371911095545328, 0.10203151221876583, 0.10010954058784516, 0.2304399151814681, 0.23024234558714574, 0.23157954946953518, 0.23274805095418505, 0.23358948115400802, 0.2735989483946707, 0.2240208158669812, 0.18027163401301383, 0.17495771739573862, 0.16111878453473305, 0.30467455028269164, 0.19783858889912542, 0.2684948538848304, 0.25012685252316635, 0.2635639015923532, 0.2453039855593837, 0.3085056482058761, 0.21256411159681377, 0.20033156341783254, 0.2208395845419695, 0.15785009095105196, 0.24006031305674547, 0.16873934468685325, 0.19897614448189338, 0.1681317565695135, 0.25393373875253566, 0.1437280182129601, 0.2109875311352447, 0.17825385870914034, 0.22370858845428476, 0.1978489024777279, 0.2534206678847062, 0.20532196911597966, 0.21965328751284374, 0.18574726355038407, 0.21801416827064946, 0.22176347478495884, 0.23836100227876833, 0.19146467527660538, 0.3111492942042918, 0.19255132235016248, 0.1996645069432792, 0.33969497117742287, 0.18881261056236287, 0.19890212777583105, 0.45563293540206984, 0.18352695751872583, 0.1861781079439191, 0.6512203619431752, 0.6141484852622325, 0.7547050808584288, 0.1750272728057658, 0.6513406354170967, 0.16970128081764146, 0.46994507606297997, 0.33920490767837774, 0.5010119591126846, 0.4245385501829606, 0.4619319484040605, 0.3692545915983716, 0.4815269028874791, 0.40585408532555334, 0.3026590263088704, 0.19480686003803604, 0.17887295205746723, 0.18703057234088105, 0.18098737205590254, 0.17976639050138532, 0.18696266242924164, 0.1781451808375416, 0.1876699053817612, 0.19045506995778305, 0.08337398769373472, 0.07843462447473759, 0.07158048545228035, 0.08331541042776514, 0.08558699611965126, 0.11593535335981486, 0.0981499372393011, 0.07174493542561233, 0.08613662397798394]}, "mutation_prompt": null}
{"id": "9ecac25a-083f-4677-b9c0-fb756a627af0", "solution": "import numpy as np\n\nclass EvoHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                trial = np.clip(trial, lower_bound, upper_bound)\n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch", "description": "A novel Metaheuristic Algorithm combining Evolution Strategies and Harmony Search for Black Box Optimization", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "153980e9-507a-49c2-864c-2d6e231f38ef", "metadata": {"aucs": [0.5092364020462554, 0.4818537067716745, 0.5012239423006455, 0.4957720366696855, 0.4897216573800133, 0.4775606064915382, 0.5230111720443066, 0.5006934813560326, 0.4655171166300752, 0.1404422887860004, 0.07027760325875021, 0.029401622442514652, 0.11834448674936082, 0.09337585495497658, 0.02678020860075414, 0.10566723761348962, 0.13411683545721098, 0.00026779466202841995, 0.21551447071685859, 0.10642895998029567, 0.11981756928705634, 0.1523883880747775, 0.10878144624785036, 0.16737098995356792, 0.16034065613493076, 0.14045443982285866, 0.14294075385343075, 0.13290717237968475, 0.11735923611885846, 0.10673114679953011, 0.11487107993958945, 0.14696353145969765, 0.1381736036436656, 0.13907381554930343, 0.1301317296232417, 0.13911564008153943, 0.8847761904073903, 0.877657471140232, 0.7674469946652331, 0.8932865955958499, 0.8591897286420876, 0.7948834769244564, 0.882373830370839, 0.8693228688719865, 0.6050729890550673, 0.3034843351687594, 0.28881338913962984, 0.3081368416580186, 0.31061679872054604, 0.28344976973977287, 0.31714798490760554, 0.30389029877124163, 0.2934208973099677, 0.2942051580234093, 0.21145705679270266, 0.19859920791100727, 0.15902091646158278, 0.32996551486336523, 0.34168877808727016, 0.20355383072934108, 0.18084489858981956, 0.1591392166542821, 0.2279440663381237, 0.12295672911012512, 0.227163346480996, 0.1791847444726623, 0.19466463702853487, 0.18038430945042605, 0.11766793270335363, 0.17755516348329914, 0.2136170388391999, 0.20272284237576788, 0.16862966518501965, 0.16283261423820228, 0.2218552476194674, 0.1615338094738289, 0.17477434246653534, 0.19213486629083976, 0.18437567560392254, 0.242404091708336, 0.16527582568052634, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001419663844209884, 0.05185499959271689, 0.017639661390375316, 9.999999999998899e-05, 0.012869600173401108, 9.999999999998899e-05, 0.02784101491487767, 0.09154385777574192, 0.10439109569530425, 0.09751477600130654, 0.054672008844598, 0.0331583433050322, 0.0791015083035016, 0.10777584110916227, 0.06826732452661344, 0.07239790194783569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09120717499953113, 0.10943517333751729, 0.1460785155071257, 0.13241583014879177, 0.08228838556837836, 0.10463924631615651, 0.12260467610257675, 0.14037259952946057, 0.0948906906476108, 0.45098937872729017, 0.418166362947874, 0.4563202990026073, 0.4577519229759509, 0.4607321378943051, 0.4255155193626834, 0.42240009618860064, 0.43430414231597947, 0.4311592275887691, 0.10795996004213926, 0.10751434807312454, 0.10290258630024585, 0.1250023881510779, 0.0722527026907901, 0.13143142260182972, 0.10371911095545328, 0.10203151221876583, 0.10010954058784516, 0.2304399151814681, 0.23024234558714574, 0.23157954946953518, 0.23274805095418505, 0.23358948115400802, 0.2735989483946707, 0.2240208158669812, 0.18027163401301383, 0.17495771739573862, 0.16111878453473305, 0.30467455028269164, 0.19783858889912542, 0.2684948538848304, 0.25012685252316635, 0.2635639015923532, 0.2453039855593837, 0.3085056482058761, 0.21256411159681377, 0.20033156341783254, 0.2208395845419695, 0.15785009095105196, 0.24006031305674547, 0.16873934468685325, 0.19897614448189338, 0.1681317565695135, 0.25393373875253566, 0.1437280182129601, 0.2109875311352447, 0.17825385870914034, 0.22370858845428476, 0.1978489024777279, 0.2534206678847062, 0.20532196911597966, 0.21965328751284374, 0.18574726355038407, 0.21801416827064946, 0.22176347478495884, 0.23836100227876833, 0.19146467527660538, 0.3111492942042918, 0.19255132235016248, 0.1996645069432792, 0.33969497117742287, 0.18881261056236287, 0.19890212777583105, 0.45563293540206984, 0.18352695751872583, 0.1861781079439191, 0.6512203619431752, 0.6141484852622325, 0.7547050808584288, 0.1750272728057658, 0.6513406354170967, 0.16970128081764146, 0.46994507606297997, 0.33920490767837774, 0.5010119591126846, 0.4245385501829606, 0.4619319484040605, 0.3692545915983716, 0.4815269028874791, 0.40585408532555334, 0.3026590263088704, 0.19480686003803604, 0.17887295205746723, 0.18703057234088105, 0.18098737205590254, 0.17976639050138532, 0.18696266242924164, 0.1781451808375416, 0.1876699053817612, 0.19045506995778305, 0.08337398769373472, 0.07843462447473759, 0.07158048545228035, 0.08331541042776514, 0.08558699611965126, 0.11593535335981486, 0.0981499372393011, 0.07174493542561233, 0.08613662397798394]}, "mutation_prompt": null}
{"id": "e8abcefa-1614-4b19-955a-147ee5802367", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 92, "fitness": 0.2787684268185912, "feedback": "The algorithm EvoHarmonySearch_DEMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "153980e9-507a-49c2-864c-2d6e231f38ef", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "a30272fa-fcf3-4ece-925b-a427ac202181", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "6d7e45c3-8b6c-4d7a-882c-b6c8a190e768", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "5196f7e0-c74b-4c27-9ecc-340ad605b62a", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "82ea8ea3-9751-4cf1-8e2a-1fdc54b263f9", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "f2c122a5-5992-49c5-9e13-8f908232b669", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "a78a44cf-b5bb-4ee5-9a17-a53eb97a4e1e", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
{"id": "5761c9a9-20da-49ff-86ca-fa1a722a29d9", "solution": "import numpy as np\n\nclass EvoHarmonySearch_DEMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.hm_size = 5\n        self.hm_accept_rate = 0.1\n        self.f = 0.6\n\n    def __call__(self, func):\n        lower_bound = -5.0\n        upper_bound = 5.0\n        pop = np.random.uniform(lower_bound, upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx].copy()\n\n        evals = self.pop_size\n        while evals < self.budget:\n            new_pop = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                trial = pop[i].copy()\n                hm = pop[np.argsort(fitness)[:self.hm_size]]\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.hm_accept_rate:\n                        trial[j] = hm[np.random.randint(0, self.hm_size), j]\n                    else:\n                        trial[j] += np.random.normal(0, 0.1)\n                \n                # Introducing Differential Evolution Mutation\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                trial = np.clip(mutant, lower_bound, upper_bound)\n                \n                f_trial = func(trial)\n                evals += 1\n                \n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n\n            if evals >= self.budget:\n                break\n\n        return best", "name": "EvoHarmonySearch_DEMutation", "description": "Enhance the EvoHarmonySearch algorithm by introducing a novel mutation strategy based on Differential Evolution to improve exploration and exploitation trade-off for better optimization performance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abcefa-1614-4b19-955a-147ee5802367", "metadata": {"aucs": [0.5298113459045477, 0.5478223196086848, 0.7885100877211915, 0.41669150190223825, 0.1514712665347101, 0.9151784940415805, 0.39606154504570945, 0.9163678891245159, 0.6284710581792967, 0.6608353732166092, 0.0791843377976611, 0.1795051080043819, 0.19506911858457332, 0.10904779315687352, 0.6942071625306514, 9.999999999998899e-05, 0.10033244310052358, 0.8524629856679438, 0.13269768882602206, 0.11516125773894093, 0.13134709039859593, 0.09876903384385327, 0.05722589228780983, 0.15127748277048159, 0.10064514206505537, 0.07963678982482869, 0.09842768446640604, 0.08009062416654544, 0.09912076524020808, 0.10034746156040164, 0.11477889125922558, 0.1550315478125427, 0.09342490518537216, 0.09380013941980336, 0.09738314273518223, 0.08831332731827657, 0.09668426761125792, 0.1243089893284205, 0.1518400978370762, 0.12214836806203477, 0.16927412040274392, 0.09883785575608761, 0.1387540476107968, 0.28540637985346307, 0.11062369511531123, 0.1216344903607256, 0.13830215454842387, 0.07095182811398204, 0.18274301606631882, 0.08834352392558287, 0.08439235159495984, 0.12143384986172712, 0.3268151305961876, 0.08347770377321484, 0.9217599916599121, 0.9225674409342025, 0.2528311211397519, 0.9178844572826587, 0.9318724296983122, 0.38512774526804383, 0.923040056962609, 0.933889534873856, 0.3741060405285034, 0.20396698352228182, 0.1339942582240694, 0.13090050437465128, 0.2468031350657438, 0.18170774118337185, 0.20121508766839868, 0.21623167903904472, 0.24304856860189006, 0.21519810192607547, 0.25316081271395074, 0.14832969022383657, 0.15038614686095408, 0.14908503257919326, 0.15629318321452812, 0.20213201918412782, 0.1393564503132042, 0.2181678553499582, 0.2606097481612234, 0.07583351935672689, 0.8343654967970802, 0.30691364807725163, 0.04765514855963959, 0.8329547031026228, 0.46739571446945916, 0.8194782971450449, 0.03367575421119251, 0.3592587596203578, 0.2900226772568413, 0.7921347379918858, 0.8731431215984706, 0.15273729479481413, 0.2596259381051764, 0.11372244352474659, 0.8911916814840248, 0.8827734100427855, 0.11840003028405666, 0.14213990170369306, 0.0562849709015556, 0.070395029956144, 9.999999999998899e-05, 0.1466021514951621, 9.999999999998899e-05, 0.13508723937888567, 0.1515892411060038, 0.09452993834949408, 0.06698494236629826, 0.2976193304796262, 0.6944590805500034, 0.009607048832016463, 0.03858998254392665, 0.4172195433511674, 0.15306934264704164, 0.30432055419261783, 0.13453134833033342, 0.882766257140704, 0.33513510246690414, 0.5117490646610907, 0.5281813971125042, 0.5222113890026374, 0.9029576551047176, 0.8864668401826103, 0.36114438338793353, 0.49142389146125, 0.06290838466223336, 0.07772473201232444, 0.11075327313254946, 0.1228340973009443, 0.10532232152723986, 0.11806427152420151, 0.11105379980918917, 0.11120048256978388, 0.10458647017467482, 0.16517861972289338, 0.22087466729502736, 0.24922786703230448, 0.25214370517361817, 0.18602810520903867, 0.31093115090110734, 0.2129090820168803, 0.23267008689440816, 0.1077745826398192, 0.22414444494326458, 0.3257005258924479, 0.4613314786226008, 0.45710507437973535, 0.2640339514022899, 0.48154742070352186, 0.5667258113321354, 0.5979977501949796, 0.43133340603146053, 0.3970173757210348, 0.33126705301974635, 0.40982295810062763, 0.5142335304640973, 0.2934911730327594, 0.38516383576170254, 0.2712230751628456, 0.4518061338874352, 0.453554972623612, 0.19961565541774862, 0.18417432187934601, 0.19091122566290397, 0.2272498130995234, 0.18892070265805816, 0.1950917757856141, 0.17253909238389153, 0.18151107428997248, 0.20930543578904748, 0.21312517751168703, 0.19817416433025592, 0.18904061939053662, 0.1962286587722175, 0.1765919975564495, 0.18638717298781127, 0.18871966990305744, 0.22530622429332803, 0.1986494952816089, 0.1658712631139475, 0.18552690362474755, 0.1541223422460558, 0.16839144238142778, 0.18796873715329088, 0.18667382784491637, 0.15399644852144445, 0.17510808901029817, 0.18510174307737515, 0.9230398621956968, 0.47815125081333054, 0.16653185455051556, 0.6164194255806907, 0.16639080772696013, 0.6044550167061983, 0.31475274901160144, 0.11590969822601949, 0.15663885487766438, 0.18516952600528747, 0.1715583608764879, 0.16782179730052227, 0.19121907879342503, 0.1881232905332204, 0.18714763408918145, 0.1767266191142851, 0.19283751962091034, 0.16155884049384217, 0.06817220820954495, 0.07761684206381414, 0.07587186292556014, 0.08764703050833467, 0.07395975611593608, 0.09622735425645934, 0.08303311048228901, 0.08899032861328993, 0.06922638114312263]}, "mutation_prompt": null}
