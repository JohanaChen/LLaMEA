{"id": "e487e9d8-f137-42ab-af8e-f947487cf5f7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, pitch_adjust_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def pitch_adjustment(harmony):\n            selected_idx = np.random.randint(self.dim)\n            if np.random.rand() < self.pitch_adjust_rate:\n                harmony[selected_idx] = np.clip(harmony[selected_idx] + np.random.uniform(-self.bandwidth, self.bandwidth), -5.0, 5.0)\n            return harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_costs = np.array([func(harmony) for harmony in harmony_memory])\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_harmony = pitch_adjustment(np.copy(harmony_memory[np.argmin(harmony_costs)]))\n            new_cost = func(new_harmony)\n            if new_cost < np.max(harmony_costs):\n                replace_idx = np.argmax(harmony_costs)\n                harmony_memory[replace_idx] = new_harmony\n                harmony_costs[replace_idx] = new_cost\n\n        best_idx = np.argmin(harmony_costs)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search algorithm that combines elements of music improvisation to find optimal solutions in the search space by harmonizing the best solutions.", "configspace": "", "generation": 0, "fitness": 0.04883818621805801, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": null, "metadata": {"aucs": [0.08298302571062866, 0.07516879422046696, 0.10442340451550713, 0.1017857735775719, 0.07083976774324219, 0.08568240389392723, 0.0881150610122502, 0.0855633274491695, 0.07755661952290027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017087547731622355, 0.031187151751653652, 9.999999999998899e-05, 0.02220728345709644, 0.007119771998358226, 0.029848506244861128, 0.03465654217543779, 0.00764922628131659, 0.049758173981112264, 0.0019440532383437903, 9.999999999998899e-05, 9.999999999998899e-05, 0.056584378683672054, 0.021612113689995938, 9.999999999998899e-05, 9.999999999998899e-05, 0.001525883653278326, 9.999999999998899e-05, 0.05249626852925282, 0.03880481683385806, 0.05040586582596063, 0.05846991135594304, 0.05442565473307115, 0.04352012172006925, 0.07034340054508215, 0.05683928681418016, 0.04550845848777041, 0.0010094795384786304, 9.999999999998899e-05, 9.999999999998899e-05, 0.002248354666478769, 0.010415120471421124, 9.999999999998899e-05, 9.999999999998899e-05, 0.01909660382969247, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04798226363982139, 0.023651753448674206, 0.061789255145324185, 0.06321164549172154, 9.999999999998899e-05, 9.999999999998899e-05, 0.09291790756702434, 0.05088945596722172, 0.033180306056260656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12630880071487116, 0.12030653568424876, 0.16570186239565288, 0.10076402935354745, 0.10415642437358397, 0.10360427955947038, 0.13224862137256255, 0.1047589944171674, 0.13202607707437497, 0.010687201479476438, 0.0016399791350617532, 9.999999999998899e-05, 0.022111394183046418, 0.006652540130085094, 0.04668514532365575, 0.0015667974882331848, 0.014726438976089828, 0.06928638171251789, 0.07520650997295619, 0.08692881495773908, 0.0770018276118728, 0.10908054318588334, 0.1194947437311017, 0.06988061171835236, 0.12326928898801381, 0.054844821598349136, 0.08908934248893219, 0.11059963777995474, 0.12377971550142719, 0.11658469200666188, 0.12691916962332817, 0.1205965539250512, 0.1268073167225635, 0.13710178912171556, 0.1849804084790646, 0.09894665889066223, 0.05787814017957915, 0.04077842419929878, 0.06854010537782018, 0.08132164015148413, 0.07693094368687237, 0.07216390050352162, 0.07005220619439201, 0.12488226701637273, 0.0490543836462668, 0.17763524000138153, 0.07574067658577477, 0.1438252325744256, 0.12174208323520086, 0.12307989329127034, 0.12342892845646913, 0.12897520392735573, 0.10746586441172312, 0.15758637573546808, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038447828442682574, 0.007301450859686476, 9.999999999998899e-05, 0.0005777160657316482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07223584786221504, 0.11454122110547882, 0.1135898384721108, 0.08234156795252079, 0.1579784818133838, 0.0992552305240666, 0.08635834865974246, 0.12961705852452565, 0.06344378080952517, 0.04980382287168472, 0.0799788938375332, 0.025502499373351695, 0.06335747003381598, 0.05924487612632834, 0.059209050762554005, 0.06052964058268773, 0.07151201822885034, 0.07839699241859288, 0.16480630852703804, 0.13678301832521533, 0.1847614661396193, 0.16728070261809336, 0.19478242318868877, 0.1423291798129681, 0.1778218627402366, 0.1476526835890507, 0.21201176486792472, 0.02951069467412548, 0.028618195932439416, 0.06035552844051928, 0.04547334969089112, 0.05797273974423478, 0.015582811262639162, 0.045309285857062065, 0.01793966907795952, 0.03154876532607209]}, "mutation_prompt": null}
{"id": "f8f49a02-978d-4509-8301-5e74bd041719", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, pitch_adjust_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def pitch_adjustment(harmony):\n            selected_idx = np.random.randint(self.dim)\n            if np.random.rand() < self.pitch_adjust_rate:\n                harmony[selected_idx] = np.clip(harmony[selected_idx] + np.random.uniform(-self.bandwidth, self.bandwidth), -5.0, 5.0)\n            return harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_costs = np.array([func(harmony) for harmony in harmony_memory])\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_harmony = pitch_adjustment(np.copy(harmony_memory[np.argmin(harmony_costs)]))\n            new_cost = func(new_harmony)\n            if new_cost < np.max(harmony_costs):\n                replace_idx = np.argmax(harmony_costs)\n                harmony_memory[replace_idx] = new_harmony\n                harmony_costs[replace_idx] = new_cost\n\n        best_idx = np.argmin(harmony_costs)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search algorithm that combines elements of music improvisation to find optimal solutions in the search space by harmonizing the best solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e487e9d8-f137-42ab-af8e-f947487cf5f7", "metadata": {"aucs": [0.08298302571062866, 0.07516879422046696, 0.10442340451550713, 0.1017857735775719, 0.07083976774324219, 0.08568240389392723, 0.0881150610122502, 0.0855633274491695, 0.07755661952290027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017087547731622355, 0.031187151751653652, 9.999999999998899e-05, 0.02220728345709644, 0.007119771998358226, 0.029848506244861128, 0.03465654217543779, 0.00764922628131659, 0.049758173981112264, 0.0019440532383437903, 9.999999999998899e-05, 9.999999999998899e-05, 0.056584378683672054, 0.021612113689995938, 9.999999999998899e-05, 9.999999999998899e-05, 0.001525883653278326, 9.999999999998899e-05, 0.05249626852925282, 0.03880481683385806, 0.05040586582596063, 0.05846991135594304, 0.05442565473307115, 0.04352012172006925, 0.07034340054508215, 0.05683928681418016, 0.04550845848777041, 0.0010094795384786304, 9.999999999998899e-05, 9.999999999998899e-05, 0.002248354666478769, 0.010415120471421124, 9.999999999998899e-05, 9.999999999998899e-05, 0.01909660382969247, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04798226363982139, 0.023651753448674206, 0.061789255145324185, 0.06321164549172154, 9.999999999998899e-05, 9.999999999998899e-05, 0.09291790756702434, 0.05088945596722172, 0.033180306056260656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12630880071487116, 0.12030653568424876, 0.16570186239565288, 0.10076402935354745, 0.10415642437358397, 0.10360427955947038, 0.13224862137256255, 0.1047589944171674, 0.13202607707437497, 0.010687201479476438, 0.0016399791350617532, 9.999999999998899e-05, 0.022111394183046418, 0.006652540130085094, 0.04668514532365575, 0.0015667974882331848, 0.014726438976089828, 0.06928638171251789, 0.07520650997295619, 0.08692881495773908, 0.0770018276118728, 0.10908054318588334, 0.1194947437311017, 0.06988061171835236, 0.12326928898801381, 0.054844821598349136, 0.08908934248893219, 0.11059963777995474, 0.12377971550142719, 0.11658469200666188, 0.12691916962332817, 0.1205965539250512, 0.1268073167225635, 0.13710178912171556, 0.1849804084790646, 0.09894665889066223, 0.05787814017957915, 0.04077842419929878, 0.06854010537782018, 0.08132164015148413, 0.07693094368687237, 0.07216390050352162, 0.07005220619439201, 0.12488226701637273, 0.0490543836462668, 0.17763524000138153, 0.07574067658577477, 0.1438252325744256, 0.12174208323520086, 0.12307989329127034, 0.12342892845646913, 0.12897520392735573, 0.10746586441172312, 0.15758637573546808, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038447828442682574, 0.007301450859686476, 9.999999999998899e-05, 0.0005777160657316482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07223584786221504, 0.11454122110547882, 0.1135898384721108, 0.08234156795252079, 0.1579784818133838, 0.0992552305240666, 0.08635834865974246, 0.12961705852452565, 0.06344378080952517, 0.04980382287168472, 0.0799788938375332, 0.025502499373351695, 0.06335747003381598, 0.05924487612632834, 0.059209050762554005, 0.06052964058268773, 0.07151201822885034, 0.07839699241859288, 0.16480630852703804, 0.13678301832521533, 0.1847614661396193, 0.16728070261809336, 0.19478242318868877, 0.1423291798129681, 0.1778218627402366, 0.1476526835890507, 0.21201176486792472, 0.02951069467412548, 0.028618195932439416, 0.06035552844051928, 0.04547334969089112, 0.05797273974423478, 0.015582811262639162, 0.045309285857062065, 0.01793966907795952, 0.03154876532607209]}, "mutation_prompt": null}
{"id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 2, "fitness": 0.45529358357920535, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "e487e9d8-f137-42ab-af8e-f947487cf5f7", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "188a0f9a-1e9d-4d70-a68c-34d2459f1716", "solution": "import numpy as np\n\nclass MultiStageEvolutionaryOptimization:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n            if np.random.rand() < 0.15:\n                self.scaling_factor = max(0.1, min(0.9, np.random.normal(self.scaling_factor, 0.1)))\n                self.crossover_rate = max(0.1, min(0.9, np.random.normal(self.crossover_rate, 0.1)))\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "MultiStageEvolutionaryOptimization", "description": "A novel Evolutionary Algorithm (EA) named \"Multi-Stage Evolutionary Optimization (MSEO)\" that dynamically adjusts the mutation and crossover rates at different stages to balance exploration and exploitation effectively.", "configspace": "", "generation": 3, "fitness": 0.3605487877042268, "feedback": "The algorithm MultiStageEvolutionaryOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.6368019112618063, 0.8725217732637185, 0.9025236677430228, 0.7652059520892017, 0.8524621848588949, 0.8914112262191656, 0.5320076180777902, 0.8726425561876501, 0.9025042838596156, 0.5617514791183111, 0.7941839332501845, 0.8139377986875282, 0.6538159609818988, 0.7843985282141286, 0.8074494846001571, 0.39090919330546936, 0.7698341125087389, 0.7823761010417148, 0.12416762750655796, 0.1910051846530243, 0.5801558876126574, 0.14359011137516065, 0.334314922371443, 0.38186966983783055, 0.7980709049465818, 0.331103303603011, 0.5160346411703025, 0.12209816873591639, 0.11809170924300738, 0.16394982224834675, 0.14472299300759317, 0.38020343000450596, 0.17353718135054008, 0.14256682513780938, 0.12986910826596687, 0.17077111428522163, 0.6127878740182136, 0.9728522768201916, 0.9704975386072512, 0.6608862443805599, 0.9125183128877796, 0.9470970959645739, 0.7548633694870172, 0.9535765670204273, 0.9474894771982629, 0.15609846148955675, 0.6110194856653729, 0.5097940373900496, 0.25206675282439406, 0.48065794490025404, 0.557384883745496, 0.22842948859581824, 0.5375382665078854, 0.5253111033678619, 0.24148650156256313, 0.8252498998247467, 0.7190535786245518, 0.34434100715421745, 0.8421931808128575, 0.827355528701608, 0.23376291492067292, 0.8013099937849496, 0.6697188941362624, 0.14783627701386504, 0.2407540118999728, 0.2595035080070074, 0.13934504649265933, 0.24568510558047618, 0.2590384436254026, 0.16061416769206693, 0.26860034453771076, 0.25410102998932804, 0.1319672749689187, 0.2399778491684187, 0.20152721157024067, 0.15426847641761166, 0.19676888353298028, 0.26340070340866983, 0.13990084939666614, 0.33463767407334866, 0.2567030943146288, 0.005432442577549823, 0.3056851325581851, 0.07227280211499587, 0.24800523397975627, 0.382702696920592, 0.11131323462141118, 0.020376697595514415, 0.2948585368113701, 0.12771745892078, 0.12950883654380319, 0.5581691252047956, 0.21547186554546072, 0.09751859726985768, 0.352935261094513, 0.17092576019428796, 0.15198855869703443, 0.6780066851994607, 0.24945625318317632, 0.24475610005579063, 0.14402204842249156, 0.07789530803216715, 0.2706910210542939, 0.23642310628450758, 0.04158736973257293, 0.1564932788020964, 0.10812328487334288, 0.12181876727253915, 0.33233965022389955, 0.3155669960733736, 0.17716048739919188, 0.35022220664525305, 0.31749749048790454, 0.24442186163185908, 0.31532941655312985, 0.29834315267662037, 0.2017190631350504, 0.5860961384856112, 0.725114783892274, 0.5974912473677216, 0.47122127448116213, 0.614100843894912, 0.6253652568618608, 0.5508757414747649, 0.7945391113017652, 0.6070807316543474, 0.13994332294904, 0.1122907647930006, 0.12204837139508296, 0.1285570274778205, 0.09995317344744781, 0.10609091297835116, 0.15609320850373642, 0.11382115979109875, 0.1174111124458963, 0.2581452106015071, 0.14247064456607916, 0.14424049300322128, 0.20303098335605207, 0.13253129194506852, 0.1376763372686175, 0.22714189797577944, 0.1528191944640055, 0.13835585005693174, 0.34293070165831274, 0.5665787460326583, 0.4243863924770157, 0.38327515284226654, 0.5660685788191946, 0.4438298771347947, 0.369108632294716, 0.5037268443462282, 0.5516636375627499, 0.23582062461200237, 0.3492139865942856, 0.3095201128941729, 0.28698048032407164, 0.41519785545129406, 0.2754897811350997, 0.21347961758401557, 0.38865489581862256, 0.30300021252022646, 0.21484972578223616, 0.17560794745329023, 0.19623867841715315, 0.2140031648294053, 0.20857361607879188, 0.19760230299946102, 0.21576003687940293, 0.19270434497778122, 0.2019030287223711, 0.20721618821937993, 0.2941447653039868, 0.2973768347745971, 0.22160901979365577, 0.5053068577285187, 0.22525756410596232, 0.24796252241805605, 0.5397650255657287, 0.5769083830600906, 0.5619397496292329, 0.8573256656841022, 0.6822598031508271, 0.5420925340425229, 0.7794717483667163, 0.7344652787843033, 0.13349741614895172, 0.1842335635543968, 0.7221936860493348, 0.5408989332591554, 0.20354654149082607, 0.5460435494878793, 0.2021420454699847, 0.16678598787155274, 0.1639680957047578, 0.29947088905454955, 0.1551336835352597, 0.21140738123785974, 0.20536870651239303, 0.17396618691244725, 0.18284484309846305, 0.20810186523123053, 0.18428046229497763, 0.1915114770663936, 0.18374606922769, 0.19956360853643162, 0.1808409583277636, 0.09193964289423906, 0.08608322068587804, 0.08446436347920439, 0.09555863527046116, 0.08035634418823645, 0.07864065775542473, 0.08004919533476529, 0.0785568960900066, 0.08997944394355795]}, "mutation_prompt": null}
{"id": "0b55294d-586b-4939-ba16-086f9bb970f6", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                \n                dynamic_crossover_rate = 0.1 + 0.9 * (self.budget - i) / self.budget\n                crossover_mask = np.random.rand(self.dim) < dynamic_crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDifferentialEvolution", "description": "An Improved Differential Evolution algorithm with adaptive crossover rate and dynamic population adjustment for more efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 4, "fitness": 0.307777447490986, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.7480407304160654, 0.5858458604863866, 0.8964149765863499, 0.8774933073272795, 0.8990640673276242, 0.6127472039795785, 0.2520772831854038, 0.4809743818865019, 0.49308832102468025, 0.18777280373662109, 0.17247881984547497, 0.017460108140540775, 0.06724390507906375, 0.10433163085284813, 0.342063653436528, 0.04447100842169016, 0.6846812068787245, 0.062223907249531085, 0.13282340192354258, 0.17512472297620973, 0.2261825468286126, 0.11861969268502437, 0.1613582482799225, 0.13385022687123327, 0.14100222190947131, 0.15646910045189233, 0.1400321680764588, 0.11534363955555382, 0.07266849776867201, 0.12885523288692113, 0.10629389540897316, 0.11151517384344645, 0.12627091693764214, 0.10963355841410194, 0.10312281595785555, 0.11270690192056387, 0.16061523391032384, 0.30851579074586166, 0.2692736735172563, 0.14094467596212912, 0.18060158976100882, 0.07424919014776221, 0.383788374255673, 0.2725252317914214, 0.17161889075149594, 0.25790000755161513, 0.1313504897665262, 0.07030334680630146, 0.16144180714572776, 0.227357562823841, 0.15334155447856068, 0.13852518257933955, 0.12448210743592225, 0.24059082661294273, 0.9046395409696939, 0.8995273047066152, 0.3797907016811355, 0.9174959098414769, 0.9227076061755263, 0.9075822724791395, 0.9014146929738913, 0.898496257846754, 0.9023249989644542, 0.14714400976094222, 0.19447060728266874, 0.2831496700841897, 0.2085086738211428, 0.212429080117721, 0.7910330931054481, 0.17513709898685792, 0.23273127699888985, 0.1343793785122911, 0.13936701038286448, 0.14477240161044225, 0.23701829931768004, 0.1662588070106552, 0.11980293049172974, 0.21432139501556935, 0.15714381726637527, 0.12834791346341057, 0.15230196733697, 0.09532990959062426, 0.13184052424176684, 0.4654290251264479, 0.0684040456237135, 0.1340118559990804, 0.14599652781171646, 0.22345849290127406, 0.6959374448781371, 0.8332936172047845, 0.5296222703646781, 0.1456648687307064, 0.46862053822640115, 0.18627507661344855, 0.20545147144332654, 0.25369624188584217, 0.5529502471596182, 0.21703635011690903, 0.8510350108473497, 0.11311438502982041, 0.13771359748179735, 0.1326681824956384, 0.3448834389777522, 0.30113839415372745, 0.20851098298098614, 0.15942139484561468, 0.1196634412407186, 0.13494521892282885, 0.7581506618609278, 0.7443818062858015, 0.05739029658403638, 0.4768919447936817, 9.999999999998899e-05, 0.571510282761358, 0.11349794441713512, 0.1775867908324983, 0.2355746315158409, 0.7214686643669486, 0.37612469396887316, 0.7653232636578473, 0.5260516708139138, 0.8844858096957396, 0.2775700086368894, 0.4658277005204352, 0.881838094756966, 0.4711216154318685, 0.12256482346989195, 0.1419222566716366, 0.046714123185139234, 0.17430566277602288, 0.10555732011089258, 0.10534584790123702, 0.11803747128367448, 0.13652793918738404, 0.10616455730874008, 0.23665377185416703, 0.2120411225891805, 0.21499356996385743, 0.27766104604757824, 0.2211556528854024, 0.23719297261480288, 0.21963909504082968, 0.14575735546707946, 0.36176590615956083, 0.5926777591061293, 0.6188049362330954, 0.5927630719028941, 0.5746114042382238, 0.7197229856607643, 0.5521456567236305, 0.7029138088199325, 0.5587646404533091, 0.5966784122556476, 0.49262922808008136, 0.48795907727902954, 0.36544275921173286, 0.437400224758957, 0.5404759393575452, 0.2351253168865951, 0.49496799488358245, 0.4891048028659013, 0.5071935428494889, 0.210346792121325, 0.19568820947620047, 0.20607444269718966, 0.2227750857402111, 0.21173239671473099, 0.200420872770799, 0.18634147467316375, 0.21048060455234108, 0.2049502971097873, 0.22409454591655253, 0.21997940578483233, 0.17647426761708973, 0.2175255708546262, 0.22080928233099884, 0.23669953231274954, 0.21044411086257697, 0.18568658914451663, 0.19022102518800033, 0.16756021420821887, 0.17615949500529582, 0.9156612754598241, 0.1718398462335048, 0.16946937271961737, 0.8433775787474543, 0.16771082664174264, 0.4310309404420195, 0.19423030876086012, 0.920033149848582, 0.1680484671525161, 0.2204124688327348, 0.2053246660913417, 0.16795576009589674, 0.16243551584156635, 0.1278338312929358, 0.5848438366501882, 0.21209598171659783, 0.1988603063745359, 0.2214147739753508, 0.2209999364816717, 0.21180012514694235, 0.20294143467259818, 0.2091338985312019, 0.22046774115021217, 0.2371352918441687, 0.21791192804071124, 0.09873050301660191, 0.09544760259708907, 0.09285018313753224, 0.08094590567527649, 0.09632574350593082, 0.09914993349756729, 0.09750857076952757, 0.10020234314915522, 0.0968755121939987]}, "mutation_prompt": null}
{"id": "db0531cf-dd61-4085-92d2-57e96b47ad7f", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "7ece1640-1eea-4052-bbe4-d74e85f2ca90", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "5e337662-3456-4020-a5b3-7599a6eb1035", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "776d7c07-4f95-4ec5-859d-8a04d04b657e", "solution": "import numpy as np\n\nclass SelfAdaptiveDE:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9, min_scaling_factor=0.2, max_scaling_factor=0.8, min_crossover_rate=0.6, max_crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n        self.min_scaling_factor = min_scaling_factor\n        self.max_scaling_factor = max_scaling_factor\n        self.min_crossover_rate = min_crossover_rate\n        self.max_crossover_rate = max_crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Update scaling factor and crossover rate\n            self.scaling_factor = np.clip(self.scaling_factor + np.random.normal(0, 0.1), self.min_scaling_factor, self.max_scaling_factor)\n            self.crossover_rate = np.clip(self.crossover_rate + np.random.normal(0, 0.1), self.min_crossover_rate, self.max_crossover_rate)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "SelfAdaptiveDE", "description": "Enhancing Differential Evolution by incorporating a self-adaptive strategy to adjust the mutation scaling factor and crossover rate during optimization.", "configspace": "", "generation": 8, "fitness": 0.39984832941428167, "feedback": "The algorithm SelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8629378279656731, 0.8724604950276731, 0.9076500797718206, 0.8815646908574378, 0.9018340745954115, 0.9022285385816187, 0.8495713623764829, 0.8587400756377405, 0.9017138508387929, 0.7563404236737796, 0.8057897315919306, 0.8235122555904404, 0.7205767090450956, 0.7900037510290631, 0.850866065634075, 0.7511975892612551, 0.7778751572782794, 0.8202319788264723, 0.2916814368527102, 0.41060453005159314, 0.6333264283804269, 0.36603698971716436, 0.56419569471306, 0.6836394793523224, 0.43048671783200143, 0.5619483686831219, 0.6727705777519056, 0.19181505037895374, 0.1777322078343817, 0.1717330238540722, 0.3277694816427724, 0.3936122230801903, 0.11545376241668603, 0.24577928168678098, 0.17698504387950798, 0.15149540104303394, 0.9152909221839372, 0.9784757164436153, 0.9541708736853673, 0.9442670201448758, 0.9521810749593629, 0.9082446251631611, 0.918983804526621, 0.918412363398622, 0.9581160697183039, 0.5661358793738644, 0.6240971491332817, 0.3039466815139039, 0.5897760834960709, 0.5468531750816226, 0.3991710274832998, 0.5891780915220612, 0.5443516021946371, 0.37459371857072743, 0.7747849203903574, 0.7899265312596525, 0.801685216780001, 0.742553878047669, 0.7329684843184323, 0.8590481910595018, 0.700907600232503, 0.8080775365812399, 0.24415299559393266, 0.19819106860677738, 0.21341737422734364, 0.6049533606786934, 0.20491810843928726, 0.22969504652638284, 0.22062607653618016, 0.4882516010710817, 0.27389028798636195, 0.16199429318402359, 0.21192879554489918, 0.19761487594216798, 0.6258651240974789, 0.2195341670559321, 0.2975529425437774, 0.25595917518289446, 0.21383010351929732, 0.18266589687499202, 0.17632913906348024, 0.2950911739612988, 0.2652678270705652, 0.09379704694618629, 0.3417333058037506, 0.30868651589470053, 0.06129815741384648, 0.22517028605372547, 0.28624326474384976, 0.13302589639674645, 0.4078780684809038, 0.3478782734825937, 0.18720318295591476, 0.2661308600128267, 0.17498967793920162, 0.07082522016203197, 0.45859751269792626, 0.26431560052607017, 0.41011208277523636, 0.05743375076604573, 0.15687126148190078, 0.20751622508685974, 0.1316287457153934, 0.16338392008406122, 0.2177326153297744, 0.17993611787094854, 0.1212550222527643, 0.15230201265127707, 0.3191752140863183, 0.2544340668391637, 0.20540518128811358, 0.35206168209678956, 0.2993504586285033, 0.37350974425399197, 0.2679205939608933, 0.28796891209147657, 0.09606377092994678, 0.6877990608597713, 0.75822885515718, 0.5693585200093911, 0.7271249815346533, 0.6831276269378157, 0.5979791594723152, 0.6946814106383641, 0.6454139106577058, 0.812854357238583, 0.10882584619508728, 0.14959651903805282, 0.1542331175934203, 0.11803295750396159, 0.10077934814676759, 0.17809765785492304, 0.12473942982750519, 0.10007282007084572, 0.12884730429732694, 0.1935232531003812, 0.13086936029650664, 0.2680061714342675, 0.1405946494695418, 0.1580034689837868, 0.1500280636576159, 0.19715386334253615, 0.14066472152032383, 0.21562729762161192, 0.4404544961892558, 0.46699824471815177, 0.5603423575156481, 0.5013673646514929, 0.5498307038910719, 0.4280455300330912, 0.5193170876856597, 0.5983273527300919, 0.6544096191829174, 0.3544675647967047, 0.34916803482831826, 0.2908880351747909, 0.28555825491022524, 0.3044533897937537, 0.437759829919677, 0.34534370032345196, 0.4239019980857738, 0.3315838764052459, 0.1865509297064324, 0.2063602652944614, 0.20902759377131408, 0.1948838797742093, 0.193803594190049, 0.20954476817414203, 0.20481681079333125, 0.21084101584065607, 0.21116644244447136, 0.22686801505910137, 0.24219536427100197, 0.578720697051414, 0.2241171962951225, 0.43497564416633394, 0.23186520952170508, 0.4497209757871462, 0.23902054050954158, 0.2426910178835051, 0.781148860865496, 0.8480598201637624, 0.7570866031807093, 0.17615428605829453, 0.18666855196534693, 0.8790736221861183, 0.1620448639017713, 0.7831776248333526, 0.20425793293418115, 0.6547099115135137, 0.20950293702620382, 0.20280932921683847, 0.7459906732958644, 0.16613055174612823, 0.16573549207707217, 0.574106384140007, 0.1563253392385986, 0.35686147909670674, 0.18870779525244574, 0.18778310894174122, 0.192252607271023, 0.18164764340787354, 0.19415907550602107, 0.18693747971949992, 0.18788025131288455, 0.18277890674250696, 0.18154019263455212, 0.08351716197857972, 0.08626868023402745, 0.0775685661202622, 0.07779490627107277, 0.07936259200197415, 0.08719986298302096, 0.0831604843834719, 0.07994690980756347, 0.08331525624386138]}, "mutation_prompt": null}
{"id": "0bd7b728-2504-4326-a10a-8a5d25d175c6", "solution": "import numpy as np\n\nclass DynamicEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                if np.random.rand() < self.mutation_prob:\n                    local_search = population[i] + np.random.uniform(-0.2, 0.2, self.dim)\n                    trial_fitness_local = func(local_search)\n                    if trial_fitness_local < fitness[i]:\n                        trial = local_search\n                        trial_fitness = trial_fitness_local\n                else:\n                    trial_fitness = func(trial)\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicEvolution", "description": "Enhancing Differential Evolution with a dynamic mutation strategy and a local search mechanism to improve exploration and exploitation balance.", "configspace": "", "generation": 9, "fitness": 0.42745872932742235, "feedback": "The algorithm DynamicEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8582663629690427, 0.868908244357619, 0.8767880973542571, 0.8832185400125, 0.8696208706786572, 0.8645460340175497, 0.8812309082292542, 0.8781311484502101, 0.8759948867003452, 0.7726182031820354, 0.7712667372080876, 0.778979182325495, 0.7438098447216239, 0.7810556037358026, 0.7597742569831654, 0.7729105575248632, 0.7736217596306652, 0.7719875012660375, 0.12662871612576998, 0.2799473091451785, 0.13323507697329529, 0.13174288375787835, 0.13638250910186456, 0.14103730338900278, 0.11385248728870523, 0.12419644688092069, 0.1308440716071413, 0.1305697549040391, 0.16526812286134085, 0.1536961858349547, 0.09675319055699494, 0.11212804241975483, 0.14559252227946706, 0.12741203305508175, 0.14691980240237645, 0.11624656834577307, 0.9536807518887318, 0.9697461791116326, 0.9604707856762748, 0.9214226647559615, 0.9400888516109546, 0.9628952669150831, 0.9519268606899051, 0.9684473225062078, 0.9357663387608863, 0.6625538052715734, 0.6221510242688755, 0.5772431030862859, 0.5559735503101573, 0.6163605775944208, 0.6948765632107075, 0.6339941628599367, 0.6023661640613458, 0.6442637827560276, 0.8571424830193414, 0.8533159544621428, 0.8662907865298668, 0.8433223973879831, 0.8479331838878488, 0.8625276516979969, 0.8402047972587313, 0.8303246395663793, 0.8481660605424598, 0.24467654639059233, 0.22403523763634636, 0.2160633736587404, 0.15938145475490983, 0.37404597951824314, 0.7208796619465353, 0.22585897443286684, 0.19285314985866497, 0.19897363468640938, 0.21197022358987783, 0.21711025186662958, 0.20319279329274353, 0.32943114494652403, 0.13088844857665938, 0.17906961213358297, 0.31755730755129863, 0.34610694201686487, 0.19677119119290987, 0.5188501544188319, 0.5787926104201329, 0.2896890673319821, 0.18185957447937595, 0.6602244525407077, 0.5380570256509329, 0.17604731554081643, 0.3358949459593539, 0.3512901852905076, 0.6230794848855854, 0.6812488706334578, 0.3334571628631584, 0.6830723960914943, 0.5200634954378133, 0.6050271498274535, 0.3457954205059085, 0.6201677849466901, 0.6556724521241153, 0.08156033997907342, 0.09404347868010376, 0.14949849092550727, 0.46792138321804555, 0.19376048178318162, 0.24236652100891865, 0.18680793985937383, 0.30193269478190254, 0.22925085836649317, 0.4633746909081894, 0.5410842740582209, 0.4732658532835847, 0.48792011040568917, 0.4399533093882857, 0.49393302398702577, 0.3889461593814514, 0.4063220579800896, 0.3401590496118194, 0.8347229327129531, 0.8133457100986377, 0.819154075253899, 0.8066208441974584, 0.7091853089008789, 0.6678057069005511, 0.7965257395071275, 0.6494181921267353, 0.7907778095785012, 0.12716740171659946, 0.10894550204954445, 0.10903274861347767, 0.10336678332148008, 0.10812323093950638, 0.1010921082486892, 0.14232012547098638, 0.14507974170652682, 0.12574007820801703, 0.19364601360788003, 0.18287202978588057, 0.1462703728315462, 0.20205832500831333, 0.21193044675228678, 0.20394862707620787, 0.20362707606497477, 0.18479922243613456, 0.1606053887856218, 0.5039574165111842, 0.5993748683668603, 0.5161847077670565, 0.4753353481521386, 0.6273601516023719, 0.5464429903113396, 0.5223693733717443, 0.6374827092339842, 0.5434265296504276, 0.4449611039217979, 0.4346034266833324, 0.4423365067286078, 0.48095345344488916, 0.46283567457725017, 0.3708686184013752, 0.42441005361321327, 0.4426384355569274, 0.38876270244084976, 0.21930970349182166, 0.1977296448690119, 0.21369655562637957, 0.19400172236153712, 0.21248113754971487, 0.2082442412754154, 0.21263506590819936, 0.20488801307096716, 0.195123624537347, 0.4975615779324408, 0.21374729289029937, 0.2484476667683274, 0.22259295899310882, 0.2154910099124001, 0.20598583047879526, 0.5022901931769865, 0.48012563741509495, 0.2302973600221513, 0.18414509279764535, 0.7821422531327465, 0.1940931682018351, 0.17762195834971595, 0.18232422896174938, 0.7531164941450872, 0.8156062107388782, 0.7954875630582167, 0.16900668160552956, 0.8615586772357654, 0.16874386567867117, 0.19663251295822093, 0.514843445577402, 0.8389225824775925, 0.20290581313290224, 0.8546234143323617, 0.1633919696464956, 0.21130223187781982, 0.18094512763440285, 0.1958331310849557, 0.20584685721346885, 0.20536185416920427, 0.1978200332642327, 0.19972593863505406, 0.19695644372562537, 0.19332843645350972, 0.22145865667188214, 0.0820821373079531, 0.08758912115737438, 0.0823156644150862, 0.0818603710963085, 0.09180710326108421, 0.09198411969466891, 0.09852373976417128, 0.09738742536583689, 0.07876269081387166]}, "mutation_prompt": null}
{"id": "ef2d06d6-a4a8-4a36-b03c-750bd508d438", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "f66fba9c-6ca7-4704-8981-dfe512caa21e", "solution": "import numpy as np\n\nclass HarmonicSearchOptimization:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjustment_rate=0.1, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.bandwidth = bandwidth\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_fitness = np.array([func(harmony) for harmony in harmony_memory])\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_harmony = []\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_value = np.random.uniform(-self.bandwidth, self.bandwidth)\n                else:\n                    new_value = harmony_memory[np.random.choice(range(self.harmony_memory_size))][i]\n                new_harmony.append(new_value)\n            new_fitness = func(new_harmony)\n            worst_idx = np.argmax(harmony_fitness)\n            if new_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_fitness\n\n        best_idx = np.argmin(harmony_fitness)\n        return harmony_memory[best_idx]", "name": "HarmonicSearchOptimization", "description": "A novel algorithm called Harmonic Search Optimization (HSO) that combines elements of music theory and exploration-exploitation strategies to optimize black box functions efficiently.", "configspace": "", "generation": 11, "fitness": 0.07486413838601746, "feedback": "The algorithm HarmonicSearchOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.08.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.1400884683640432, 0.12878551755197698, 0.11087983861168904, 0.1685380099642918, 0.08385494869442789, 0.06835267207711315, 0.124218410541867, 0.22177646032425025, 0.12994688428462997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03164296954957191, 0.03257698734382197, 0.05813458528843585, 0.0140235188726896, 0.01851886017101223, 0.0129952138515258, 0.048177752175915356, 0.017333638948376584, 0.021690830980508724, 0.03138953055995897, 9.999999999998899e-05, 0.023317599291978852, 0.03957923973213162, 0.0025635042441850553, 9.999999999998899e-05, 0.030713677845511156, 0.01247949452948982, 0.003125848029219891, 0.06816703429007775, 0.06571129130094211, 0.044944772883139916, 0.057983275800827294, 0.06275279577808546, 0.053038380806096797, 0.0426467794980524, 0.0629800574815923, 0.04928996603110414, 0.047219264964518115, 0.03343057602198496, 0.022297543949209464, 0.039016393246496195, 0.03416227350216028, 0.029351747048445342, 9.999999999998899e-05, 0.01169855663775321, 9.999999999998899e-05, 0.10668697329878996, 0.10201364939596902, 0.12015712995802863, 0.1178895920069899, 0.0959135907595251, 0.02850740334940327, 0.06800741490861928, 0.06638366381234795, 0.0950830661439751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09148809592941964, 0.06059600064041715, 0.06069837181883142, 0.06051080783170748, 0.06043486030119116, 0.06037563846444316, 0.06011777536072238, 0.060230622993584615, 0.08737046483381894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08908477313547314, 0.01412212362396148, 9.999999999998899e-05, 0.00890980705371458, 9.999999999998899e-05, 9.999999999998899e-05, 0.0510386376845523, 9.999999999998899e-05, 0.06178994724691389, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12691469077995787, 0.15372948468488612, 0.16350786524971772, 0.14204117369360736, 0.13303053512353924, 0.1306463390525492, 0.15431101849867734, 0.17751035681811012, 0.15098019089362713, 0.044018592630741704, 0.017446903589084073, 9.999999999998899e-05, 0.019172399850552524, 0.043713608592196085, 0.05339044312229013, 0.035725458354424866, 0.04148940619064001, 0.054640554050963686, 0.08561449571029445, 0.09289535700570073, 0.09608563872896903, 0.09908585840186512, 0.11931179345442267, 0.10751623937712718, 0.1357861870311179, 0.09939889715365458, 0.10782761420543141, 0.1405427426311464, 0.13418905648518065, 0.13133226765471495, 0.18188534440273396, 0.1473150348330855, 0.14486171382919633, 0.13406800198572166, 0.11711426619293197, 0.1133201766775368, 0.08104872991141254, 0.08462280473524775, 0.09342576447546858, 0.12370186904647562, 0.09927683214616645, 0.10510693704293317, 0.08578928998434676, 0.08647403844713408, 0.06028976020360077, 0.3741841518272878, 0.3719339806847646, 0.3639718976138847, 0.36643497777336564, 0.376052068931638, 0.375549949097142, 0.29873350550755917, 0.3662641779651591, 0.3563546625250653, 0.010002766805445429, 0.13757448069045053, 0.14947934223117043, 9.999999999998899e-05, 9.999999999998899e-05, 0.14792084052500254, 0.13383159512074594, 9.999999999998899e-05, 9.999999999998899e-05, 0.10668886432792679, 0.11153924876390697, 0.10654195933011812, 0.09149989005128645, 0.14800361474564538, 0.09322457777141968, 0.11737000556680144, 0.11652696798053408, 0.10274341648281482, 0.17022072043216863, 0.2159841545391108, 0.035897423537738726, 0.08366706420357495, 0.06181828147923518, 0.060650044350121224, 0.14446898507518968, 0.0959840100418472, 0.0655747640828025, 0.13937767040973703, 0.16031740862963217, 0.16552504220270925, 0.17923690537274084, 0.14612136053338132, 0.18884124718681716, 0.14348058087785598, 0.15210526391571766, 0.17216855628674732, 0.03651843307153069, 0.055322375222652265, 0.0493118108323608, 0.057501299753417556, 0.04369827988827346, 0.03605580975241718, 0.042914240616691135, 0.02865482489930471, 0.03404907731617446]}, "mutation_prompt": null}
{"id": "7e40de44-66d8-4296-bb49-99e5d3f965a7", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "261f094c-6130-4444-936c-1b2c21d71abd", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "501d7075-e4f9-4ef4-b411-7a0ec9a3353a", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "058e13de-e420-489b-900a-828b87baecad", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "81e7eb7f-ba8d-4696-9ab2-52f1b5655cb6", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm (EA) using Differential Evolution (DE) strategy with adaptive control parameters to explore and exploit the search space efficiently.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.8852188082125859, 0.8857007048729671, 0.8813793005285657, 0.8944225835916806, 0.881801447425503, 0.8864455929595288, 0.8922545341256397, 0.8991519231114871, 0.9048375912158491, 0.7916016919766082, 0.811816817972288, 0.8028826302486592, 0.8083799491717234, 0.814861313153475, 0.8166426469446795, 0.8118699571806961, 0.801951936743645, 0.8051734686090342, 0.15234215334207168, 0.16413631353249636, 0.4697576304841712, 0.31662299331190347, 0.4589298723023578, 0.13097158285756938, 0.2882507618037612, 0.12206032341553785, 0.16390040107661186, 0.15818570597417403, 0.13529335116291097, 0.14591566984338733, 0.14968763064167778, 0.14755122959137157, 0.14034996888017848, 0.1323228779269926, 0.12868135956310256, 0.12666886017852996, 0.9242212240232233, 0.9760149267464536, 0.8535677443856781, 0.905405643234051, 0.92947547062326, 0.9232255180320302, 0.8864526370538597, 0.8358306227109317, 0.9418899777495395, 0.624573134384826, 0.579428537092607, 0.5479133564903376, 0.6468308692818148, 0.6313456921108132, 0.722672879252457, 0.6961817581921332, 0.34143553628099654, 0.3118222125084409, 0.8513099022112935, 0.8462316748601442, 0.8922038551241854, 0.9112367435358939, 0.9030699527711323, 0.8775037366725013, 0.8404908789677279, 0.8532808146774034, 0.8893614104090128, 0.749339643936811, 0.19234815129685634, 0.1558568648002403, 0.20136205810271846, 0.19411236752195737, 0.2007107642934931, 0.247527554931546, 0.25833200524468913, 0.21519227051860423, 0.21389083628017103, 0.18376494885429429, 0.21448044974846392, 0.19246994783643956, 0.3853710835763535, 0.17867283113027166, 0.2814663561380778, 0.2160426492512464, 0.21685807305078508, 0.6879920589822373, 0.6176426636152996, 0.5822505179515218, 0.7155910072584811, 0.35647025829273526, 0.2737070448201441, 0.6556344968966749, 0.27787712484257376, 0.7248403557063012, 0.7369613539282409, 0.7511962285721012, 0.6719877859368386, 0.7250607142119164, 0.7474801056967783, 0.7262796488741843, 0.7627134310342557, 0.7664401886532111, 0.7400025765014611, 0.3455311873304361, 0.3228875887629108, 0.16272507847619833, 0.19727055036351082, 0.440734974790675, 0.14503282744858592, 0.1330129166961478, 0.2010843071209809, 0.12084146812477214, 0.4494459829064933, 0.461185717800363, 0.5845483647821508, 0.6202905214307353, 0.6012572543531463, 0.5743498719270876, 0.2624383852426405, 0.49324271097872674, 0.6095419249767919, 0.8488019229505116, 0.6438682781471763, 0.8395808778844117, 0.7380236297892009, 0.8287972576110465, 0.8348851549140028, 0.8146847765761247, 0.8266856518373275, 0.8340523263666446, 0.3481157379989466, 0.1245791200489742, 0.1173516952354019, 0.10826251419841992, 0.12244115140096024, 0.12105355289951825, 0.12481896367310896, 0.09328604083407299, 0.14443952839331775, 0.20299362531857945, 0.4052226581271354, 0.15877681203676763, 0.2157842622768822, 0.13751341648043602, 0.171478340590422, 0.21136556251520355, 0.1793477439200205, 0.1672183787769227, 0.5870557361721342, 0.612416426852597, 0.6505048616947395, 0.5806372909091047, 0.6457067870876656, 0.5787580900266269, 0.6801836928931981, 0.63751398934424, 0.5899793361276526, 0.47951068490807025, 0.44827751631635604, 0.5013438966599095, 0.46535349035304485, 0.4779589667836859, 0.5325235266576606, 0.47821833034264105, 0.4951132058392994, 0.5364545803303108, 0.2016879907031176, 0.20499578617737557, 0.19864449217758384, 0.2215939212048641, 0.20912800503571416, 0.22230132347501086, 0.20824292213048357, 0.2068475376343556, 0.23091490233956313, 0.4580948317473992, 0.21288558627599052, 0.2300639381959707, 0.4873805460687436, 0.19847128996433083, 0.2135423659269302, 0.21690342161328868, 0.5933861121027422, 0.2100205968936849, 0.20822454441522398, 0.9008093238562844, 0.3228460026284492, 0.892997426045339, 0.8622777386132496, 0.8765721205030306, 0.1834100804767037, 0.8085503232872695, 0.20168767961413014, 0.16812259372130378, 0.20722889202999228, 0.8720520236108391, 0.20282934553075194, 0.47412355554124874, 0.16566022990353557, 0.21102890361937, 0.15619388750514895, 0.21044898432587855, 0.19052912827812596, 0.2025136323470339, 0.2047396042195353, 0.21731508114195952, 0.19912510881577838, 0.20676124349471114, 0.2239081902149216, 0.19971508797203508, 0.21477529253702954, 0.08693177416952802, 0.08928190037224226, 0.0901646943365162, 0.08604715183926015, 0.08979252526702652, 0.09672966101870772, 0.0852587138846298, 0.08618292651852644, 0.08818737656892595]}, "mutation_prompt": null}
{"id": "bfa34081-5a66-4603-a5ad-1c7240c45ede", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution(DifferentialEvolution):\n    def __init__(self, budget, dim, population_size=30, scaling_factor=0.5, crossover_rate=0.9, mutation_probability=0.2):\n        super().__init__(budget, dim, population_size, scaling_factor, crossover_rate)\n        self.mutation_probability = mutation_probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                mutation_mask = np.random.rand(self.dim) < self.mutation_probability\n                mutant = np.where(mutation_mask, mutant, population[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution algorithm using a dynamic mutation strategy for improved exploration and exploitation of the search space efficiently.", "configspace": "", "generation": 17, "fitness": 0.2577590528002256, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.7811155037194966, 0.774659018637148, 0.7697021411014554, 0.7767471770468726, 0.7717796787500887, 0.7952449712435926, 0.769564084192156, 0.7916030347157419, 0.780901710829881, 0.6092518952831782, 0.6083492686119267, 0.6187737250765887, 0.5951808177765425, 0.5912067805162948, 0.6081903720345849, 0.5785227646948102, 0.6056865490065101, 0.6108880668669061, 0.4976677114808189, 0.5098286166887547, 0.5336013640267641, 0.5349465181314998, 0.48404651484040817, 0.4669946990866327, 0.4793857190848154, 0.5056439831638635, 0.4923225799435781, 0.45818224122060114, 0.1630488347090524, 0.42864915579815666, 0.4444019486395199, 0.44949591845931613, 0.45248279316542717, 0.15696967812315266, 0.41523631161228935, 0.14303391037514068, 0.951934756758443, 0.9305138463621305, 0.913519012652215, 0.940165314441045, 0.9313095849962967, 0.9229006772382189, 0.9402471692003816, 0.9451625809023986, 0.9342340854843081, 0.18455872543816443, 0.17619271293963523, 0.19814439131685246, 0.2190911462261882, 0.16331300583187636, 0.23398128901735404, 0.17463437079436828, 0.20172623466438377, 0.17746933931264708, 0.19325966120392524, 0.14285440438983255, 0.1701386156218454, 0.2310020006073381, 0.2588051046668879, 0.28685816306460843, 0.19299183670858444, 0.26216770824705293, 0.22019503941711738, 0.1836560388163826, 0.14914535232259518, 0.13881804563321187, 0.16220478994923082, 0.15602697351228612, 0.17046248331976654, 0.13280416220091107, 0.18195314446116173, 0.1942040345061864, 0.13127602188687104, 0.1202339947857004, 0.15066434094242398, 0.1242251497489889, 0.11765550378509848, 0.1413083260942687, 0.13129887651527095, 0.12870567851824743, 0.12858333575701708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06516006099061211, 0.04525282089419247, 0.0619357774205026, 0.09970917846063165, 0.07396160045050437, 0.046276827562516165, 0.08470460431152838, 0.08610409460937385, 0.03528652223865114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002192145727072048, 0.0001848263358875668, 0.0005575365894925355, 0.004898083929663732, 0.0871328843943946, 0.06332972851293639, 0.07254183465654951, 0.08720245493415713, 0.08775223995068049, 0.08555735708977785, 0.08533916194250646, 0.08133676614649155, 0.10551816140514458, 0.41605664791224783, 0.4088149956564475, 0.4425557461605736, 0.457564668985297, 0.42449586952979057, 0.43469529434992105, 0.41813109267751647, 0.40389321862430283, 0.4268691390972911, 0.09233286567844656, 0.10230151555513456, 0.10612398933032496, 0.09575883021522547, 0.07700050691488791, 0.0910982316361647, 0.10153008180369105, 0.08294587027656741, 0.0959608572699292, 0.19824302226280244, 0.14620266827603956, 0.15075303850523591, 0.14472580322649187, 0.1492768086720191, 0.13869198656827375, 0.16841152383271396, 0.17756257453085322, 0.13656593447378784, 0.23692291448159353, 0.24525794981370275, 0.20982092938895403, 0.20768560918204482, 0.2238461662450224, 0.2298746853497703, 0.23176061701927453, 0.25317077728625426, 0.22320173553662093, 0.1644354143777489, 0.15484196075689383, 0.14075698802095116, 0.16792376195662417, 0.1458399603583157, 0.1609032309520324, 0.1492438379586385, 0.16805336531778847, 0.1447261613306129, 0.19858471686605095, 0.20120892206770413, 0.19665293203897227, 0.19117682217158383, 0.17658741231996122, 0.18716179445128944, 0.18675275138632252, 0.1917649808678038, 0.22228323284945273, 0.2098833076117822, 0.2545529275837619, 0.2508402984271826, 0.20537648083497584, 0.20386313833813208, 0.21696820441823506, 0.22183368910915213, 0.2224771914521404, 0.21891064463562682, 0.20042993750914218, 0.19281796332385115, 0.228378190999043, 0.2553257158810892, 0.17643547031210094, 0.18444359019492718, 0.26878900299107855, 0.20963820966876945, 0.19777470103205097, 0.22013975164283983, 0.24138858335877944, 0.2702404091681504, 0.23023128933492687, 0.16411992255754815, 0.18840243967219084, 0.2722827451617491, 0.23812819542901942, 0.18483374414626264, 0.1746903496056642, 0.18632570825158867, 0.19446156329465591, 0.16690038936277085, 0.18485952187176113, 0.177739764709828, 0.18231155362523332, 0.18333002496876327, 0.1735901178924829, 0.07007135047241042, 0.07379028457589243, 0.07671100039499501, 0.07290988779396212, 0.07537245032427331, 0.07742662772984699, 0.0733691021952887, 0.07506869142086581, 0.07228110172342328]}, "mutation_prompt": null}
{"id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 18, "fitness": 0.4713685494542293, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "7ab00ae7-4451-47f2-b1b5-7551499ebb17", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "6af6b8f0-1b2e-40fb-91e3-0348bce0fa52", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "5f8197a9-56c6-4c14-8c55-410448d78904", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "c2677c85-2a8e-4bab-814d-1467312e3b2d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "d5c15a0a-679d-441e-953e-6381e01a3ee4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "64cf4710-9515-4588-852e-bf7123ce70bd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "61b134d4-c177-4fb7-b910-2268a602209c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "7471b173-d5ef-4e9f-80e3-2de699d81190", "solution": "import numpy as np\n\nclass QIHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9, quantum_param=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n        self.quantum_param = quantum_param\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Quantum-inspired operation\n                quantum_mask = np.random.rand(self.dim) < self.quantum_param\n                quantum_a = np.clip(a + quantum_mask * np.random.uniform(-1, 1, self.dim), -5.0, 5.0)\n                quantum_b = np.clip(b + quantum_mask * np.random.uniform(-1, 1, self.dim), -5.0, 5.0)\n                quantum_c = np.clip(c + quantum_mask * np.random.uniform(-1, 1, self.dim), -5.0, 5.0)\n                mutant = np.clip(quantum_a + self.scaling_factor * (quantum_b - quantum_c), -5.0, 5.0)\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "QIHybridPSODE", "description": "A novel optimization algorithm named Quantum-Inspired Hybrid PSODE (QI-HybridPSODE) that incorporates quantum-inspired operators for enhanced global exploration and exploitation in black box optimization.", "configspace": "", "generation": 25, "fitness": 0.2850917565722544, "feedback": "The algorithm QIHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.6224507997315877, 0.7048502624554551, 0.6209538065452302, 0.6328095743670688, 0.6680994635330446, 0.6691498077523304, 0.6334382287551885, 0.6310576164716197, 0.6530074674657094, 0.38808646926396473, 0.3986700193306165, 0.36519253921727, 0.35224616012702936, 0.3656142156450133, 0.357521885998632, 0.36977907630187856, 0.43802647458746147, 0.3503878856822752, 0.09352159182641628, 0.1421144973513483, 0.1909183297988496, 0.13088647420072552, 0.1289693686117438, 0.12661957622872655, 0.13984191670759705, 0.15768495629417612, 0.13651948839687977, 0.1348713239881596, 0.11655587900049158, 0.11926145273024935, 0.11840031509992499, 0.12309983814032655, 0.12498212482303628, 0.11326388005754484, 0.11515488936241725, 0.10110734014051359, 0.9841485684617236, 0.9917833873629387, 0.9821262348185826, 0.9742632215673717, 0.9832124882142741, 0.982938717583194, 0.9779585222126226, 0.9803542813712651, 0.9829070048612759, 0.3512503880971336, 0.3534086112311614, 0.3299188653945896, 0.34854265734772494, 0.35597205381968255, 0.3211112047481719, 0.34964021211354945, 0.3405577512571727, 0.3174203624794454, 0.6275610437409425, 0.7626161769624142, 0.37386566904620055, 0.3728533758911542, 0.35105408090857626, 0.2119340502180308, 0.7234829250785021, 0.35401153096789717, 0.2697550869830939, 0.1808455156268568, 0.21893512013065075, 0.18359493770794388, 0.15299233597917317, 0.1649695290801041, 0.15933493764977957, 0.16054374126278204, 0.1712796188830542, 0.15539964031243492, 0.11694053115444947, 0.16053081915454426, 0.1781691426241201, 0.12746311869883498, 0.15825969672525464, 0.18063469216856687, 0.12602338876816577, 0.1739681900904987, 0.19942128835708894, 0.11747944736228089, 0.0009530520412088794, 9.999999999998899e-05, 0.035793702546615735, 0.00785281121480419, 0.06420064725636965, 9.999999999998899e-05, 0.03437449522238112, 0.01774487608462727, 0.07104472198684941, 0.0978689471444979, 0.24732050967277797, 0.08586613349814598, 0.10245191696852307, 0.1300446094854607, 0.1134582357041578, 0.15870839955126625, 0.11703403440961846, 0.026213904550036027, 0.08822035979669585, 0.06557512003333954, 0.10451320231505745, 0.06835416799387006, 0.1077194425585829, 0.08659572282169992, 0.06232234147144011, 0.06111121070077874, 0.16750159845824286, 0.15624640849274807, 0.16195881636494047, 0.06793162908449812, 0.0789015998383562, 0.13812343272960792, 0.151247439012118, 0.11737247452179889, 0.19079574521281872, 0.49692309924446987, 0.5183576326625999, 0.512969720240595, 0.5009505898964469, 0.4646489096079649, 0.4722175405595229, 0.478614782035916, 0.4898400002591925, 0.5016698387258061, 0.11523514198772833, 0.14241797871420347, 0.12349852446949194, 0.12692359161916233, 0.09497076481406819, 0.10983198719896459, 0.09897568461854767, 0.16264979892482245, 0.09902078563678185, 0.21981183491981704, 0.2807985671767049, 0.30543202634206024, 0.19874694970482154, 0.35288468602030354, 0.22019828645177875, 0.3115547640905143, 0.21752444792930503, 0.2258980108204196, 0.32970906345630924, 0.343566823478613, 0.29278837364577026, 0.341704330564511, 0.30909597806890765, 0.3197164704348826, 0.3417999609852902, 0.3125696439320451, 0.32691177639735913, 0.2565121176852364, 0.2291196787543487, 0.2924211844568718, 0.3137878059230015, 0.25100550843545144, 0.1913902085679181, 0.27474059182796895, 0.30280648668766685, 0.27179601870501147, 0.24497007098815327, 0.19476776072582547, 0.19144711736313968, 0.1964338371912313, 0.19901775848922187, 0.20017309511748593, 0.22410193247803534, 0.21321928243987676, 0.21357467718025525, 0.2246179487611325, 0.22640603030060813, 0.22440030402654465, 0.20305006919174629, 0.22155667513462218, 0.19707565766524637, 0.2591341708625988, 0.19482037531125862, 0.2029691243855506, 0.8457631991263577, 0.18704761335365827, 0.15379085631250566, 0.7717531394466867, 0.20023470114409658, 0.19876876358868134, 0.18871440407042273, 0.17203528431584614, 0.8461114757722937, 0.6451799338146234, 0.5592339520770346, 0.16837331567142033, 0.5453144584869007, 0.8273464426335783, 0.5576642513761018, 0.7651625166856173, 0.10467478312357092, 0.6214443414940485, 0.17303474828894994, 0.18154846743485087, 0.172105976112365, 0.19132568029139485, 0.17193785219100788, 0.2010348426967904, 0.19218768702871858, 0.19559403650822915, 0.18426650908817488, 0.121452897312879, 0.08329231855157015, 0.08098627271543335, 0.1057299441084748, 0.08367789797877467, 0.09045740229171317, 0.08034473782570639, 0.0823984112547882, 0.09191558193226068]}, "mutation_prompt": null}
{"id": "74f3cab2-6e61-4b3a-a716-2773339f25f5", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim, population_size=30, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, population_size, inertia_weight=0.5, cognitive_weight=cognitive_weight, social_weight=social_weight, scaling_factor=scaling_factor, crossover_rate=crossover_rate)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        self.inertia_weight = self.inertia_max\n        inertia_decay = (self.inertia_max - self.inertia_min) / self.budget\n\n        # Existing HybridPSODE code remains unchanged\n        \n        return g_best", "name": "DynamicHybridPSODE", "description": "Enhancing HybridPSODE algorithm by adding a dynamic adaptation mechanism to adjust the inertia weight during optimization to improve convergence behavior.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'g_best' is not defined\").", "error": "NameError(\"name 'g_best' is not defined\")", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {}, "mutation_prompt": null}
{"id": "426dc2ab-7ddb-4170-a865-0159d70a85de", "solution": "import numpy as np\n\nclass CuckooSearchDE:\n    def __init__(self, budget, dim, population_size=30, pa=0.25, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            new_population = []\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.alpha * (b - c), -5.0, 5.0)\n                \n                if np.random.rand() < self.pa:\n                    j = np.random.randint(self.population_size)\n                    new_population.append(mutant if func(mutant) < func(population[j]) else population[j])\n                else:\n                    new_population.append(population[i])\n\n            population = np.array(new_population)\n            fitness = np.array([func(individual) for individual in population])\n\n            for i in range(self.population_size):\n                if fitness[i] < p_best_fitness[i]:\n                    p_best[i] = population[i]\n                    p_best_fitness[i] = fitness[i]\n\n                    if fitness[i] < fitness[g_best_idx]:\n                        g_best_idx = i\n                        g_best = population[i]\n\n        return g_best", "name": "CuckooSearchDE", "description": "An evolutionary algorithm inspired by the cuckoo bird's breeding behavior, where each \"cuckoo\" lays its eggs in other birds' nests to optimize the survival of its offspring while occasionally replacing the host's eggs.", "configspace": "", "generation": 27, "fitness": 0.06090021077020448, "feedback": "The algorithm CuckooSearchDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.13236846812261416, 0.09861544021881019, 0.15141903413644264, 0.08952233024927114, 0.06305867013654187, 0.0992856391029674, 0.12159331423378206, 0.1398494562898126, 0.10379154276267855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03150388999196618, 0.036044950021953404, 0.014217281010919014, 0.03697946067706648, 0.013351626657682192, 0.04318530045550739, 0.028679699535008707, 0.024063074503446136, 0.042886429690550676, 0.011295902677474046, 0.0045447149708510715, 0.01230625715967204, 0.03057149965224215, 0.025005313142368646, 9.999999999998899e-05, 9.999999999998899e-05, 0.003186604249084901, 9.999999999998899e-05, 0.05140722497204919, 0.04219942533172094, 0.047952141071540555, 0.060233896596150194, 0.055935023627277536, 0.05496121339271853, 0.07382892990876566, 0.05935098127438743, 0.05934199392138939, 0.0026883242815399777, 9.999999999998899e-05, 9.999999999998899e-05, 0.02315911446139962, 0.007976375554790693, 0.04221233800118518, 9.999999999998899e-05, 0.022197549866565858, 9.999999999998899e-05, 0.1289665461952343, 0.08523974096083042, 0.052233822106523387, 0.13356066391576538, 0.03277326967263472, 0.004453393550696072, 0.06121508810171894, 0.11733032155025613, 0.17175641975762523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00921806363959854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08193715335097118, 0.04663442296339182, 0.07107360737309787, 0.028913076442110608, 9.999999999998899e-05, 0.0036890744268688325, 0.029115026930292665, 0.027146483748988093, 0.038094049744858194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16331317056256212, 0.1472937016798307, 0.1754326131049887, 0.10395509391853974, 0.10453998154844635, 0.10736073152157699, 0.16112956940342849, 0.11099590483495225, 0.16056600699953472, 0.04719618347093779, 0.00867975371160934, 9.999999999998899e-05, 0.028238165944009963, 0.002532723732781017, 0.03725072854024769, 0.009785318448604863, 0.028757758159146607, 0.051356034678604945, 0.12244114046442811, 0.10389276248179613, 0.11621607922627242, 0.10029581117819597, 0.16052280193357438, 0.11028891333703417, 0.13889482395395358, 0.0896863149174898, 0.13932980159106323, 0.11640651186817519, 0.13637687445993574, 0.16921200909863188, 0.14154189967937925, 0.12868973643511783, 0.14097879980825567, 0.1674873527233105, 0.18786159650175815, 0.14207858047475852, 0.06725257265890161, 0.067978907203322, 0.10527824932374585, 0.07433116699253917, 0.06813058089107493, 0.07718863262643905, 0.10652008376779454, 0.12478760687914037, 0.06640483620955162, 0.17054214178510396, 0.12805916351714264, 0.13477142342633475, 0.19377672144845992, 0.16234312482406044, 0.15078554494520446, 0.17195965416261438, 0.11768566523696267, 0.13367234866477007, 0.15178984238885407, 9.999999999998899e-05, 9.999999999998899e-05, 0.12910205746625403, 9.999999999998899e-05, 9.999999999998899e-05, 0.1361459921580126, 9.999999999998899e-05, 9.999999999998899e-05, 0.0902800029539832, 0.11188264127476377, 0.10267721714570743, 0.11459967425001738, 0.1207914665021157, 0.10071870069553046, 0.09273247042649413, 0.1112101964035539, 0.15601315981600838, 0.13630129973905547, 0.1021385870526288, 0.14740008494313683, 0.06373718025149377, 0.07901678011129531, 0.05377000930396203, 0.06335252213298448, 0.06569502411814299, 0.09606534042255521, 0.17589305287149715, 0.1566358420394397, 0.1553958836620779, 0.16958924025579658, 0.1572655837830551, 0.1691717203315235, 0.14969714796693134, 0.17037552056152394, 0.15098246046324915, 0.0460131716891683, 0.04886385498057921, 0.05818943337518012, 0.030062769304173842, 0.050048602308807366, 0.04886242500407567, 0.046575262245138416, 0.047300061489990775, 0.025128913177658085]}, "mutation_prompt": null}
{"id": "bf7f9a6c-eb50-45a6-aae4-ad3efaa18509", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "1c78a4c2-c94c-47e9-893f-56e726762a15", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n                # Introduce local search for further exploitation\n                for _ in range(3):\n                    local_search_candidate = np.clip(population[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                    local_search_fitness = func(local_search_candidate)\n                    if local_search_fitness < fitness[i]:\n                        population[i] = local_search_candidate\n                        fitness[i] = local_search_fitness\n                        if local_search_fitness < p_best_fitness[i]:\n                            p_best[i] = local_search_candidate\n                            p_best_fitness[i] = local_search_fitness\n                            if local_search_fitness < fitness[g_best_idx]:\n                                g_best_idx = i\n                                g_best = local_search_candidate\n\n        return g_best\n", "name": "EnhancedHybridPSODE", "description": "A metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) incorporating a dynamic mutation strategy and local search for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 29, "fitness": 0.33608344900471104, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.7596673563367468, 0.7609869587978585, 0.7577126924225434, 0.7717459339215721, 0.7336937556926546, 0.7439883023198046, 0.7520772912185517, 0.7389124866795782, 0.735899561870546, 0.38375991269564724, 0.4686028826443348, 0.34903646045134484, 0.411385691656759, 0.10069058654969354, 0.34245926477237243, 0.2856132036619422, 0.5100762510881609, 0.31623242109191596, 0.47680239993993123, 0.11483478649461498, 0.10669503018467907, 0.12669734041166214, 0.16603078968264073, 0.08672703038096718, 0.10406750064073078, 0.15456813343005305, 0.1320999897477252, 0.11545247723790142, 0.12085362737227878, 0.13009613081200877, 0.09745568666408633, 0.07475325481892181, 0.088925319861891, 0.10429408159995224, 0.09876367109495277, 0.09833695134883635, 0.9768585919456967, 0.9918678433059388, 0.9637655591090127, 0.9361159950994941, 0.9299923468545688, 0.9512561035920217, 0.9644878137962741, 0.9413104577208242, 0.9579948574293189, 0.4837256767847663, 0.48183371796112384, 0.48984286839645597, 0.504349401245358, 0.49285900303589947, 0.48571756474639305, 0.5059016141475523, 0.4772647793416295, 0.4792633462584801, 0.8114932552017268, 0.807794522889794, 0.7786162992387229, 0.27008436300012795, 0.8515734503362848, 0.831777005233414, 0.7547834063016357, 0.17516971731117426, 0.8170970826615608, 0.12208463276404324, 0.3130608144038196, 0.33837040553741915, 0.12724752232826064, 0.26269186235421105, 0.31969408607081373, 0.1291353597027075, 0.1268896355434086, 0.4254170525438622, 0.4115376587046615, 0.25198267278180664, 0.13209582505202888, 0.3011327373448228, 0.46254803910996334, 0.2673483914695485, 0.1168737278340648, 0.2914678206757044, 0.2931902774006221, 0.05585911064499072, 0.16497854567040082, 0.2612762093207007, 0.05704875688173561, 0.08478050028624617, 0.07582586985793893, 0.12436318536320412, 0.08022306228159781, 0.21814143915229134, 0.2640029218278338, 0.301220926075352, 0.2898691845959034, 0.23393596670467287, 0.19601180831994203, 0.16323562895220545, 0.27250250065529436, 0.30062130640877227, 0.27495449981711984, 0.04228642058113097, 0.07639218416162352, 0.053505786836472335, 0.09181729773043168, 0.08976489371444674, 0.06164587909246799, 0.06050113216229258, 0.08824001566189821, 0.062293665461981784, 0.19293174030503701, 0.2276151556713628, 0.21322544631022278, 0.28986891970072604, 0.26608289168952814, 0.2816704559810359, 0.1757690177595963, 0.21991802978298103, 0.10244379408947446, 0.5496708654737956, 0.5782475178564953, 0.6121823383565922, 0.5968437050273465, 0.6397847257021536, 0.6404086612750985, 0.5940915678879299, 0.5959931801944676, 0.5767790617561237, 0.07461366637077627, 0.11478800610473994, 0.12535468042762055, 0.14585026865940942, 0.0762210700393211, 0.11381897609638314, 0.08313833074441568, 0.14680846244702883, 0.11317915376308485, 0.258287618528546, 0.25234417088837346, 0.20730783763460692, 0.41964288710707476, 0.5554413968693717, 0.19858125103215452, 0.5293487481996948, 0.3975678826638598, 0.2821069337868156, 0.40380763258561225, 0.4280060443451733, 0.35981009408029296, 0.44134657113432463, 0.38837457527987307, 0.42562267904353335, 0.42584608538200563, 0.40789787870512095, 0.3989136721558767, 0.29590908391361725, 0.3477388117825063, 0.2444739674762466, 0.280977683242548, 0.21016225606865546, 0.29930647638128416, 0.33162441582241853, 0.3700839540987194, 0.3239058218331956, 0.23583827794788326, 0.20011166767884492, 0.19900560525057953, 0.22899176352505834, 0.2291063816215173, 0.21903862795142148, 0.19423655753210556, 0.2114056550947473, 0.19344570147159457, 0.1923264305897483, 0.18925314978656893, 0.17726657353398934, 0.24124165432317146, 0.20634965794399163, 0.1986283605656397, 0.21823872010880918, 0.2192049170987651, 0.20381670288133868, 0.15289862073667282, 0.16550124472948613, 0.15212908903160782, 0.8714041686077546, 0.19836518406988468, 0.8418579642505587, 0.1670885959458439, 0.16927909933376117, 0.8514578782209048, 0.839211113534966, 0.1568103520076698, 0.8166252148200559, 0.8021983454318308, 0.16806671612410828, 0.8051519671377517, 0.21088883875399422, 0.1544132573348157, 0.8257294366468876, 0.18315392371582684, 0.1889485201602512, 0.2043493159379759, 0.2011986160674223, 0.18091359060647416, 0.18926655971792672, 0.1889987911934985, 0.17491493247051715, 0.18899152169976785, 0.08338660895255912, 0.08474954996065076, 0.10202980448743915, 0.08334132348031853, 0.08757223536901493, 0.09416740854306205, 0.08606896958415255, 0.08407181840197753, 0.07872280514834895]}, "mutation_prompt": null}
{"id": "936381e1-9390-45b6-9147-30864471be91", "solution": "import numpy as np\n\nclass NovelHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n                if np.random.rand() < self.mutation_prob:\n                    mutation_vector = np.random.uniform(-1, 1, self.dim)\n                    population[i] = np.clip(population[i] + mutation_vector, -5.0, 5.0)\n                    fitness[i] = func(population[i])\n\n        return g_best", "name": "NovelHybridPSODE", "description": "Introducing a Novel Evolutionary Algorithm based on Hybridizing Particle Swarm Optimization with a Novel Mutation Strategy for Enhanced Exploration and Exploitation in Black Box Optimization.", "configspace": "", "generation": 30, "fitness": 0.25218831813864767, "feedback": "The algorithm NovelHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.5228259103856288, 0.49858102820748795, 0.5379121084641147, 0.5280909524427095, 0.5029663976542702, 0.5033441631334872, 0.5166271072268517, 0.5097406417494108, 0.531277849751883, 0.06804121346733205, 0.11557581619559565, 0.06806636678607958, 0.03060010976760763, 0.08083131056036452, 0.10208629958397342, 0.10394712741068435, 0.10064455890452795, 0.10539584000831526, 0.10789151606084268, 0.09750867010833408, 0.10564885502927224, 0.09841976161226884, 0.10444232799881958, 0.09023978924455534, 0.10542889893223495, 0.10118543020075832, 0.13442198726022647, 0.09776848351718237, 0.10095780665181997, 0.10424245515482056, 0.09677602600445956, 0.08476638254434543, 0.1103242742189926, 0.10589316507187563, 0.09420540792392784, 0.08787116093580027, 0.9761016755635201, 0.986414148196142, 0.9917822050740939, 0.9614044189722275, 0.9823632097172547, 0.9869911059684958, 0.9847134407843402, 0.9790895893188871, 0.987678449113622, 0.3096451952730225, 0.30283885945372646, 0.30190756577571154, 0.3135155379747827, 0.29615125898864025, 0.30919723281282185, 0.35009760238262433, 0.31933578225060333, 0.29432248345285794, 0.6478897127367533, 0.3504371759837154, 0.6096132701073647, 0.7267433498218117, 0.5352817081817641, 0.6334758058929477, 0.5690403136624713, 0.43752162796530336, 0.6854330788092803, 0.16676226754540424, 0.16476360729745687, 0.1834451170736081, 0.12775633713898094, 0.18122768767873176, 0.19245658342702732, 0.19105090630607213, 0.176776692967328, 0.17712277018475064, 0.21935774403891006, 0.13555454026385905, 0.17196242362031167, 0.22023382675717373, 0.11030826793753479, 0.1862913045322152, 0.1972495580854582, 0.18980724456327436, 0.16322690044662935, 0.052504148631863035, 0.06423100351814937, 0.048969556417897575, 0.041148975445716274, 0.02237510301689416, 0.0009971338412689823, 0.07781016009388819, 0.05792811075083815, 0.0777037955257116, 0.0966753826368999, 0.10156393506725103, 0.10941788603801361, 0.0956616770804376, 0.10771733652850257, 0.08552369469486021, 0.08764684989683325, 0.09481411671541629, 0.09716278519441568, 0.023215131921598964, 0.0027889868322834577, 0.027620226741288167, 0.01906170647972627, 0.022857757889288455, 0.045209325814432266, 0.03589766566649977, 0.008103354092745763, 0.0006566059593547946, 0.14567373491208868, 0.10709948613763887, 0.134658323471901, 0.12063269177131075, 0.12730840486149486, 0.11448618151465306, 0.14354686113291426, 0.1350854041552484, 0.12087882676734318, 0.452398976037788, 0.421242779202893, 0.42572786885550984, 0.4459015792584604, 0.40759875576308957, 0.4352623459317926, 0.4703732557145539, 0.4131603624877186, 0.4584540799783372, 0.09862674710142949, 0.09085135642863429, 0.1102262889208192, 0.12412873652789536, 0.11077810792998222, 0.10829469097620714, 0.09156303343825933, 0.11143404428565773, 0.09415741773137265, 0.1938929661747203, 0.16486463109027305, 0.18838721425524196, 0.24006264572554525, 0.22529397573084875, 0.19148930107756224, 0.3447984795108908, 0.29192693608606546, 0.13558455922127144, 0.3255302787128981, 0.3225631717958174, 0.3129013489473499, 0.33039396557042044, 0.2920889944695525, 0.31812884812947373, 0.3181760260534373, 0.30620008044565816, 0.32151566846907165, 0.2628345251266222, 0.22917338795659037, 0.24212575043351448, 0.2441762529570105, 0.186563905128326, 0.25223388565184657, 0.2686482108195112, 0.2526753531221453, 0.25392664097248985, 0.20553570059099224, 0.23329162934667347, 0.20081094522384924, 0.22836451698387938, 0.2077918815487586, 0.20472926762795474, 0.20834437073177658, 0.1942507875662891, 0.21206758845710671, 0.1916923527256561, 0.2010772272445257, 0.18317891202801506, 0.18569392402901153, 0.19744893117839657, 0.20258864979545588, 0.20181785489208315, 0.20692460538281843, 0.1997852058121563, 0.839614839510583, 0.18741681699333723, 0.7940021079836598, 0.7842315368558243, 0.20015589324160732, 0.11677298721224039, 0.09970936039860867, 0.1695106311029162, 0.1150913349858238, 0.6894927137521056, 0.4591106445288, 0.15500877667920288, 0.21081774089243277, 0.6847288920557486, 0.08311944295691587, 0.10520779564598837, 0.21298821809567114, 0.6694554942732025, 0.17732009076225042, 0.1865240474136629, 0.1794437211704839, 0.1833665963411265, 0.17751809286282805, 0.1776626805147261, 0.17903828620966467, 0.21269428264367074, 0.20253364618561487, 0.0839211025324279, 0.08702346641153946, 0.07938242730552758, 0.09021500520229042, 0.089570372720291, 0.09475926216318786, 0.08006553990419651, 0.08655271783954144, 0.0833992597432025]}, "mutation_prompt": null}
{"id": "f11111f0-1c13-43fe-b7fa-9efd789f5c52", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "6b2751a1-5044-4bf8-bfa6-8e5f054d6bd8", "solution": "import numpy as np\n\nclass GrayWolfOptimization:\n    def __init__(self, budget, dim, a=2, b=1, c=1):\n        self.budget = budget\n        self.dim = dim\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                alpha = np.random.uniform(0, 2 * self.a) - self.a\n                beta = np.random.uniform(0, 2 * self.b) - self.b\n                delta = np.random.uniform(0, 2 * self.c) - self.c\n\n                X1 = g_best - alpha * np.abs(population[i])\n                X2 = p_best[i] - beta * np.abs(population[i])\n                X3 = np.mean(population, axis=0) - delta * np.abs(population[i])\n\n                population[i] = (X1 + X2 + X3) / 3\n                population[i] = np.clip(population[i], -5.0, 5.0)\n\n                fitness_i = func(population[i])\n                if fitness_i < fitness[i]:\n                    fitness[i] = fitness_i\n                    if fitness_i < fitness[g_best_idx]:\n                        g_best_idx = i\n                        g_best = population[i]\n\n        return g_best", "name": "GrayWolfOptimization", "description": "A novel metaheuristic algorithm inspired by the Gray Wolf Optimization algorithm that mimics the leadership hierarchy in a wolf pack to optimize black box functions efficiently.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'GrayWolfOptimization' object has no attribute 'population_size'\").", "error": "AttributeError(\"'GrayWolfOptimization' object has no attribute 'population_size'\")", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {}, "mutation_prompt": null}
{"id": "6ff15d0b-16e5-4bc9-95ab-c74ebd1e9c47", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "05ed7060-f268-40cc-b30e-ff24e2185db1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "5873b520-b781-45dd-b104-d60188bec31e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "b4c91ead-f03e-48c2-8683-e3757292a939", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "8e7ed042-2816-42a1-8513-5afec93272d9", "solution": "import numpy as np\n\nclass QGWO:\n    def __init__(self, budget, dim, population_size=30, quantum_alpha=0.1, grey_wolf_alpha=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.quantum_alpha = quantum_alpha\n        self.grey_wolf_alpha = grey_wolf_alpha\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.quantum_alpha * velocities[i] + self.grey_wolf_alpha * r1 * (p_best[i] - population[i]) + self.grey_wolf_alpha * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.quantum_alpha * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.grey_wolf_alpha\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "QGWO", "description": "An innovative algorithm named Quantum-inspired Grey Wolf Optimizer (QGWO) leveraging quantum computing principles and grey wolf social hierarchy for efficient black box optimization.", "configspace": "", "generation": 37, "fitness": 0.08505801220534419, "feedback": "The algorithm QGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.1824874461894076, 0.10507375329577895, 0.21004318899809737, 0.09804544965022255, 0.07759239624995118, 0.13725694961357027, 0.1062984268462509, 0.10585108613484995, 0.10440683470568146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03649470208647365, 0.038701406434544894, 0.06405744711013339, 0.045651579764965255, 0.06755938181456, 0.04302064773224268, 0.06752629174732538, 0.041880231257114264, 0.07528874305090816, 0.03530083323539279, 0.002709420097457449, 0.013637924003554125, 0.08357996915142607, 0.02666229785015528, 9.999999999998899e-05, 9.999999999998899e-05, 0.015893550067325624, 0.009960355096119033, 0.056207249545195515, 0.05980001790164102, 0.057794731850414394, 0.06016358654325504, 0.06639013737379851, 0.048092631068970104, 0.07259849101044069, 0.07412744783581982, 0.051250427136874, 0.03173512182199989, 9.999999999998899e-05, 0.0036060662009557154, 0.0038035015239930026, 0.022706107971827594, 0.029487829724621273, 9.999999999998899e-05, 0.02739757487597616, 9.999999999998899e-05, 0.1335255080496427, 0.07337273777700826, 0.10692385595408782, 0.2154208145683877, 0.0848865448099354, 0.08621573127554416, 0.06819472664430393, 0.11972815773916934, 0.09021331940837996, 0.0100840240792468, 9.999999999998899e-05, 9.999999999998899e-05, 0.017260072474632238, 9.999999999998899e-05, 9.999999999998899e-05, 0.04571452761410377, 9.999999999998899e-05, 9.999999999998899e-05, 0.008701344602947247, 9.999999999998899e-05, 9.999999999998899e-05, 0.011229647482634553, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07457247206411599, 0.023615334305236102, 0.08290819944150285, 0.03050902628919616, 9.999999999998899e-05, 0.002487134002319147, 0.10760016983592391, 0.08164932007338344, 0.03990304283883506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015205456774619042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21682855405880486, 0.22673935435763604, 0.18829148366112813, 0.1513337424983765, 0.13201483703362027, 0.13207668054611843, 0.26627528306930004, 0.24566019243539838, 0.26958620598981553, 0.031619746813458915, 0.020204506592299, 9.999999999998899e-05, 0.06024490127187054, 0.026018870980020647, 0.10281469264979604, 0.052297433712928054, 0.07666194905537671, 0.06242588266201565, 0.15725051734867668, 0.24946447416868756, 0.14938152971532836, 0.15885438556120302, 0.13123140835404723, 0.1835300550938439, 0.17692806223887403, 0.16948515058246394, 0.20173966887240924, 0.14785516647066166, 0.1673850070594275, 0.15542696754239738, 0.16584646858694796, 0.14489159363401338, 0.19053215802337764, 0.1891153914002519, 0.21414623127653332, 0.14998087653275816, 0.10008816121727049, 0.10802350848485398, 0.10271895222217897, 0.13681619251777555, 0.07616636809291433, 0.19189117450400095, 0.13530173779921462, 0.1617175753007759, 0.10587391184951178, 0.2674920133842875, 0.18501410260717022, 0.24094140324525615, 0.20167680002405253, 0.26147621114755926, 0.18757694917598733, 0.19631565348184254, 0.1669641476291157, 0.19298076256930863, 0.15928020435025825, 0.16195262669617838, 0.1738879929053896, 0.1512879037877688, 0.15881003090219692, 0.1412404796555895, 0.15415783636720748, 0.18707891139737953, 0.15320640363896998, 0.08715568957917075, 0.10713703158076149, 0.11727308982655726, 0.16918468884735516, 0.17613930310712822, 0.0943228834953932, 0.08236540202186737, 0.14758023939058929, 0.16817522628047032, 0.1832570960941069, 0.1414260944730289, 0.11523909804040944, 0.07483050884733367, 0.12398935322476445, 0.06198565241075449, 0.07659290724202905, 0.07214011888045424, 0.08100232152154008, 0.19841611390812786, 0.2117794447612671, 0.2116699302995616, 0.21677624558951913, 0.18905055372945268, 0.22354702960396344, 0.20007403220221098, 0.23017610365199692, 0.20775733578205524, 0.05260307455518065, 0.054851739133486066, 0.0516878876320781, 0.05672741939920012, 0.08622102881090721, 0.09162630202841993, 0.07228293351945214, 0.059681356565216226, 0.05816555284020741]}, "mutation_prompt": null}
{"id": "d5c37f79-f3ef-4272-a587-a752ab97c273", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "88e20a4d-06f6-4bf4-bf2a-0f7df034bb68", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "e97d36eb-bda8-4ea3-a801-6c0e0246dd6f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "e82d2316-353e-47af-88a8-4fab6326b9b4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "7e733a05-122e-4421-bb38-864adb1b7157", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "a723e783-db34-4dda-a579-208f70b4f813", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "bfeccf56-48d8-4c58-abda-e2647d83dd43", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "9722ac54-ef8e-4dbc-9273-bc2d0331704c", "solution": "import numpy as np\n\nclass QPSO_QbDE:\n    def __init__(self, budget, dim, population_size=30, quantum_weight=0.5, quantum_scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.quantum_weight = quantum_weight\n        self.quantum_scaling_factor = quantum_scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.quantum_weight * velocities[i] + r1 * (p_best[i] - population[i]) + r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                quantum_mutant = np.clip(a + self.quantum_scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, quantum_mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "QPSO_QbDE", "description": "A novel metaheuristic algorithm, Quantum-inspired Particle Swarm Optimization with Quantum-behaved Differential Evolution (QPSO-QbDE), combining quantum-inspired PSO for global exploration and quantum-behaved DE for efficient exploitation, for black box optimization.", "configspace": "", "generation": 45, "fitness": 0.36747020525916624, "feedback": "The algorithm QPSO_QbDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9351442450109401, 0.9396669421335588, 0.9316300193122458, 0.9287842350388147, 0.939177016332468, 0.9412126374712906, 0.9268483080281273, 0.9384364651272861, 0.9261134269034146, 0.8777380735108427, 0.7617933602904774, 0.7995703435811314, 0.8803501244468316, 0.8637014982602873, 0.8505940358340188, 0.7622037423088724, 0.8708182400336574, 0.5188746088223626, 0.11906895497653258, 0.1349592532536441, 0.11360360975571471, 0.10242282900601762, 0.11805650506253718, 0.13461091758953858, 0.11937509971137628, 0.09277770933244078, 0.10647566780718698, 0.09263496680069716, 0.11109085227635573, 0.09352864604898548, 0.0804163387715342, 0.0929424341290962, 0.10575481344286108, 0.09744537533291986, 0.11137780112162765, 0.08641057572279986, 0.9873139894782081, 0.9897137964517652, 0.9833995855737961, 0.9793051515422438, 0.9467946987081283, 0.9583722214043802, 0.9607863705168797, 0.9759315048840063, 0.9851236991453192, 0.8349914210128297, 0.21476063116265431, 0.7978425373385147, 0.8799898663519468, 0.8781269145037244, 0.7187595767561679, 0.8196970199249265, 0.7823036934236581, 0.8641422251521593, 0.9475569077475622, 0.22929184502664834, 0.36165887889723747, 0.21089001800833007, 0.9448102897122372, 0.21394732737920108, 0.3849079873189456, 0.9412498643638171, 0.22286537076556512, 0.6693190583129842, 0.23914816625800783, 0.23754693688666595, 0.13465440373145632, 0.26531082385067917, 0.13533954080189792, 0.133934911715216, 0.2347382230547097, 0.3707953297383355, 0.27767831138891974, 0.5754346332350031, 0.13579667388303895, 0.23410693277991512, 0.5060504864227984, 0.6918575609380452, 0.13030538435266115, 0.30408643759467546, 0.13587790574694647, 0.08183359759458453, 0.093354883612778, 0.12949846477654758, 0.06026758245361874, 0.16541157520577143, 0.18041449656514175, 0.23135499197393616, 0.13711251631871568, 0.1201560877826865, 0.23997838955761053, 0.2065816002616493, 0.26336783368524097, 0.15136731177590224, 0.06437297446454016, 0.06882489448909923, 0.14230487902416566, 0.1732685427261378, 0.2847877877502054, 0.2420020841371835, 0.1120251337145417, 0.07213931823683217, 0.20148850335041613, 0.1422981017036722, 0.20007183784658278, 0.15367617013292145, 0.1646444066207281, 0.11305672926429433, 0.3797470253541724, 0.39531807682206377, 0.28833222078099574, 0.2831923747094359, 0.21081102702519494, 0.17304696822030619, 0.27799099852443987, 0.28611968384054554, 0.2819452260946538, 0.6896503075605656, 0.717014989251505, 0.6323916972241806, 0.7880030430392688, 0.6200556269754941, 0.691767805712072, 0.765782739222938, 0.6485550418680022, 0.6752391076591477, 0.11890116774480375, 0.08639975859467686, 0.11915216273212426, 0.14702715403147526, 0.14423416036846504, 0.1462554984197133, 0.08937697698500324, 0.13502066723597383, 0.10117118917426438, 0.13734895747895537, 0.28518845788929326, 0.24680519004031165, 0.36950154049931583, 0.6092267615971131, 0.23560626500753779, 0.43264094040375, 0.20026179023873825, 0.22489677707990996, 0.47460319517627414, 0.36369724365027534, 0.42195034357223693, 0.5262703699557458, 0.50624499530832, 0.6562761245551998, 0.3482774372345607, 0.31160089037372896, 0.4677880319296227, 0.18787620318800535, 0.2977755982284266, 0.25858147166875656, 0.2628081040066902, 0.3939650079344794, 0.5505553509255598, 0.29343389503342454, 0.31813953629814784, 0.2778869659759181, 0.2355118534859515, 0.17115512247086917, 0.21911815743370622, 0.21482775188798098, 0.22334288565480143, 0.21980221394382193, 0.22675547163998166, 0.18929988885406746, 0.2411252289062964, 0.2118175627074088, 0.18649709100012346, 0.20374326224680117, 0.2125264685231223, 0.21046164978873994, 0.184420391293444, 0.196430969991507, 0.21739427594851235, 0.2044235494930996, 0.21328057205538875, 0.16918212656533016, 0.13116863353484165, 0.9544589345454949, 0.20100907514337973, 0.20071063047725324, 0.12280723138813243, 0.17005256763380272, 0.1885258863270356, 0.7396915438944363, 0.15746555295577547, 0.8342498986464073, 0.9582046936600448, 0.16897125129696, 0.15612406523723255, 0.7534789361012012, 0.10497446940037802, 0.10485774913070145, 0.18329561010620987, 0.2146728785463573, 0.20983260971744733, 0.18793728503330154, 0.1759977303250042, 0.19371059793673495, 0.1777970621716839, 0.17519873265133523, 0.19292560077026233, 0.07718454040778511, 0.09358132700961419, 0.10584729172720964, 0.11146890426316824, 0.10663466799227606, 0.11246030171544685, 0.0895250632270781, 0.08752340129229852, 0.10060749654407009]}, "mutation_prompt": null}
{"id": "363b90b0-ae46-40a2-b666-5f8ad494f013", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "e76ce5f5-cc83-47f5-a3b3-ead98fa25271", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "1fd1f4c0-adf3-4452-b336-b3150b7b2697", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "RefinedHybridPSODE", "description": "A novel hybrid algorithm blending Particle Swarm Optimization (PSO) and Differential Evolution (DE) for enhanced global exploration and efficient exploitation in black box optimization tasks with a focus on individual line refinement.", "configspace": "", "generation": 48, "fitness": 0.4713685494542293, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "b33089fe-4976-4ad1-9967-c159a02aa988", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "620d6ba0-f75a-459c-8e57-e847887cd04b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "0e2f7b26-60ea-4b6b-a7c6-0bc6808e4b27", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "20cc2169-575b-4016-90c3-1474958e53c9", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n            # Adaptive parameters modification\n            self.inertia_weight *= np.random.uniform(0.95, 1.05)\n            self.cognitive_weight *= np.random.uniform(0.95, 1.05)\n            self.social_weight *= np.random.uniform(0.95, 1.05)\n            self.scaling_factor *= np.random.uniform(0.95, 1.05)\n            self.crossover_rate *= np.random.uniform(0.95, 1.05)\n\n        return g_best", "name": "AdaptiveHybridPSODE", "description": "A novel metaheuristic algorithm called Hybrid PSO-DE with adaptive parameters combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for global exploration and efficient exploitation in black box optimization tasks.", "configspace": "", "generation": 52, "fitness": 0.4543095646256407, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.32.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9192979559083374, 0.9244063448861103, 0.9169555340680073, 0.9267869483761614, 0.9253293089041488, 0.9249470990060268, 0.931256265190597, 0.9248847965912692, 0.9021492942515147, 0.8484258562857447, 0.8337580781633884, 0.7640964019791844, 0.8494671421942704, 0.8293637751378466, 0.7629319781257236, 0.8540241629047362, 0.8517307517639311, 0.7959895946391089, 0.10420382201836165, 0.15976960225357795, 0.13475112251287724, 0.1253950369304213, 0.18858110936059058, 0.15929686593152115, 0.14643675502210285, 0.15909301649341379, 0.1429082940767239, 0.12428771169871977, 0.09010489739900263, 0.10964471716688873, 0.10074661739223234, 0.11636758153836968, 0.12323195260078013, 0.1328190742302111, 0.07566899572097896, 0.09434431797951004, 0.9841054033995069, 0.9894020648284594, 0.9799246529527654, 0.9777780519109818, 0.9823115931110258, 0.9792754346425517, 0.9863137408834837, 0.963297253229941, 0.990064935859431, 0.8411192563071275, 0.8039325870978908, 0.670302931360219, 0.8406646925870449, 0.6767687526898262, 0.7007347860264985, 0.8009324969004689, 0.7926513728476341, 0.7337544621689048, 0.9517654348201199, 0.2407004370101664, 0.24474849864841486, 0.2824320275642416, 0.28014040953782504, 0.3001381439966325, 0.9337669693114676, 0.931624077497684, 0.2391998133824338, 0.7165915942394935, 0.5645422187837512, 0.7817546294918054, 0.7449839942753016, 0.7409274691487542, 0.7465422637401489, 0.7582468890430349, 0.7692810128601721, 0.766709653710992, 0.134821783531471, 0.14693309921412911, 0.7313462400685637, 0.8220233542421824, 0.8302864801024278, 0.7851242128253247, 0.8151432499275357, 0.22171463173380823, 0.769735898121332, 0.08056569477527808, 0.2239868627603825, 0.07083064866115618, 0.05576043828110522, 9.999999999998899e-05, 0.37704924023709696, 0.7307017063052934, 0.40183761083099856, 0.6990709035053908, 0.8390858072061305, 0.13663881683346135, 0.719911072777377, 0.16664122671249892, 0.2504635953786095, 0.34971310224766217, 0.802954414828564, 0.25746917318320306, 0.7366641385033288, 0.2574791146481781, 0.15720946895978305, 0.1318282625313585, 0.292299991786359, 0.6152841872846102, 0.49305205586637146, 0.19667553038847496, 0.18168650796942443, 0.2578728667296756, 0.46534588923972975, 0.629906729173161, 0.5515868926979427, 0.5612978467085905, 0.4790092765198306, 0.5675749739754521, 0.38553676777542656, 0.6588200102291151, 0.43977731762745265, 0.8980571820654906, 0.8659592646120535, 0.8641775911515908, 0.8945984213954308, 0.753745107696162, 0.8789092946270667, 0.9014830229477122, 0.7900118801005878, 0.8585589014436019, 0.12319573170036913, 0.13984653351880805, 0.06589197657908075, 0.14658734921207817, 0.12692251847876324, 0.1439731958208944, 0.14467144056225956, 0.1439369639443241, 0.10955175054689603, 0.8337595655859843, 0.6330490416646192, 0.2405571401529074, 0.5151794546905339, 0.3566920037422282, 0.3569420908368601, 0.4917512512957133, 0.26932614236804764, 0.23212039828610131, 0.4667657751499166, 0.28201608814883217, 0.626453022677645, 0.6104334171498593, 0.4206607222709273, 0.5382097882763675, 0.2958670896000757, 0.5602577765429126, 0.600301176134737, 0.2735473264577505, 0.24327081276283302, 0.3809915427652132, 0.4151584492434802, 0.22174193245283413, 0.4750840450387488, 0.6109172345848242, 0.5309180261919652, 0.5631706583676865, 0.20680214010632858, 0.19138035822630128, 0.20283781223965303, 0.22744448599595812, 0.22991621904205806, 0.3148739317529061, 0.19818019431095557, 0.21850735903992924, 0.20698479676073178, 0.20211609230412453, 0.19779251065456283, 0.18292311759867175, 0.1863121740536724, 0.19662180327992151, 0.19873025205684303, 0.20468573730284478, 0.18987800845991043, 0.2237614221956833, 0.9440776810968498, 0.18713457713314074, 0.11305109564779725, 0.16283953840125598, 0.20166744527194413, 0.1994986054605753, 0.12295032743546597, 0.1702183315943454, 0.16720289311513492, 0.9371296327471503, 0.15782105218222964, 0.16881146692434668, 0.935705000671906, 0.16854309505335896, 0.16745689307401956, 0.9235894931842901, 0.10488295770176226, 0.9281405700805726, 0.19223547485858705, 0.1859245993443922, 0.17856404048921481, 0.2006370479947185, 0.1894238970054989, 0.1775719647197902, 0.19987899858139713, 0.20722708200515128, 0.17770221476250314, 0.09996417349953768, 0.09109572912202513, 0.08901948755664857, 0.08480582636527123, 0.09504248924701353, 0.0929857548349784, 0.10074466943095739, 0.09604341909679714, 0.09661004175009746]}, "mutation_prompt": null}
{"id": "7058a4a9-87c7-4e11-92c2-468b8702ffb4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "edf1e87c-5c11-43fe-bed7-0085dba706cb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "983c574d-3a5b-48e6-b168-382b7397b9ff", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, population_size=30, alpha=0.5, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def attractiveness(self, brightness, distance):\n        return self.beta0 * np.exp(-self.gamma * distance**2) + self.alpha * brightness\n\n    def move_firefly(self, firefly, brightest_firefly):\n        distance = np.linalg.norm(firefly - brightest_firefly)\n        attractiveness = self.attractiveness(firefly_fitness, distance)\n        return firefly + attractiveness * (brightest_firefly - firefly) + 0.01 * np.random.normal(size=self.dim)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        firefly_fitness = np.array([func(individual) for individual in population])\n        brightest_idx = np.argmin(firefly_fitness)\n        brightest_firefly = population[brightest_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if firefly_fitness[j] < firefly_fitness[i]:\n                        population[i] = self.move_firefly(population[i], population[j])\n\n            firefly_fitness = np.array([func(individual) for individual in population])\n            new_brightest_idx = np.argmin(firefly_fitness)\n            if firefly_fitness[new_brightest_idx] < firefly_fitness[brightest_idx]:\n                brightest_firefly = population[new_brightest_idx]\n                brightest_idx = new_brightest_idx\n\n        return brightest_firefly", "name": "FireflyAlgorithm", "description": "An evolutionary algorithm inspired by the behavior of fireflies, Firefly Algorithm mimics the flashing patterns of fireflies to optimize black box functions, with brighter fireflies attracting others towards them in the search space.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'firefly_fitness' is not defined\").", "error": "NameError(\"name 'firefly_fitness' is not defined\")", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {}, "mutation_prompt": null}
{"id": "b151ec1e-e39d-4458-b1f8-d3a6901d578b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "072776b1-50c1-471a-bf48-044fa348f5e3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "2f1e825d-1636-4e85-b960-55e1e5e33f38", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "247c445a-11d2-4ae4-b514-3c8a9eca3941", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "b23ed8f0-3cc9-4f69-9fed-cf2855fedcf7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "482719ad-f96c-4692-bae6-b5acf18732cb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "427ab953-1b99-4db4-aa6c-f1e1a1405f8e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "713bac88-8c1e-4021-a562-ee7d3d0c1d90", "solution": "import numpy as np\n\nclass HybridPSODE_SA:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9, initial_temp=1.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        temperature = self.initial_temp\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n            temperature *= self.cooling_rate\n\n        return g_best", "name": "HybridPSODE_SA", "description": "Enhancing the HybridPSODE algorithm by integrating simulated annealing for enhanced exploration of the search space and exploitation of local optima.", "configspace": "", "generation": 63, "fitness": 0.4526557801272084, "feedback": "The algorithm HybridPSODE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.26.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.671754312644073, 0.6754643348534402, 0.6738560205958948, 0.6707528121623998, 0.6762640527117975, 0.6731680023475726, 0.6688739611843246, 0.6715323395356965, 0.6768489670731819, 0.6409080463690433, 0.6367201949985667, 0.6374591759755678, 0.6406704661747165, 0.6487285672802874, 0.63479119925923, 0.6348807572692412, 0.6499082818768009, 0.6383603848073225, 0.13272490760757105, 0.11708315530750402, 0.15623061254993886, 0.11692010297452038, 0.1434920593419714, 0.15822998831627688, 0.16024569131194388, 0.1316700963752141, 0.1594631376192721, 0.1323248643516881, 0.1292977814034152, 0.10386681103078022, 0.11023152589231977, 0.12386619582844072, 0.10933847020510334, 0.1208011298953181, 0.1151235615596885, 0.11562415752971811, 0.9866961978333978, 0.9816309265211995, 0.9859200494072271, 0.9839001675030072, 0.9829358028612232, 0.9840122352956845, 0.9846920983026229, 0.9827357152622583, 0.9872306185874489, 0.6682752637028828, 0.6565147174895951, 0.6533532725774462, 0.6630352694813035, 0.6503929334985732, 0.640223953631419, 0.660481521534636, 0.6516033603410363, 0.662470549476357, 0.900557131282907, 0.9279591188396059, 0.22134644698960282, 0.8904480805936639, 0.9368637408944338, 0.8876164916085583, 0.24649074162223727, 0.9058971142367185, 0.9054076890463422, 0.650403851726202, 0.6283051533161679, 0.6209231193579539, 0.6350108567343726, 0.6115124523377305, 0.6201277858348875, 0.6211342136991644, 0.6541270693839121, 0.6283916545371471, 0.6303205323097661, 0.5118228985729572, 0.6177793567794735, 0.634288297202495, 0.6159552606130168, 0.6546540577013646, 0.5938729027321581, 0.13410812395400573, 0.6362692758256256, 0.5119887331794009, 0.6309501713412725, 0.3656312967592589, 0.5647659556730611, 0.3086847494113837, 0.5598483426661834, 0.6389097686922991, 0.621729199854415, 0.6033107633176121, 0.6496473073298857, 0.6497758884879674, 0.6552040056248175, 0.2717075845987875, 0.2308318458770816, 0.4540677418892596, 0.6537631486520843, 0.6373815417495585, 0.6278995587910937, 0.18400866870338872, 0.23363413500246166, 0.23603762324820698, 0.5457346411875037, 0.4366798984725374, 0.5026951710121492, 0.42535111398888226, 0.19283662537141144, 0.1631287124693277, 0.5652229655459706, 0.5609527133092147, 0.5717183720276378, 0.5563414837822388, 0.554614032639628, 0.5763729914732563, 0.5639698714453283, 0.5407921780025755, 0.535579169274277, 0.6465527764496499, 0.6445169534028288, 0.6495986041533821, 0.6435230684711137, 0.6457073090296865, 0.6444980922617612, 0.654884475676113, 0.646178061737136, 0.6518227920858848, 0.14484563793067995, 0.12300428892811632, 0.1162951491587797, 0.12537251619945744, 0.14134531576929965, 0.15935985555060195, 0.18697245551969555, 0.160712337342797, 0.18396075923787025, 0.25204248356448566, 0.6359826142216805, 0.19103336524211723, 0.2841977445189352, 0.6544868460390518, 0.2568085398242853, 0.23468446591913228, 0.3512786722527981, 0.3643715636109457, 0.5657675346523907, 0.5663948676196889, 0.5604024071710467, 0.5602410983796287, 0.572399498988656, 0.5577074749517721, 0.5699210309035802, 0.5208601946981454, 0.5638649804677737, 0.5524037594704527, 0.3587945414735154, 0.5523722406381966, 0.5589020556797939, 0.24336014551346907, 0.41989438049960104, 0.560454788165569, 0.5597989604932007, 0.5594568851009714, 0.21027044661144556, 0.23277151100033822, 0.23814412208426683, 0.22204020824793247, 0.22677061176398794, 0.2344680517586728, 0.2672724200763237, 0.19330620418573785, 0.3247411159410619, 0.22425415453312803, 0.2071930015423532, 0.1973656204576274, 0.6456373544437951, 0.1885363256460314, 0.22569620899397613, 0.6536543466850924, 0.21051751194651425, 0.20923514167894142, 0.18697630466614412, 0.16781380268581492, 0.15479437460576917, 0.8013246963277203, 0.20059632133454575, 0.2132064206410229, 0.09991950275696782, 0.8066925443895917, 0.8059622760554073, 0.2133517756296036, 0.15688315783223827, 0.21116150437073877, 0.8103663048273763, 0.8085353602116687, 0.21166869846683478, 0.10497361313653131, 0.21233919930052103, 0.15587488257474347, 0.19538811410110835, 0.19908365628796054, 0.1923646916628321, 0.22118841769621045, 0.18520166488191048, 0.21205984834142078, 0.19223366186643753, 0.18959446971651128, 0.19967851342723497, 0.1004163777515441, 0.16557488926214026, 0.09999281882892008, 0.09817120059230344, 0.09050297532639129, 0.10299204736705125, 0.08472875302832394, 0.07691302070029471, 0.10927253215116439]}, "mutation_prompt": null}
{"id": "aa77a015-cf66-4445-b0d9-2fd15dc3d5d7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "2697ed04-56c6-4c8b-87de-d5984dca9480", "solution": "import numpy as np\n\nclass QuantumBeeOptimization:\n    def __init__(self, budget, dim, population_size=30, quantum_factor=0.6, flip_probability=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.quantum_factor = quantum_factor\n        self.flip_probability = flip_probability\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(individual) for individual in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                candidate_solution = population[i].copy()\n                for j in range(self.dim):\n                    if np.random.rand() < self.flip_probability:\n                        candidate_solution[j] = np.random.uniform(-5.0, 5.0)\n                    elif np.random.rand() < self.quantum_factor:\n                        candidate_solution[j] = best_solution[j]\n                \n                candidate_fitness = func(candidate_solution)\n                if candidate_fitness < fitness[i]:\n                    population[i] = candidate_solution\n                    fitness[i] = candidate_fitness\n\n                    if candidate_fitness < func(best_solution):\n                        best_solution = candidate_solution\n\n        return best_solution", "name": "QuantumBeeOptimization", "description": "An innovative algorithm named Quantum Bee Optimization (QBO) inspired by the collective behavior of bees in a quantum-inspired framework to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 65, "fitness": 0.11338920624948709, "feedback": "The algorithm QuantumBeeOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.2784702839268315, 0.29682708723696793, 0.29348849889055917, 0.3534737850006462, 0.2992641397160746, 0.3184446048778543, 0.33288814216301565, 0.3008375742531464, 0.28966741992566636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10009361120091564, 0.08896131341128366, 0.13275345952961448, 0.13264077076070535, 0.10292145410941889, 0.11063450996648427, 0.10995422986409809, 0.08201510196818473, 0.09910056940425871, 0.08255224404487549, 0.08447714241804716, 0.09924654493343965, 0.11153226060397647, 0.07262567504019335, 0.08512978846360764, 0.06695109812392419, 0.08027163720002284, 0.10852788037796257, 0.1414779741530705, 0.13571894676208818, 0.14673930303954075, 0.16051937441696895, 0.14118626757661712, 0.16234166672899608, 0.16772194881597569, 0.14738834667983702, 0.1589408330242661, 0.09222211603142028, 0.08548951183265252, 0.1301508874519739, 0.1268806474212557, 0.10123668473150049, 0.11235084361365066, 0.06932107691168499, 0.07265024930923214, 0.044749052905340925, 0.12750244876833405, 0.0856616176893773, 0.10833949790276842, 0.1573875583231522, 0.10087808011784127, 0.17199463952333116, 0.11144710777086697, 0.15740631398840266, 0.15755204989945637, 0.1357901503578911, 0.04483596593978634, 0.07750220631011107, 0.058219808106476756, 0.10621901705352355, 0.060539719118575364, 0.04876695899005867, 0.059141228281147984, 0.09702913727374562, 0.06494122942074865, 9.999999999998899e-05, 0.059528380960875205, 0.10057224365167983, 9.999999999998899e-05, 0.10483227637309267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022263367711588544, 0.021057708920018348, 0.04971114775540442, 0.04222795720771155, 9.999999999998899e-05, 9.999999999998899e-05, 0.10372749099966205, 0.047472405810680685, 0.00022418537470692002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040997880947293064, 0.009923429022587693, 0.01750698306940579, 9.999999999998899e-05, 0.04726311961384766, 0.04851356592419287, 0.015920492729834423, 0.00954542090703614, 0.011089192760226796, 0.26692659854188716, 0.27629041777806107, 0.2434448979028121, 0.2760887574158676, 0.25144386484064607, 0.23439834727339626, 0.27294387135733145, 0.2444724471553118, 0.2687733339042938, 0.060576291899747226, 0.07247452189267001, 0.05044274035410312, 0.06171866011780658, 0.061129739673810746, 0.1001644814500876, 0.055361082771955394, 0.08223175113018766, 0.06653352755939868, 0.13772698338190714, 0.12137824293809096, 0.11751507045174736, 0.13734915297714867, 0.12217858549757765, 0.12437751209502168, 0.14083093295406157, 0.13730491866686367, 0.11322643309321356, 0.14383047052199527, 0.2347679345575685, 0.16328092836203723, 0.18698511667771944, 0.1684098105453331, 0.15282258575865704, 0.15352934115150296, 0.20618963508918453, 0.1886660850547105, 0.10960809670301896, 0.15445454965933336, 0.10750418973516951, 0.12186616747046408, 0.12889387155589882, 0.16725918908502768, 0.1198696936090502, 0.13564212757263305, 0.12868074220674663, 0.15516176918802194, 0.14151349097889776, 0.14786913598115914, 0.15779003683270398, 0.14121894232431753, 0.14593734002813485, 0.1433454487976522, 0.18107945898713507, 0.15222666969922716, 0.18231902774431386, 0.1893031977586762, 0.17714628791313314, 0.17781174950588796, 0.15287402410284123, 0.18617335863053208, 0.1719743774728928, 0.20038325130399337, 0.18664331938665368, 0.17627521021719117, 0.10850654716301722, 0.3423262964743773, 0.23955919919968305, 0.1848439582900836, 0.17191717684876695, 0.09693426969658925, 0.16250016724711236, 0.16825554638575746, 0.2852546804561177, 0.14137237482928722, 0.27505927906186944, 0.10789415314945816, 0.1561908486148299, 0.18995763734496462, 0.09967047272502572, 0.26257546024480494, 0.11578731105785622, 0.16506020854555736, 0.19640255667642037, 0.17672684393844262, 0.14435470471914547, 0.15227404582646287, 0.17561377607223527, 0.16493620869774916, 0.17028176074956014, 0.1650154265503061, 0.03867302988571841, 0.045175555508704, 0.04634989219519192, 0.05480677668915446, 0.04291119410455979, 0.0694648496360114, 0.0637791129370362, 0.04606095948627409, 0.031097928243371875]}, "mutation_prompt": null}
{"id": "09da6a8f-caf0-402b-97d6-47cf2cc3d942", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "69013ff0-a687-4a77-9be2-4b8d833be0e2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "61291fae-d447-43ac-8da1-4ba7e2f78767", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "ec133819-3260-45fb-a2dd-19bbcf33a0f3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "85efac57-3b9f-4324-ab6f-92e5f2df7581", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "e1d5f221-198f-4930-8a6f-e47339896644", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "50a35980-3216-46b3-a5c6-dffe7d7907b4", "solution": "import numpy as np\n\nclass DynamicHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9, adaptation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n        self.adaptation_rate = adaptation_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n            if np.random.rand() < self.adaptation_rate:\n                self.inertia_weight *= np.random.uniform(0.8, 1.2)\n                self.cognitive_weight *= np.random.uniform(0.8, 1.2)\n                self.social_weight *= np.random.uniform(0.8, 1.2)\n                self.scaling_factor *= np.random.uniform(0.8, 1.2)\n                self.crossover_rate *= np.random.uniform(0.8, 1.2)\n\n        return g_best", "name": "DynamicHybridPSODE", "description": "Enhancing the HybridPSODE algorithm by introducing a dynamic parameter adaptation mechanism to improve convergence performance.", "configspace": "", "generation": 72, "fitness": 0.42146251479825697, "feedback": "The algorithm DynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.31.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9081650862548297, 0.9083535601392372, 0.8925673758235191, 0.9203270662260572, 0.7480984826666156, 0.9078652412242392, 0.9001941017945639, 0.9184987331146383, 0.8873588577000021, 0.7759811376488338, 0.80809173094492, 0.7702783392924931, 0.8389641138748525, 0.675140693696054, 0.7706161155292806, 0.8057751851849991, 0.778019496126539, 0.7488391649124879, 0.15680771332905474, 0.14544024487430796, 0.17224918365331976, 0.09944396493017904, 0.09181887295322688, 0.17682355918981663, 0.13314488053892326, 0.1246932423892646, 0.16769184766134826, 0.10969551563874824, 0.08203592205001298, 0.12538913002939078, 0.0962615966644853, 0.08879886414664961, 0.1587174154674994, 0.12235003456815707, 0.06993247287341242, 0.13455696086017765, 0.9836086406686494, 0.9848913703552782, 0.9857937704161877, 0.9706106365164945, 0.9698738911590256, 0.9821139789934578, 0.9887527789071155, 0.9679917058865382, 0.9890371780743978, 0.754231357323895, 0.7075828001280793, 0.7331188912494795, 0.7806160074254087, 0.6902678754705156, 0.7345723870971463, 0.760177866836852, 0.6962537840221279, 0.7264112986092517, 0.27277935925602337, 0.1265064718549751, 0.8011770937929363, 0.21056874602057585, 0.2868561718446342, 0.9153837745352782, 0.90565914542296, 0.9486855820819945, 0.23522899347659643, 0.6581360162963805, 0.6406273118811923, 0.3762013126241395, 0.1355007491995056, 0.13596502415881628, 0.13106845820345192, 0.6207999457951989, 0.6541395746743615, 0.2804765172865836, 0.7115189913398987, 0.6483866886715735, 0.31837195951860964, 0.6782710486078505, 0.13594098855880288, 0.30475400454292934, 0.8418326345270086, 0.8300301211560066, 0.33042598673192447, 0.07774589747225003, 0.6380938279925932, 9.999999999998899e-05, 0.41913390284265317, 0.6248473208599753, 0.059287363867993714, 0.22177371817303915, 0.780215326109235, 0.08352079731836404, 0.8144082914703978, 0.7642824312507879, 0.15668180286334132, 0.17765694124055076, 0.1421630217230413, 0.049362787364527705, 0.5482570952198066, 0.837812320548632, 0.11361495562966828, 0.09187562498467194, 0.21444645694840836, 0.11936252479877807, 0.12260856175186985, 0.7773986970601414, 0.09202141497028282, 0.2761492893179438, 0.17119052646711186, 0.08475340705063861, 0.2991473324796545, 0.7341876640669831, 0.18285180117618716, 0.49387053342417864, 0.733803943170861, 0.32044996141245996, 0.3093627419265794, 0.7661425703779577, 0.08859938446634441, 0.7969472278575715, 0.894171235170992, 0.590729068222519, 0.8452214279507655, 0.9013075534366699, 0.62155422603062, 0.8555548089165719, 0.8708334544101338, 0.591664643085725, 0.12379903760575739, 0.14540955870550099, 0.14135766410875117, 0.145203630615532, 0.1071933123176807, 0.1590272547080296, 0.09346106081435412, 0.11189553841259126, 0.14978434074865832, 0.2600622013158481, 0.25143271933224953, 0.6592521992180913, 0.27433794811454737, 0.5438023777666622, 0.23334455611413307, 0.8254510159943121, 0.27721083910643274, 0.32155113107938915, 0.2962045405583482, 0.5404480052321324, 0.5594360066785931, 0.4079867753361185, 0.25247012876162567, 0.4948989590115709, 0.5846051031237143, 0.270546848525826, 0.4309021594978746, 0.28343606519714903, 0.19779399003446174, 0.5072646449316789, 0.25263905767634653, 0.23079675876167705, 0.3682549856515215, 0.24765538270716392, 0.2647292444212216, 0.36052252810632823, 0.22528324389521137, 0.1566506662925019, 0.2214784428215556, 0.21085749662279296, 0.21304197967247906, 0.23824624828193774, 0.22403769172182275, 0.24593341211859365, 0.248453475147265, 0.2008073142642941, 0.16955870432303732, 0.20860435553040213, 0.24999620079580553, 0.18081407845994002, 0.22056119727820778, 0.22447857051303088, 0.20385828330378608, 0.17934059615768982, 0.21227761295995806, 0.16899881608004486, 0.14749519940731604, 0.9100912044242591, 0.2006013848561341, 0.16522373790419076, 0.9114407557466204, 0.16985202432636337, 0.15397488670150816, 0.9228785996283019, 0.15761906944466686, 0.16909070831746775, 0.9119459515313862, 0.9410695316150494, 0.15510313787491736, 0.9064246995486858, 0.10473827787160062, 0.8746640872685425, 0.1886756372616295, 0.17666583736651387, 0.2042617397123806, 0.185532492960223, 0.18576095876106313, 0.20796241068721466, 0.17850761728050435, 0.17600634499646217, 0.18935100458226417, 0.07203961296244454, 0.0909471625388758, 0.09950786356735919, 0.10117218979576792, 0.10618274765339941, 0.09441946163218595, 0.08910595626949869, 0.09520797831570504, 0.09958828902904238]}, "mutation_prompt": null}
{"id": "60e951bd-8a98-4e81-a339-218b11e01b41", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "2d8b503a-7387-4250-8242-5480cf936239", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "f556592f-9625-46da-8503-1f5c8ae6c7d3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "b3ebc92f-4cb3-4f20-acc9-db2cef858ca1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "01e0c68a-3f00-42b3-b3b8-734dc3b1b736", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "2ea20f44-7764-46d9-944b-35ac092a8358", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "AdaptiveHybridPSODE", "description": "Utilizing a Novel Hybrid Algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) enhanced by adaptive strategies to improve convergence and exploration for black box optimization tasks.", "configspace": "", "generation": 78, "fitness": 0.4713685494542293, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "78e039a4-b8b3-4be8-9ccc-9186030051df", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "825031b2-0c24-40bb-a0cb-6b116fba568c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "3a4341cf-a861-4fc2-8755-7c597546465f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "775fef64-0909-4f74-ad43-6bbad6bd919d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "0c861407-63b6-4d9c-a84a-8cb68ba96268", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "afcf6579-270a-478c-add9-2bcb53d3ebd4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "781f1914-36fe-4c33-968f-cccb10dcf01b", "solution": "import numpy as np\n\nclass DynamicHybridMetaheuristicAlgorithm:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n            # Dynamic adaptation of weights and strategies\n            if np.random.rand() < 0.15:\n                self.inertia_weight = np.clip(self.inertia_weight + np.random.normal(0, 0.1), 0.1, 1.0)\n                self.cognitive_weight = np.clip(self.cognitive_weight + np.random.normal(0, 0.1), 0.1, 3.0)\n                self.social_weight = np.clip(self.social_weight + np.random.normal(0, 0.1), 0.1, 3.0)\n                self.scaling_factor = np.clip(self.scaling_factor + np.random.normal(0, 0.1), 0.1, 1.0)\n                self.crossover_rate = np.clip(self.crossover_rate + np.random.normal(0, 0.1), 0.1, 1.0)\n\n        return g_best", "name": "DynamicHybridMetaheuristicAlgorithm", "description": "Introducing a Dynamic Hybrid Metaheuristic Algorithm (DHMA) that dynamically adapts the weights and strategies of PSO and DE based on individual and global performance to enhance exploration and exploitation for black box optimization.", "configspace": "", "generation": 85, "fitness": 0.35987631302092254, "feedback": "The algorithm DynamicHybridMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9240300805188607, 0.8572658771876294, 0.9144111420706105, 0.9320451311844093, 0.18265673955188544, 0.9109541501601389, 0.9251648066457269, 0.8281286593155968, 0.8951271598530425, 0.8212018692178237, 0.5430164417556905, 0.7873396652456499, 0.7894916048049435, 0.04882842554607836, 0.6344524167577333, 0.8525147514068281, 0.461525710608945, 0.684689286519073, 0.14612266085956782, 0.0889874584561039, 0.13143164659198026, 0.13243163142525716, 0.1467019288535435, 0.1577474729661692, 0.13089428647486057, 0.09534123287333551, 0.14114817204719188, 0.12494939069230893, 0.08641035047452861, 0.10946351327115822, 0.1446329218022212, 0.047302607882969805, 0.12347115184862578, 0.14937724404050856, 0.10385958346675983, 0.09235255911947693, 0.9836086406686494, 0.9900024600660378, 0.9857937704161877, 0.9694720226339727, 0.9812621859331229, 0.9821139789934578, 0.9887527789071155, 0.98466368614675, 0.9890371780743978, 0.8464931289601589, 0.42236681761067163, 0.4640576701799377, 0.8031797020472144, 0.6494895990656486, 0.6321876823022108, 0.7828595954123967, 0.3920520863760498, 0.49266771462241565, 0.23098472251539148, 0.48596144478274717, 0.9040294259474317, 0.2219203920110584, 0.9295467427194741, 0.9049943972344988, 0.17853007295267165, 0.4887022481444616, 0.35124310848423534, 0.6100206948156344, 0.13631029889902113, 0.23369271449125018, 0.6177409209906474, 0.4111917650265021, 0.34178496605284003, 0.602010881510036, 0.5081228429852108, 0.5138420667241723, 0.5639634253878636, 0.05454838525579764, 0.218504310323695, 0.6460838173907686, 0.3339693241311945, 0.39707168812809746, 0.7353483394069585, 0.4666080279832606, 0.21752643587054754, 0.237639212569553, 9.999999999998899e-05, 0.06935486601050944, 0.05146569317667837, 9.999999999998899e-05, 0.04289202328445463, 0.4072701605601149, 0.08857865228043371, 0.43147161432593784, 0.6712478495482757, 0.03511805989518357, 0.2504926124778404, 0.16530016793205704, 0.03329002575485007, 0.07310035474391263, 0.18735454308737876, 0.2333478092381418, 0.37272979651146576, 0.1820485044623259, 0.037623058677376364, 0.1478611263896793, 0.2268259770258001, 0.22298540357421337, 0.150354987104534, 0.3725982704454547, 0.1504849458709958, 0.08516709717993176, 0.2344033149336363, 0.1684694608567282, 0.23129963770417994, 0.303158874102175, 0.2634075315782052, 0.44081800204574684, 0.2198281227723866, 0.10883084141473687, 0.161125294446664, 0.7923386366325, 0.6485082830295386, 0.6542299061398049, 0.768891877109853, 0.693561384416677, 0.571217438386897, 0.722210247605708, 0.5714046802836008, 0.6967605503523273, 0.12466440950660285, 0.14759301248961842, 0.10082074097360016, 0.18791748560256916, 0.07199078712462503, 0.1257176840105323, 0.1049604601824563, 0.11808196308823682, 0.1071846269206429, 0.26240124754499783, 0.19599449943678104, 0.15194887457046846, 0.304631067454323, 0.21081495031084296, 0.24355014792527963, 0.3564999371488008, 0.20819830132705908, 0.18737411884320432, 0.4275586555962477, 0.23179565836920868, 0.4722472263464421, 0.4930016737944187, 0.19537599987368648, 0.37600269013090504, 0.6964607516985291, 0.26097673404074617, 0.40089002252026407, 0.2613865779120351, 0.07770378468206163, 0.3229746475159284, 0.25723475133331575, 0.194379616457919, 0.3252291532901429, 0.23569955394551467, 0.23319456397156924, 0.29064048814523935, 0.2168906332431504, 0.14623691864225075, 0.24078152361649718, 0.21325769347299428, 0.1856289100722981, 0.23357978814705305, 0.21296848658470657, 0.20620676529014137, 0.2268816785323009, 0.2270721627542115, 0.17903499453791283, 0.1758834277911827, 0.2121275114185288, 0.19338696606544126, 0.19867833908761146, 0.20368246156123826, 0.21306085286555476, 0.19810780879829648, 0.2124535238889057, 0.2135690446383386, 0.14715450473485003, 0.9262886837049963, 0.2009831653367934, 0.15091260935462159, 0.9202205353677929, 0.16963007906008987, 0.15399714718867386, 0.9438090218200447, 0.15770334286268606, 0.16906725599297712, 0.941122425193266, 0.16908760023666203, 0.1555198075431512, 0.9369351335184211, 0.1054421477841081, 0.902265796060928, 0.1895738460500661, 0.1826087274017999, 0.18359974868527262, 0.20045261778867396, 0.19988595329955183, 0.1797016910688093, 0.21003415863636143, 0.1774648165274535, 0.1734365338486965, 0.09193210754028192, 0.0765564689819257, 0.09342924345530479, 0.10112897865776782, 0.08022539261205497, 0.09676835616052137, 0.10777504501253476, 0.11553660840183644, 0.08339692151931233]}, "mutation_prompt": null}
{"id": "50effbb6-25b4-4b15-95a2-f489dd9c8a50", "solution": "# import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        super().__init__(budget, dim, population_size, inertia_weight, cognitive_weight, social_weight, scaling_factor, crossover_rate)\n    \n    def __call__(self, func):\n        def adjust_parameters():\n            self.inertia_weight = np.clip(self.inertia_weight * np.random.normal(1, 0.1), 0.1, 1.0)\n            self.cognitive_weight = np.clip(self.cognitive_weight * np.random.normal(1, 0.1), 0.1, 2.0)\n            self.social_weight = np.clip(self.social_weight * np.random.normal(1, 0.1), 0.1, 2.0)\n            self.scaling_factor = np.clip(self.scaling_factor * np.random.normal(1, 0.1), 0.1, 2.0)\n            self.crossover_rate = np.clip(self.crossover_rate * np.random.normal(1, 0.1), 0.1, 1.0)\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            adjust_parameters()\n            ...", "name": "DynamicHybridPSODE", "description": "An evolutionary algorithm utilizing a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) with dynamic parameter adaptation for enhanced global exploration and exploitation in black box optimization.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {}, "mutation_prompt": null}
{"id": "cc6a2574-cb2b-484b-b771-a4e856086a2a", "solution": "import numpy as np\n\nclass ESO:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "ESO", "description": "An innovative algorithm, Evolutive Swarm Optimization (ESO), that combines the concepts of evolutionary algorithms with swarm intelligence to dynamically adjust the balance between exploration and exploitation for efficient black box optimization.", "configspace": "", "generation": 87, "fitness": 0.4713685494542293, "feedback": "The algorithm ESO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "85deac25-319b-4b6b-a1fd-9e0a29c5cc6f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "ff05f6e0-43aa-4f42-84f5-37259959320c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "f3a62415-ebe5-4642-a077-8c34b95b8285", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "4b686b50-fc0a-4dcf-9283-57c75009c333", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "36d44d16-a0f3-4f47-9dd1-99de1afa9c05", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "981b9022-ee81-46ae-b7ed-f078d841dd38", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "6bb53950-4220-42b6-b9bf-f0b027d7d3de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "53c30c5c-4f4f-4e01-b7fb-ad149f6a4b6e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "b5c024e4-fdec-4881-bf68-29809b231a62", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "fad11045-e982-46c6-b954-105dd6cebc61", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "28707b39-7914-4a9e-945c-4c09d61d8842", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
{"id": "0005a6b2-52d8-40e8-aba4-7230732a024c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, scaling_factor=0.5, crossover_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.scaling_factor = scaling_factor\n        self.crossover_rate = crossover_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        p_best = population.copy()\n        fitness = np.array([func(individual) for individual in population])\n        p_best_fitness = fitness.copy()\n        g_best_idx = np.argmin(fitness)\n        g_best = population[g_best_idx]\n\n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * r1 * (p_best[i] - population[i]) + self.social_weight * r2 * (g_best - population[i])\n                population[i] = np.clip(population[i] + velocities[i], -5.0, 5.0)\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), -5.0, 5.0)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < p_best_fitness[i]:\n                        p_best[i] = trial\n                        p_best_fitness[i] = trial_fitness\n\n                        if trial_fitness < fitness[g_best_idx]:\n                            g_best_idx = i\n                            g_best = trial\n\n        return g_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to leverage the global exploration of PSO and the efficient exploitation of DE for black box optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f8591ec-d57d-4df6-a543-dfec9ce5e6db", "metadata": {"aucs": [0.9220727048177493, 0.9157648719630759, 0.9148381590252816, 0.9166944116333631, 0.9190983269115983, 0.9285665772161882, 0.9144126823624567, 0.9158807419346942, 0.9233521382517939, 0.8421678485966086, 0.8319949911119675, 0.8403912539220985, 0.8379085993328648, 0.8256526631703485, 0.8404194998392036, 0.8025542886376198, 0.7985836202150666, 0.824788595506498, 0.09654527883363284, 0.1423084452221638, 0.15844951002026886, 0.10952534319289442, 0.09532814346266727, 0.11038531188371725, 0.1115037446817907, 0.12487405055718426, 0.15855401816810277, 0.08653539072153471, 0.0956467271715381, 0.10041579684389867, 0.1611274429230567, 0.14102691967862735, 0.12406312210910908, 0.105105323888523, 0.13258145131494947, 0.07842316720546971, 0.9840180747646804, 0.9846552468286943, 0.9769750658822656, 0.9760431272499404, 0.9801768478529391, 0.9733959633610255, 0.9829795613404301, 0.9819828777487217, 0.9895092083820776, 0.8055353251781233, 0.8227959823684234, 0.8155213993729603, 0.8223150081799346, 0.7717984754759944, 0.8370188700507741, 0.836763654516728, 0.8397480737009826, 0.8116988200803479, 0.2306119621085284, 0.35574643351379576, 0.39320772362057166, 0.20980247249446393, 0.9281925923732822, 0.9132257512786537, 0.17750065292366346, 0.13863605059385486, 0.19325173303234455, 0.7306545589147674, 0.7626766742036973, 0.7603167016942244, 0.7504859457798466, 0.7574620179204463, 0.8294797978398876, 0.7434220875491603, 0.6990534940893955, 0.8414366329708873, 0.7437633739753154, 0.12237502805135281, 0.7175491408417669, 0.7979072900668223, 0.7624868091706646, 0.8365544302025689, 0.7980026814802181, 0.7836841334647805, 0.7495977963333313, 0.5633323682542081, 0.7289864953651166, 0.14803186811290092, 0.3842466226953285, 0.015328005651922272, 0.02831888626050927, 0.6216729483239993, 0.5951989818255672, 0.7466767009518851, 0.7523308250699561, 0.11349702150808771, 0.15924111584787626, 0.3522951745819882, 0.05757108821765089, 0.3282869816660331, 0.7775091840090054, 0.2389568318389168, 0.6935562186855636, 0.5645184972638484, 0.4002720640808457, 0.32248468875512937, 0.3758903758538984, 0.6655961733021187, 0.5733755687992632, 0.1374518537049365, 0.24306790957013968, 0.4683958783817469, 0.6581101944792831, 0.5638877721220688, 0.7523085464059729, 0.6753275071498013, 0.7302864153381105, 0.6608245215848746, 0.6786349963770206, 0.5387509101077375, 0.4807553788346386, 0.9099904072165246, 0.8808397097357912, 0.8798669080440646, 0.8278616262741956, 0.8776250322228275, 0.8747713005956643, 0.884184834760922, 0.8882628256432872, 0.8528676056147161, 0.1865755594934041, 0.15470037778685497, 0.08936387637763854, 0.18426582609029973, 0.1290466509497823, 0.16025010562803632, 0.11540904244101768, 0.09207246221318544, 0.14244645636445386, 0.23441301501433598, 0.27011521878274236, 0.8266421488255054, 0.8627526011341761, 0.21106959990004615, 0.15928660530702532, 0.4385948912552575, 0.2918218215665397, 0.20905097447744658, 0.78239917904623, 0.605229425370206, 0.5293063549476853, 0.7927500003078567, 0.5362367428682253, 0.7834262255912676, 0.5196017626304794, 0.6204553065878455, 0.6707569519635519, 0.3298496199504364, 0.33679010815446075, 0.3099081924194147, 0.6294742861960518, 0.19540967358673944, 0.24668151054622323, 0.633853585771169, 0.3306176351594573, 0.3347687984184914, 0.19083553716251134, 0.142340799299573, 0.21242887700338542, 0.2733010642980982, 0.3142838203486006, 0.22590201388871234, 0.2241223671091762, 0.2019458763391685, 0.22313185280300663, 0.20141186325886795, 0.1860280209655727, 0.19896160912665717, 0.22926881967120738, 0.19695635968508263, 0.20245024122085042, 0.19938449429810112, 0.19633726972984444, 0.2245276584376592, 0.18699409084991958, 0.16793682473184945, 0.18853130835818543, 0.9400108200723338, 0.20136714733371552, 0.19808077299862648, 0.16225346829176357, 0.17039565017267633, 0.16337274350612674, 0.9373947502126583, 0.15782414619086726, 0.16875815902954205, 0.9234901848254172, 0.1681674066849057, 0.2119157141292941, 0.9181179895733005, 0.104820436233106, 0.10518192618079081, 0.17829915391520446, 0.180993321986465, 0.17802367330462365, 0.19036874724710362, 0.18590918618236496, 0.18783936648434996, 0.18844530192234943, 0.17338532077588464, 0.18325977896727363, 0.09354862029686972, 0.08642778464063172, 0.10202839957431986, 0.09310598626678313, 0.09849157169158584, 0.0863338863544284, 0.11565347895683753, 0.10305673970487128, 0.08800815446000398]}, "mutation_prompt": null}
